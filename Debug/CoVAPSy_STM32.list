
CoVAPSy_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002284  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1c8  0800c1c8  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1d0  0800c1d0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1d0  0800c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1d4  0800c1d4  0001c1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800c1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000038  0800c210  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800c210  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025a40  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf6  00000000  00000000  00045aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d98  00000000  00000000  0004a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016b1  00000000  00000000  0004c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258d4  00000000  00000000  0004db31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023f69  00000000  00000000  00073405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e480f  00000000  00000000  0009736e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b98  00000000  00000000  0017bb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00183718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000038 	.word	0x20000038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f2c 	.word	0x08009f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	08009f2c 	.word	0x08009f2c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2uiz>:
 800079c:	004a      	lsls	r2, r1, #1
 800079e:	d211      	bcs.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d211      	bcs.n	80007ca <__aeabi_d2uiz+0x2e>
 80007a6:	d50d      	bpl.n	80007c4 <__aeabi_d2uiz+0x28>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d40e      	bmi.n	80007d0 <__aeabi_d2uiz+0x34>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	fa23 f002 	lsr.w	r0, r3, r2
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d102      	bne.n	80007d6 <__aeabi_d2uiz+0x3a>
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	4770      	bx	lr
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	4770      	bx	lr

080007dc <__aeabi_uldivmod>:
 80007dc:	b953      	cbnz	r3, 80007f4 <__aeabi_uldivmod+0x18>
 80007de:	b94a      	cbnz	r2, 80007f4 <__aeabi_uldivmod+0x18>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	bf08      	it	eq
 80007e4:	2800      	cmpeq	r0, #0
 80007e6:	bf1c      	itt	ne
 80007e8:	f04f 31ff 	movne.w	r1, #4294967295
 80007ec:	f04f 30ff 	movne.w	r0, #4294967295
 80007f0:	f000 b970 	b.w	8000ad4 <__aeabi_idiv0>
 80007f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007fc:	f000 f806 	bl	800080c <__udivmoddi4>
 8000800:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr

0800080c <__udivmoddi4>:
 800080c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000810:	9e08      	ldr	r6, [sp, #32]
 8000812:	460d      	mov	r5, r1
 8000814:	4604      	mov	r4, r0
 8000816:	460f      	mov	r7, r1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d14a      	bne.n	80008b2 <__udivmoddi4+0xa6>
 800081c:	428a      	cmp	r2, r1
 800081e:	4694      	mov	ip, r2
 8000820:	d965      	bls.n	80008ee <__udivmoddi4+0xe2>
 8000822:	fab2 f382 	clz	r3, r2
 8000826:	b143      	cbz	r3, 800083a <__udivmoddi4+0x2e>
 8000828:	fa02 fc03 	lsl.w	ip, r2, r3
 800082c:	f1c3 0220 	rsb	r2, r3, #32
 8000830:	409f      	lsls	r7, r3
 8000832:	fa20 f202 	lsr.w	r2, r0, r2
 8000836:	4317      	orrs	r7, r2
 8000838:	409c      	lsls	r4, r3
 800083a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800083e:	fa1f f58c 	uxth.w	r5, ip
 8000842:	fbb7 f1fe 	udiv	r1, r7, lr
 8000846:	0c22      	lsrs	r2, r4, #16
 8000848:	fb0e 7711 	mls	r7, lr, r1, r7
 800084c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000850:	fb01 f005 	mul.w	r0, r1, r5
 8000854:	4290      	cmp	r0, r2
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x62>
 8000858:	eb1c 0202 	adds.w	r2, ip, r2
 800085c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000860:	f080 811c 	bcs.w	8000a9c <__udivmoddi4+0x290>
 8000864:	4290      	cmp	r0, r2
 8000866:	f240 8119 	bls.w	8000a9c <__udivmoddi4+0x290>
 800086a:	3902      	subs	r1, #2
 800086c:	4462      	add	r2, ip
 800086e:	1a12      	subs	r2, r2, r0
 8000870:	b2a4      	uxth	r4, r4
 8000872:	fbb2 f0fe 	udiv	r0, r2, lr
 8000876:	fb0e 2210 	mls	r2, lr, r0, r2
 800087a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800087e:	fb00 f505 	mul.w	r5, r0, r5
 8000882:	42a5      	cmp	r5, r4
 8000884:	d90a      	bls.n	800089c <__udivmoddi4+0x90>
 8000886:	eb1c 0404 	adds.w	r4, ip, r4
 800088a:	f100 32ff 	add.w	r2, r0, #4294967295
 800088e:	f080 8107 	bcs.w	8000aa0 <__udivmoddi4+0x294>
 8000892:	42a5      	cmp	r5, r4
 8000894:	f240 8104 	bls.w	8000aa0 <__udivmoddi4+0x294>
 8000898:	4464      	add	r4, ip
 800089a:	3802      	subs	r0, #2
 800089c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	2100      	movs	r1, #0
 80008a4:	b11e      	cbz	r6, 80008ae <__udivmoddi4+0xa2>
 80008a6:	40dc      	lsrs	r4, r3
 80008a8:	2300      	movs	r3, #0
 80008aa:	e9c6 4300 	strd	r4, r3, [r6]
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0xbc>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	f000 80ed 	beq.w	8000a96 <__udivmoddi4+0x28a>
 80008bc:	2100      	movs	r1, #0
 80008be:	e9c6 0500 	strd	r0, r5, [r6]
 80008c2:	4608      	mov	r0, r1
 80008c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c8:	fab3 f183 	clz	r1, r3
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d149      	bne.n	8000964 <__udivmoddi4+0x158>
 80008d0:	42ab      	cmp	r3, r5
 80008d2:	d302      	bcc.n	80008da <__udivmoddi4+0xce>
 80008d4:	4282      	cmp	r2, r0
 80008d6:	f200 80f8 	bhi.w	8000aca <__udivmoddi4+0x2be>
 80008da:	1a84      	subs	r4, r0, r2
 80008dc:	eb65 0203 	sbc.w	r2, r5, r3
 80008e0:	2001      	movs	r0, #1
 80008e2:	4617      	mov	r7, r2
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d0e2      	beq.n	80008ae <__udivmoddi4+0xa2>
 80008e8:	e9c6 4700 	strd	r4, r7, [r6]
 80008ec:	e7df      	b.n	80008ae <__udivmoddi4+0xa2>
 80008ee:	b902      	cbnz	r2, 80008f2 <__udivmoddi4+0xe6>
 80008f0:	deff      	udf	#255	; 0xff
 80008f2:	fab2 f382 	clz	r3, r2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8090 	bne.w	8000a1c <__udivmoddi4+0x210>
 80008fc:	1a8a      	subs	r2, r1, r2
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2101      	movs	r1, #1
 8000908:	fbb2 f5f7 	udiv	r5, r2, r7
 800090c:	fb07 2015 	mls	r0, r7, r5, r2
 8000910:	0c22      	lsrs	r2, r4, #16
 8000912:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000916:	fb0e f005 	mul.w	r0, lr, r5
 800091a:	4290      	cmp	r0, r2
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x124>
 800091e:	eb1c 0202 	adds.w	r2, ip, r2
 8000922:	f105 38ff 	add.w	r8, r5, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x122>
 8000928:	4290      	cmp	r0, r2
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2b8>
 800092e:	4645      	mov	r5, r8
 8000930:	1a12      	subs	r2, r2, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb2 f0f7 	udiv	r0, r2, r7
 8000938:	fb07 2210 	mls	r2, r7, r0, r2
 800093c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x14e>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x14c>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2c2>
 8000958:	4610      	mov	r0, r2
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000962:	e79f      	b.n	80008a4 <__udivmoddi4+0x98>
 8000964:	f1c1 0720 	rsb	r7, r1, #32
 8000968:	408b      	lsls	r3, r1
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa05 f401 	lsl.w	r4, r5, r1
 8000976:	fa20 f307 	lsr.w	r3, r0, r7
 800097a:	40fd      	lsrs	r5, r7
 800097c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000980:	4323      	orrs	r3, r4
 8000982:	fbb5 f8f9 	udiv	r8, r5, r9
 8000986:	fa1f fe8c 	uxth.w	lr, ip
 800098a:	fb09 5518 	mls	r5, r9, r8, r5
 800098e:	0c1c      	lsrs	r4, r3, #16
 8000990:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000994:	fb08 f50e 	mul.w	r5, r8, lr
 8000998:	42a5      	cmp	r5, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	fa00 f001 	lsl.w	r0, r0, r1
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b0>
 80009a4:	eb1c 0404 	adds.w	r4, ip, r4
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2b4>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4464      	add	r4, ip
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	b29d      	uxth	r5, r3
 80009c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c4:	fb09 4413 	mls	r4, r9, r3, r4
 80009c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1da>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2ac>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2ac>
 80009e2:	3b02      	subs	r3, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009ea:	fba3 9502 	umull	r9, r5, r3, r2
 80009ee:	eba4 040e 	sub.w	r4, r4, lr
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46ae      	mov	lr, r5
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x29c>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x298>
 80009fc:	b156      	cbz	r6, 8000a14 <__udivmoddi4+0x208>
 80009fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000a02:	eb64 040e 	sbc.w	r4, r4, lr
 8000a06:	fa04 f707 	lsl.w	r7, r4, r7
 8000a0a:	40ca      	lsrs	r2, r1
 8000a0c:	40cc      	lsrs	r4, r1
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	e9c6 7400 	strd	r7, r4, [r6]
 8000a14:	4618      	mov	r0, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1c:	f1c3 0120 	rsb	r1, r3, #32
 8000a20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a24:	fa20 f201 	lsr.w	r2, r0, r1
 8000a28:	fa25 f101 	lsr.w	r1, r5, r1
 8000a2c:	409d      	lsls	r5, r3
 8000a2e:	432a      	orrs	r2, r5
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a40:	0c11      	lsrs	r1, r2, #16
 8000a42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a46:	fb00 f50e 	mul.w	r5, r0, lr
 8000a4a:	428d      	cmp	r5, r1
 8000a4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x258>
 8000a52:	eb1c 0101 	adds.w	r1, ip, r1
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b0>
 8000a5c:	428d      	cmp	r5, r1
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b0>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1b49      	subs	r1, r1, r5
 8000a66:	b292      	uxth	r2, r2
 8000a68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	fb05 f10e 	mul.w	r1, r5, lr
 8000a78:	4291      	cmp	r1, r2
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x282>
 8000a7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a86:	4291      	cmp	r1, r2
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2a8>
 8000a8a:	3d02      	subs	r5, #2
 8000a8c:	4462      	add	r2, ip
 8000a8e:	1a52      	subs	r2, r2, r1
 8000a90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0xfc>
 8000a96:	4631      	mov	r1, r6
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e708      	b.n	80008ae <__udivmoddi4+0xa2>
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e6e6      	b.n	800086e <__udivmoddi4+0x62>
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	e6fb      	b.n	800089c <__udivmoddi4+0x90>
 8000aa4:	4548      	cmp	r0, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f0>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f0>
 8000ab4:	4645      	mov	r5, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x282>
 8000ab8:	462b      	mov	r3, r5
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1da>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x258>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b0>
 8000ac4:	3d02      	subs	r5, #2
 8000ac6:	4462      	add	r2, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x124>
 8000aca:	4608      	mov	r0, r1
 8000acc:	e70a      	b.n	80008e4 <__udivmoddi4+0xd8>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x14e>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <bno055_init>:
#include <CoVAPSy_bno055.h>
#include "i2c.h"
// Initialisation du BNO055
void bno055_init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
	* This code uses a lot of HAL. Could probably do with a simpler bare metal
	* implementation. Current performance exceeds that of the sensor, so it is
	* not a priority. But could be a fun exercise in embedded programming :)))
	******************************************************************************
	*/
	HAL_Delay(2000);
 8000ade:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae2:	f001 fd33 	bl	800254c <HAL_Delay>
	donnees_Tx_i2c[0] = 0x39;
 8000ae6:	2339      	movs	r3, #57	; 0x39
 8000ae8:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000aea:	bf00      	nop
 8000aec:	489b      	ldr	r0, [pc, #620]	; (8000d5c <bno055_init+0x284>)
 8000aee:	f003 fec1 	bl	8004874 <HAL_I2C_GetState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	d1f9      	bne.n	8000aec <bno055_init+0x14>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000af8:	1d3a      	adds	r2, r7, #4
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2301      	movs	r3, #1
 8000b02:	2150      	movs	r1, #80	; 0x50
 8000b04:	4895      	ldr	r0, [pc, #596]	; (8000d5c <bno055_init+0x284>)
 8000b06:	f003 fbb7 	bl	8004278 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000b0a:	bf00      	nop
 8000b0c:	4893      	ldr	r0, [pc, #588]	; (8000d5c <bno055_init+0x284>)
 8000b0e:	f003 feb1 	bl	8004874 <HAL_I2C_GetState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	d1f9      	bne.n	8000b0c <bno055_init+0x34>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000b18:	463a      	mov	r2, r7
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2150      	movs	r1, #80	; 0x50
 8000b22:	488e      	ldr	r0, [pc, #568]	; (8000d5c <bno055_init+0x284>)
 8000b24:	f003 fc9c 	bl	8004460 <HAL_I2C_Master_Receive>

	donnees_Tx_i2c[0] = 0x37;
 8000b28:	2337      	movs	r3, #55	; 0x37
 8000b2a:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000b2c:	bf00      	nop
 8000b2e:	488b      	ldr	r0, [pc, #556]	; (8000d5c <bno055_init+0x284>)
 8000b30:	f003 fea0 	bl	8004874 <HAL_I2C_GetState>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b20      	cmp	r3, #32
 8000b38:	d1f9      	bne.n	8000b2e <bno055_init+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000b3a:	1d3a      	adds	r2, r7, #4
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	2150      	movs	r1, #80	; 0x50
 8000b46:	4885      	ldr	r0, [pc, #532]	; (8000d5c <bno055_init+0x284>)
 8000b48:	f003 fb96 	bl	8004278 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000b4c:	bf00      	nop
 8000b4e:	4883      	ldr	r0, [pc, #524]	; (8000d5c <bno055_init+0x284>)
 8000b50:	f003 fe90 	bl	8004874 <HAL_I2C_GetState>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b20      	cmp	r3, #32
 8000b58:	d1f9      	bne.n	8000b4e <bno055_init+0x76>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000b5a:	463a      	mov	r2, r7
 8000b5c:	2314      	movs	r3, #20
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	2150      	movs	r1, #80	; 0x50
 8000b64:	487d      	ldr	r0, [pc, #500]	; (8000d5c <bno055_init+0x284>)
 8000b66:	f003 fc7b 	bl	8004460 <HAL_I2C_Master_Receive>



	donnees_Tx_i2c[0] = 0x3F;
 8000b6a:	233f      	movs	r3, #63	; 0x3f
 8000b6c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000b72:	bf00      	nop
 8000b74:	4879      	ldr	r0, [pc, #484]	; (8000d5c <bno055_init+0x284>)
 8000b76:	f003 fe7d 	bl	8004874 <HAL_I2C_GetState>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d1f9      	bne.n	8000b74 <bno055_init+0x9c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000b80:	1d3a      	adds	r2, r7, #4
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2150      	movs	r1, #80	; 0x50
 8000b8c:	4873      	ldr	r0, [pc, #460]	; (8000d5c <bno055_init+0x284>)
 8000b8e:	f003 fb73 	bl	8004278 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000b92:	bf00      	nop
 8000b94:	4871      	ldr	r0, [pc, #452]	; (8000d5c <bno055_init+0x284>)
 8000b96:	f003 fe6d 	bl	8004874 <HAL_I2C_GetState>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d1f9      	bne.n	8000b94 <bno055_init+0xbc>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000ba0:	463a      	mov	r2, r7
 8000ba2:	2314      	movs	r3, #20
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2150      	movs	r1, #80	; 0x50
 8000baa:	486c      	ldr	r0, [pc, #432]	; (8000d5c <bno055_init+0x284>)
 8000bac:	f003 fc58 	bl	8004460 <HAL_I2C_Master_Receive>

	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f003 fab5 	bl	8004124 <HAL_GPIO_TogglePin>


	HAL_Delay(800); //delai 2000 ms
 8000bba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000bbe:	f001 fcc5 	bl	800254c <HAL_Delay>

	// A envoyer lors du premier test
	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000bca:	bf00      	nop
 8000bcc:	4863      	ldr	r0, [pc, #396]	; (8000d5c <bno055_init+0x284>)
 8000bce:	f003 fe51 	bl	8004874 <HAL_I2C_GetState>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b20      	cmp	r3, #32
 8000bd6:	d1f9      	bne.n	8000bcc <bno055_init+0xf4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	2150      	movs	r1, #80	; 0x50
 8000be4:	485d      	ldr	r0, [pc, #372]	; (8000d5c <bno055_init+0x284>)
 8000be6:	f003 fb47 	bl	8004278 <HAL_I2C_Master_Transmit>


	donnees_Tx_i2c[0] = ACC_CONF;
 8000bea:	2308      	movs	r3, #8
 8000bec:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x08;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000bf2:	bf00      	nop
 8000bf4:	4859      	ldr	r0, [pc, #356]	; (8000d5c <bno055_init+0x284>)
 8000bf6:	f003 fe3d 	bl	8004874 <HAL_I2C_GetState>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b20      	cmp	r3, #32
 8000bfe:	d1f9      	bne.n	8000bf4 <bno055_init+0x11c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c00:	1d3a      	adds	r2, r7, #4
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	2150      	movs	r1, #80	; 0x50
 8000c0c:	4853      	ldr	r0, [pc, #332]	; (8000d5c <bno055_init+0x284>)
 8000c0e:	f003 fb33 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_0;
 8000c12:	230a      	movs	r3, #10
 8000c14:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x23;
 8000c16:	2323      	movs	r3, #35	; 0x23
 8000c18:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000c1a:	bf00      	nop
 8000c1c:	484f      	ldr	r0, [pc, #316]	; (8000d5c <bno055_init+0x284>)
 8000c1e:	f003 fe29 	bl	8004874 <HAL_I2C_GetState>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b20      	cmp	r3, #32
 8000c26:	d1f9      	bne.n	8000c1c <bno055_init+0x144>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c28:	1d3a      	adds	r2, r7, #4
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2302      	movs	r3, #2
 8000c32:	2150      	movs	r1, #80	; 0x50
 8000c34:	4849      	ldr	r0, [pc, #292]	; (8000d5c <bno055_init+0x284>)
 8000c36:	f003 fb1f 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_1;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c42:	bf00      	nop
 8000c44:	4845      	ldr	r0, [pc, #276]	; (8000d5c <bno055_init+0x284>)
 8000c46:	f003 fe15 	bl	8004874 <HAL_I2C_GetState>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	d1f9      	bne.n	8000c44 <bno055_init+0x16c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c50:	1d3a      	adds	r2, r7, #4
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2302      	movs	r3, #2
 8000c5a:	2150      	movs	r1, #80	; 0x50
 8000c5c:	483f      	ldr	r0, [pc, #252]	; (8000d5c <bno055_init+0x284>)
 8000c5e:	f003 fb0b 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MAG_CONF;
 8000c62:	2309      	movs	r3, #9
 8000c64:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x1B;
 8000c66:	231b      	movs	r3, #27
 8000c68:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c6a:	bf00      	nop
 8000c6c:	483b      	ldr	r0, [pc, #236]	; (8000d5c <bno055_init+0x284>)
 8000c6e:	f003 fe01 	bl	8004874 <HAL_I2C_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d1f9      	bne.n	8000c6c <bno055_init+0x194>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2302      	movs	r3, #2
 8000c82:	2150      	movs	r1, #80	; 0x50
 8000c84:	4835      	ldr	r0, [pc, #212]	; (8000d5c <bno055_init+0x284>)
 8000c86:	f003 faf7 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c92:	bf00      	nop
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <bno055_init+0x284>)
 8000c96:	f003 fded 	bl	8004874 <HAL_I2C_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d1f9      	bne.n	8000c94 <bno055_init+0x1bc>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000ca0:	1d3a      	adds	r2, r7, #4
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	482b      	ldr	r0, [pc, #172]	; (8000d5c <bno055_init+0x284>)
 8000cae:	f003 fae3 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = TEMP_SOURCE;
 8000cb2:	2340      	movs	r3, #64	; 0x40
 8000cb4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000cba:	bf00      	nop
 8000cbc:	4827      	ldr	r0, [pc, #156]	; (8000d5c <bno055_init+0x284>)
 8000cbe:	f003 fdd9 	bl	8004874 <HAL_I2C_GetState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b20      	cmp	r3, #32
 8000cc6:	d1f9      	bne.n	8000cbc <bno055_init+0x1e4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	2150      	movs	r1, #80	; 0x50
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <bno055_init+0x284>)
 8000cd6:	f003 facf 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = UNIT_SEL;
 8000cda:	233b      	movs	r3, #59	; 0x3b
 8000cdc:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000ce2:	bf00      	nop
 8000ce4:	481d      	ldr	r0, [pc, #116]	; (8000d5c <bno055_init+0x284>)
 8000ce6:	f003 fdc5 	bl	8004874 <HAL_I2C_GetState>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b20      	cmp	r3, #32
 8000cee:	d1f9      	bne.n	8000ce4 <bno055_init+0x20c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	2150      	movs	r1, #80	; 0x50
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <bno055_init+0x284>)
 8000cfe:	f003 fabb 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PWR_MODE;
 8000d02:	233e      	movs	r3, #62	; 0x3e
 8000d04:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d0a:	bf00      	nop
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <bno055_init+0x284>)
 8000d0e:	f003 fdb1 	bl	8004874 <HAL_I2C_GetState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d1f9      	bne.n	8000d0c <bno055_init+0x234>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2302      	movs	r3, #2
 8000d22:	2150      	movs	r1, #80	; 0x50
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <bno055_init+0x284>)
 8000d26:	f003 faa7 	bl	8004278 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MODE_REG;
 8000d2a:	233d      	movs	r3, #61	; 0x3d
 8000d2c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = FUSION_MODE;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d32:	bf00      	nop
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <bno055_init+0x284>)
 8000d36:	f003 fd9d 	bl	8004874 <HAL_I2C_GetState>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d1f9      	bne.n	8000d34 <bno055_init+0x25c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d40:	1d3a      	adds	r2, r7, #4
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2150      	movs	r1, #80	; 0x50
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <bno055_init+0x284>)
 8000d4e:	f003 fa93 	bl	8004278 <HAL_I2C_Master_Transmit>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000100 	.word	0x20000100

08000d60 <bno055_lecture_16bits>:

int16_t bno055_lecture_16bits(uint8_t num_registre) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[1];
	uint8_t donnees_Rx_i2c[2];
	donnees_Tx_i2c[0] = num_registre;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	733b      	strb	r3, [r7, #12]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000d6e:	bf00      	nop
 8000d70:	4816      	ldr	r0, [pc, #88]	; (8000dcc <bno055_lecture_16bits+0x6c>)
 8000d72:	f003 fd7f 	bl	8004874 <HAL_I2C_GetState>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b20      	cmp	r3, #32
 8000d7a:	d1f9      	bne.n	8000d70 <bno055_lecture_16bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	2150      	movs	r1, #80	; 0x50
 8000d8a:	4810      	ldr	r0, [pc, #64]	; (8000dcc <bno055_lecture_16bits+0x6c>)
 8000d8c:	f003 fa74 	bl	8004278 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000d90:	bf00      	nop
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <bno055_lecture_16bits+0x6c>)
 8000d94:	f003 fd6e 	bl	8004874 <HAL_I2C_GetState>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d1f9      	bne.n	8000d92 <bno055_lecture_16bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	2, 1);
 8000d9e:	f107 0208 	add.w	r2, r7, #8
 8000da2:	2301      	movs	r3, #1
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	2150      	movs	r1, #80	; 0x50
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <bno055_lecture_16bits+0x6c>)
 8000dac:	f003 fb58 	bl	8004460 <HAL_I2C_Master_Receive>
	return ((uint16_t)(donnees_Rx_i2c[1]<<8) + donnees_Rx_i2c[0]);
 8000db0:	7a7b      	ldrb	r3, [r7, #9]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	7a3b      	ldrb	r3, [r7, #8]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b21b      	sxth	r3, r3
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000100 	.word	0x20000100

08000dd0 <buzzer_start_frequency_Hz>:


#include "CoVAPSy_buzzer.h"

//Periode max 65 535 µs => Frequence entre 15 et 1 MHz
void buzzer_start_frequency_Hz(float frequency_Hz){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t periode_buzzer;
	periode_buzzer = FREQ_TIMER_6/frequency_Hz;
 8000dda:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000e34 <buzzer_start_frequency_Hz+0x64>
 8000dde:	ed97 7a01 	vldr	s14, [r7, #4]
 8000de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000df2:	f005 fec3 	bl	8006b7c <HAL_TIM_Base_Stop_IT>
	htim6.Instance = TIM6;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <buzzer_start_frequency_Hz+0x6c>)
 8000dfa:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000dfe:	221f      	movs	r2, #31
 8000e00:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = periode_buzzer;
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000e16:	f005 fdb9 	bl	800698c <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <buzzer_start_frequency_Hz+0x54>
	{
	    Error_Handler();
 8000e20:	f000 fea4 	bl	8001b6c <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <buzzer_start_frequency_Hz+0x68>)
 8000e26:	f005 fe55 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	49742400 	.word	0x49742400
 8000e38:	200003a8 	.word	0x200003a8
 8000e3c:	40001000 	.word	0x40001000

08000e40 <buzzer_start>:

void buzzer_start(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <buzzer_start+0x10>)
 8000e46:	f005 fe45 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200003a8 	.word	0x200003a8

08000e54 <buzzer_stop>:

void buzzer_stop(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <buzzer_stop+0x10>)
 8000e5a:	f005 fe8f 	bl	8006b7c <HAL_TIM_Base_Stop_IT>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200003a8 	.word	0x200003a8

08000e68 <buzzer_gamme>:

void buzzer_gamme(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	buzzer_start_frequency_Hz(NOTE_FA3);
 8000e6c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000e78 <buzzer_gamme+0x10>
 8000e70:	f7ff ffae 	bl	8000dd0 <buzzer_start_frequency_Hz>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	43ae9d71 	.word	0x43ae9d71

08000e7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000e94:	4a37      	ldr	r2, [pc, #220]	; (8000f74 <MX_ADC1_Init+0xf8>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ee6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000ef6:	f001 fd15 	bl	8002924 <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000f00:	f000 fe34 	bl	8001b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0xfc>)
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f10:	237f      	movs	r3, #127	; 0x7f
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f14:	2304      	movs	r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000f22:	f001 ff79 	bl	8002e18 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000f2c:	f000 fe1e 	bl	8001b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_ADC1_Init+0x100>)
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f34:	230c      	movs	r3, #12
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000f3e:	f001 ff6b 	bl	8002e18 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000f48:	f000 fe10 	bl	8001b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_ADC1_Init+0x104>)
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f50:	2312      	movs	r3, #18
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_ADC1_Init+0xf4>)
 8000f5a:	f001 ff5d 	bl	8002e18 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f64:	f000 fe02 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000054 	.word	0x20000054
 8000f74:	50040000 	.word	0x50040000
 8000f78:	19200040 	.word	0x19200040
 8000f7c:	21800100 	.word	0x21800100
 8000f80:	25b00200 	.word	0x25b00200

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09e      	sub	sp, #120	; 0x78
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2254      	movs	r2, #84	; 0x54
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f008 ff94 	bl	8009ed2 <memset>
  if(adcHandle->Instance==ADC1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <HAL_ADC_MspInit+0x118>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d16e      	bne.n	8001092 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fbe:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fe64 	bl	8005cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000fee:	f000 fdbd 	bl	8001b6c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 8000ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_ADC_MspInit+0x11c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001022:	231a      	movs	r3, #26
 8001024:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001026:	230b      	movs	r3, #11
 8001028:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fef2 	bl	8003e20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_ADC_MspInit+0x124>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800106c:	2220      	movs	r2, #32
 800106e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 8001078:	f002 fcda 	bl	8003a30 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001082:	f000 fd73 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800108a:	64da      	str	r2, [r3, #76]	; 0x4c
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_ADC_MspInit+0x120>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3778      	adds	r7, #120	; 0x78
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	50040000 	.word	0x50040000
 80010a0:	40021000 	.word	0x40021000
 80010a4:	200000b8 	.word	0x200000b8
 80010a8:	40020008 	.word	0x40020008

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_DMA_Init+0x70>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <MX_DMA_Init+0x70>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6493      	str	r3, [r2, #72]	; 0x48
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_DMA_Init+0x70>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_DMA_Init+0x70>)
 80010cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_DMA_Init+0x70>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6493      	str	r3, [r2, #72]	; 0x48
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_DMA_Init+0x70>)
 80010d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	200b      	movs	r0, #11
 80010e8:	f002 fc6b 	bl	80039c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010ec:	200b      	movs	r0, #11
 80010ee:	f002 fc84 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2038      	movs	r0, #56	; 0x38
 80010f8:	f002 fc63 	bl	80039c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80010fc:	2038      	movs	r0, #56	; 0x38
 80010fe:	f002 fc7c 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2039      	movs	r0, #57	; 0x39
 8001108:	f002 fc5b 	bl	80039c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800110c:	2039      	movs	r0, #57	; 0x39
 800110e:	f002 fc74 	bl	80039fa <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <MX_GPIO_Init+0x110>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <MX_GPIO_Init+0x110>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <MX_GPIO_Init+0x110>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <MX_GPIO_Init+0x110>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a37      	ldr	r2, [pc, #220]	; (8001230 <MX_GPIO_Init+0x110>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <MX_GPIO_Init+0x110>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <MX_GPIO_Init+0x110>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <MX_GPIO_Init+0x110>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <MX_GPIO_Init+0x110>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2184      	movs	r1, #132	; 0x84
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f002 ffb5 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2102      	movs	r1, #2
 800118e:	4829      	ldr	r0, [pc, #164]	; (8001234 <MX_GPIO_Init+0x114>)
 8001190:	f002 ffb0 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8001194:	2384      	movs	r3, #132	; 0x84
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f002 fe37 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_GPIO_Init+0x114>)
 80011c6:	f002 fe2b 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4814      	ldr	r0, [pc, #80]	; (8001234 <MX_GPIO_Init+0x114>)
 80011e2:	f002 fe1d 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP1_Pin;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP1_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f002 fe0f 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001214:	2303      	movs	r3, #3
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f002 fdfd 	bl	8003e20 <HAL_GPIO_Init>

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C1_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_I2C1_Init+0x74>)
 8001274:	f002 ff70 	bl	8004158 <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 fc75 	bl	8001b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C1_Init+0x74>)
 8001286:	f003 fdcf 	bl	8004e28 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fc6c 	bl	8001b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2C1_Init+0x74>)
 8001298:	f003 fe11 	bl	8004ebe <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 fc63 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000100 	.word	0x20000100
 80012b0:	40005400 	.word	0x40005400
 80012b4:	00707cbb 	.word	0x00707cbb

080012b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09e      	sub	sp, #120	; 0x78
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2254      	movs	r2, #84	; 0x54
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fdfa 	bl	8009ed2 <memset>
  if(i2cHandle->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_I2C_MspInit+0xa4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d135      	bne.n	8001354 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fcdb 	bl	8005cb0 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001300:	f000 fc34 	bl	8001b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131c:	23c0      	movs	r3, #192	; 0xc0
 800131e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001320:	2312      	movs	r3, #18
 8001322:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132c:	2304      	movs	r3, #4
 800132e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_I2C_MspInit+0xac>)
 8001338:	f002 fd72 	bl	8003e20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	6593      	str	r3, [r2, #88]	; 0x58
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_I2C_MspInit+0xa8>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3778      	adds	r7, #120	; 0x78
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <CRC_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void CRC_Init(void) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0

	//Enable CRC clock, then reset CRC buffer.
    __HAL_RCC_CRC_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <CRC_Init+0x38>)
 8001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <CRC_Init+0x38>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001378:	6493      	str	r3, [r2, #72]	; 0x48
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <CRC_Init+0x38>)
 800137c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
    CRC->CR |= CRC_CR_RESET;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <CRC_Init+0x3c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <CRC_Init+0x3c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6093      	str	r3, [r2, #8]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40023000 	.word	0x40023000

080013a8 <SRF10_Init>:


void SRF10_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
	//Set correct ranges.
	uint8_t donnees_Tx_i2c[2];
	donnees_Tx_i2c[0]=0x02;
 80013ae:	2302      	movs	r3, #2
 80013b0:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0xB;
 80013b2:	230b      	movs	r3, #11
 80013b4:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80013b6:	bf00      	nop
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <SRF10_Init+0x60>)
 80013ba:	f003 fa5b 	bl	8004874 <HAL_I2C_GetState>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	d1f9      	bne.n	80013b8 <SRF10_Init+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 80013c4:	1d3a      	adds	r2, r7, #4
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	21e0      	movs	r1, #224	; 0xe0
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <SRF10_Init+0x60>)
 80013d2:	f002 ff51 	bl	8004278 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

	donnees_Tx_i2c[0]=0x01;
 80013d6:	2301      	movs	r3, #1
 80013d8:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0x09;
 80013da:	2309      	movs	r3, #9
 80013dc:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80013de:	bf00      	nop
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <SRF10_Init+0x60>)
 80013e2:	f003 fa47 	bl	8004874 <HAL_I2C_GetState>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	d1f9      	bne.n	80013e0 <SRF10_Init+0x38>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 80013ec:	1d3a      	adds	r2, r7, #4
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2302      	movs	r3, #2
 80013f6:	21e0      	movs	r1, #224	; 0xe0
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <SRF10_Init+0x60>)
 80013fa:	f002 ff3d 	bl	8004278 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000100 	.word	0x20000100

0800140c <u8g_Delay>:




uint8_t control =0;
void u8g_Delay(uint16_t val) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(val);
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f897 	bl	800254c <HAL_Delay>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
    static uint32_t i, j;
    static uint32_t freq;
    freq = HAL_RCC_GetSysClockFreq() / 1000000;
 8001432:	f004 fb19 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8001436:	4603      	mov	r3, r0
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <u8g_xMicroDelay+0x6c>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	4a15      	ldr	r2, [pc, #84]	; (8001498 <u8g_xMicroDelay+0x70>)
 8001442:	6013      	str	r3, [r2, #0]

    for (i = 0; i < val;) {
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <u8g_xMicroDelay+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e018      	b.n	800147e <u8g_xMicroDelay+0x56>
        for (j = 0; j < freq; ++j) {
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <u8g_xMicroDelay+0x78>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e009      	b.n	8001468 <u8g_xMicroDelay+0x40>
            ++j;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <u8g_xMicroDelay+0x78>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <u8g_xMicroDelay+0x78>)
 800145c:	6013      	str	r3, [r2, #0]
        for (j = 0; j < freq; ++j) {
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <u8g_xMicroDelay+0x78>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <u8g_xMicroDelay+0x78>)
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <u8g_xMicroDelay+0x78>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <u8g_xMicroDelay+0x70>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3ef      	bcc.n	8001454 <u8g_xMicroDelay+0x2c>
        }
        ++i;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <u8g_xMicroDelay+0x74>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <u8g_xMicroDelay+0x74>)
 800147c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < val;) {
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <u8g_xMicroDelay+0x74>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8e1      	bhi.n	800144c <u8g_xMicroDelay+0x24>
    }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	431bde83 	.word	0x431bde83
 8001498:	200001bc 	.word	0x200001bc
 800149c:	200001c0 	.word	0x200001c0
 80014a0:	200001c4 	.word	0x200001c4

080014a4 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff ffbd 	bl	8001428 <u8g_xMicroDelay>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(10);
 80014b6:	200a      	movs	r0, #10
 80014b8:	f7ff ffb6 	bl	8001428 <u8g_xMicroDelay>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <u8g_com_arm_stm32_sh_i2c_fn>:

uint8_t u8g_com_arm_stm32_sh_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	72fb      	strb	r3, [r7, #11]
 80014ce:	4613      	mov	r3, r2
 80014d0:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d845      	bhi.n	8001564 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>
 80014d8:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <u8g_com_arm_stm32_sh_i2c_fn+0x20>)
 80014da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014de:	bf00      	nop
 80014e0:	08001565 	.word	0x08001565
 80014e4:	08001501 	.word	0x08001501
 80014e8:	08001507 	.word	0x08001507
 80014ec:	08001565 	.word	0x08001565
 80014f0:	08001565 	.word	0x08001565
 80014f4:	08001521 	.word	0x08001521
 80014f8:	08001543 	.word	0x08001543
 80014fc:	08001543 	.word	0x08001543
    case U8G_COM_MSG_STOP:
        break;

    case U8G_COM_MSG_INIT:
        u8g_MicroDelay();
 8001500:	f7ff ffd0 	bl	80014a4 <u8g_MicroDelay>
        break;
 8001504:	e02e      	b.n	8001564 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_ADDRESS:
        if (arg_val == 0) {
 8001506:	7abb      	ldrb	r3, [r7, #10]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <u8g_com_arm_stm32_sh_i2c_fn+0x54>
            control = 0;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e002      	b.n	800151a <u8g_com_arm_stm32_sh_i2c_fn+0x5a>
        } else {
            control = 0x40;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	701a      	strb	r2, [r3, #0]
        }
        u8g_10MicroDelay();
 800151a:	f7ff ffca 	bl	80014b2 <u8g_10MicroDelay>
        break;
 800151e:	e021      	b.n	8001564 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_BYTE: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, &arg_val, 1, 10000);
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	f242 7310 	movw	r3, #10000	; 0x2710
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	f107 030a 	add.w	r3, r7, #10
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	2178      	movs	r1, #120	; 0x78
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 800153c:	f003 f886 	bl	800464c <HAL_I2C_Mem_Write>
    }
        break;
 8001540:	e010      	b.n	8001564 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, arg_ptr, arg_val, 10000);
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
 8001548:	7abb      	ldrb	r3, [r7, #10]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001550:	9102      	str	r1, [sp, #8]
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	2178      	movs	r1, #120	; 0x78
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 800155e:	f003 f875 	bl	800464c <HAL_I2C_Mem_Write>
    }

        break;
 8001562:	bf00      	nop
    }
    return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001b8 	.word	0x200001b8
 8001574:	20000100 	.word	0x20000100

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f000 ff70 	bl	8002462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f9db 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f7ff fdcb 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 800158a:	f7ff fd8f 	bl	80010ac <MX_DMA_Init>
  MX_ADC1_Init();
 800158e:	f7ff fc75 	bl	8000e7c <MX_ADC1_Init>
  MX_SPI3_Init();
 8001592:	f000 faf1 	bl	8001b78 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001596:	f000 fc59 	bl	8001e4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800159a:	f000 feb1 	bl	8002300 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800159e:	f000 fd0f 	bl	8001fc0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80015a2:	f7ff fe49 	bl	8001238 <MX_I2C1_Init>
  MX_TIM6_Init();
 80015a6:	f000 fd7b 	bl	80020a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015aa:	f000 fdaf 	bl	800210c <MX_TIM7_Init>
//  MX_CRC_Init();


  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80015ae:	48ae      	ldr	r0, [pc, #696]	; (8001868 <main+0x2f0>)
 80015b0:	f005 fa90 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015b4:	2100      	movs	r1, #0
 80015b6:	48ac      	ldr	r0, [pc, #688]	; (8001868 <main+0x2f0>)
 80015b8:	f005 fbd2 	bl	8006d60 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 80015bc:	48ab      	ldr	r0, [pc, #684]	; (800186c <main+0x2f4>)
 80015be:	f005 fa3d 	bl	8006a3c <HAL_TIM_Base_Start>



  buzzer_start();
 80015c2:	f7ff fc3d 	bl	8000e40 <buzzer_start>
  buzzer_gamme();
 80015c6:	f7ff fc4f 	bl	8000e68 <buzzer_gamme>

  CRC_Init();
 80015ca:	f7ff fecd 	bl	8001368 <CRC_Init>




  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f002 fda6 	bl	8004124 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80015d8:	2104      	movs	r1, #4
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f002 fda1 	bl	8004124 <HAL_GPIO_TogglePin>
  HAL_Delay(10);
 80015e2:	200a      	movs	r0, #10
 80015e4:	f000 ffb2 	bl	800254c <HAL_Delay>
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f002 fd99 	bl	8004124 <HAL_GPIO_TogglePin>


  bno055_init();
 80015f2:	f7ff fa71 	bl	8000ad8 <bno055_init>
  SRF10_Init();
 80015f6:	f7ff fed7 	bl	80013a8 <SRF10_Init>

  u8g_InitComFn(&u8g, &u8g_dev_sh1106_128x64_i2c, u8g_com_arm_stm32_sh_i2c_fn);
 80015fa:	4a9d      	ldr	r2, [pc, #628]	; (8001870 <main+0x2f8>)
 80015fc:	499d      	ldr	r1, [pc, #628]	; (8001874 <main+0x2fc>)
 80015fe:	489e      	ldr	r0, [pc, #632]	; (8001878 <main+0x300>)
 8001600:	f008 f969 	bl	80098d6 <u8g_InitComFn>
  u8g_Begin(&u8g);
 8001604:	489c      	ldr	r0, [pc, #624]	; (8001878 <main+0x300>)
 8001606:	f008 f94f 	bl	80098a8 <u8g_Begin>

  u8g_FirstPage(&u8g);
 800160a:	489b      	ldr	r0, [pc, #620]	; (8001878 <main+0x300>)
 800160c:	f008 f97b 	bl	8009906 <u8g_FirstPage>
  		  do {
  			  u8g_SetFont(&u8g, u8g_font_profont29);
 8001610:	499a      	ldr	r1, [pc, #616]	; (800187c <main+0x304>)
 8001612:	4899      	ldr	r0, [pc, #612]	; (8001878 <main+0x300>)
 8001614:	f007 fff4 	bl	8009600 <u8g_SetFont>
  			  u8g_DrawStr(&u8g, 0, 29, "PIZZAPASTA");
 8001618:	4b99      	ldr	r3, [pc, #612]	; (8001880 <main+0x308>)
 800161a:	221d      	movs	r2, #29
 800161c:	2100      	movs	r1, #0
 800161e:	4896      	ldr	r0, [pc, #600]	; (8001878 <main+0x300>)
 8001620:	f007 ff28 	bl	8009474 <u8g_DrawStr>
  			  u8g_DrawStr(&u8g, 0, 59, "PUTINABOX");
 8001624:	4b97      	ldr	r3, [pc, #604]	; (8001884 <main+0x30c>)
 8001626:	223b      	movs	r2, #59	; 0x3b
 8001628:	2100      	movs	r1, #0
 800162a:	4893      	ldr	r0, [pc, #588]	; (8001878 <main+0x300>)
 800162c:	f007 ff22 	bl	8009474 <u8g_DrawStr>
          // u8g_DrawStr(&u8g, 0, 59, "BOLIDE 2"); 
  } while (u8g_NextPage(&u8g));
 8001630:	4891      	ldr	r0, [pc, #580]	; (8001878 <main+0x300>)
 8001632:	f008 f976 	bl	8009922 <u8g_NextPage>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e9      	bne.n	8001610 <main+0x98>

  uint16_t number = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	81fb      	strh	r3, [r7, #14]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  buzzer_stop();
 8001640:	f7ff fc08 	bl	8000e54 <buzzer_stop>
  while (1)
  {
	  //démarrage de la conversion ADC des 3 canaux
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 8001644:	2203      	movs	r2, #3
 8001646:	4990      	ldr	r1, [pc, #576]	; (8001888 <main+0x310>)
 8001648:	4890      	ldr	r0, [pc, #576]	; (800188c <main+0x314>)
 800164a:	f001 fb43 	bl	8002cd4 <HAL_ADC_Start_DMA>

	  //lecture ultrason
	  elapsed_time_us_ms = HAL_GetTick() - mesure_US_ticks;
 800164e:	f000 ff71 	bl	8002534 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <main+0x318>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a8e      	ldr	r2, [pc, #568]	; (8001894 <main+0x31c>)
 800165c:	6013      	str	r3, [r2, #0]
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 800165e:	4b8d      	ldr	r3, [pc, #564]	; (8001894 <main+0x31c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d95a      	bls.n	800171c <main+0x1a4>
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f002 fd5a 	bl	8004124 <HAL_GPIO_TogglePin>
		  donnees_Tx_i2c[0]=0x02;
 8001670:	2302      	movs	r3, #2
 8001672:	713b      	strb	r3, [r7, #4]
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001674:	bf00      	nop
 8001676:	4888      	ldr	r0, [pc, #544]	; (8001898 <main+0x320>)
 8001678:	f003 f8fc 	bl	8004874 <HAL_I2C_GetState>
 800167c:	4603      	mov	r3, r0
 800167e:	2b20      	cmp	r3, #32
 8001680:	d1f9      	bne.n	8001676 <main+0xfe>
		  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 1, 1000); // HAL should really be replaced by direct register access.
 8001682:	1d3a      	adds	r2, r7, #4
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	21e0      	movs	r1, #224	; 0xe0
 800168e:	4882      	ldr	r0, [pc, #520]	; (8001898 <main+0x320>)
 8001690:	f002 fdf2 	bl	8004278 <HAL_I2C_Master_Transmit>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001694:	bf00      	nop
 8001696:	4880      	ldr	r0, [pc, #512]	; (8001898 <main+0x320>)
 8001698:	f003 f8ec 	bl	8004874 <HAL_I2C_GetState>
 800169c:	4603      	mov	r3, r0
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d1f9      	bne.n	8001696 <main+0x11e>
		  HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 2, 1);
 80016a2:	463a      	mov	r2, r7
 80016a4:	2301      	movs	r3, #1
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2302      	movs	r3, #2
 80016aa:	21e0      	movs	r1, #224	; 0xe0
 80016ac:	487a      	ldr	r0, [pc, #488]	; (8001898 <main+0x320>)
 80016ae:	f002 fed7 	bl	8004460 <HAL_I2C_Master_Receive>
		  if (donnees_Rx_i2c[0] != 0x06) {
 80016b2:	783b      	ldrb	r3, [r7, #0]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d031      	beq.n	800171c <main+0x1a4>
			  US_value = (uint16_t)(donnees_Rx_i2c[0]<<8) + donnees_Rx_i2c[1];
 80016b8:	783b      	ldrb	r3, [r7, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b29a      	uxth	r2, r3
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b74      	ldr	r3, [pc, #464]	; (800189c <main+0x324>)
 80016ca:	801a      	strh	r2, [r3, #0]
			  distance_US_cm = US_value * US_SMOOTHING + (1 - US_SMOOTHING) * distance_US_cm;
 80016cc:	4b73      	ldr	r3, [pc, #460]	; (800189c <main+0x324>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fff9 	bl	80006c8 <__aeabi_i2d>
 80016d6:	a360      	add	r3, pc, #384	; (adr r3, 8001858 <main+0x2e0>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fd78 	bl	80001d0 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	461d      	mov	r5, r3
 80016e8:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <main+0x328>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ffeb 	bl	80006c8 <__aeabi_i2d>
 80016f2:	a35b      	add	r3, pc, #364	; (adr r3, 8001860 <main+0x2e8>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe fd6a 	bl	80001d0 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fe94 	bl	8000430 <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f844 	bl	800079c <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <main+0x328>)
 800171a:	801a      	strh	r2, [r3, #0]

		  }
	  }

	  yaw = bno055_lecture_16bits(EULER_HEADING_16bits);
 800171c:	201a      	movs	r0, #26
 800171e:	f7ff fb1f 	bl	8000d60 <bno055_lecture_16bits>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <main+0x32c>)
 8001728:	801a      	strh	r2, [r3, #0]
	  //Default value of 26 ms is enough to detect lowest powered reverse speed.
	  //BTW, the speed is not signed, so you need to take into account the fact that the car can move backwards.



	  elapsed_time_speed_ms = HAL_GetTick() - mesure_vitesse_ms;
 800172a:	f000 ff03 	bl	8002534 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <main+0x330>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <main+0x334>)
 8001738:	6013      	str	r3, [r2, #0]
	  if(elapsed_time_speed_ms > SPEED_DELTAT_THRESHOLD_MS)
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <main+0x334>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b1a      	cmp	r3, #26
 8001740:	d902      	bls.n	8001748 <main+0x1d0>
	  {
		  vitesse_mesuree_mm_s = 0;
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <main+0x338>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]




	  //Demande de lecture ultrason
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <main+0x31c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d918      	bls.n	8001782 <main+0x20a>
		  	  donnees_Tx_i2c[0]=0x00;
 8001750:	2300      	movs	r3, #0
 8001752:	713b      	strb	r3, [r7, #4]
		  	  donnees_Tx_i2c[1]=0x51;
 8001754:	2351      	movs	r3, #81	; 0x51
 8001756:	717b      	strb	r3, [r7, #5]
		  	  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001758:	bf00      	nop
 800175a:	484f      	ldr	r0, [pc, #316]	; (8001898 <main+0x320>)
 800175c:	f003 f88a 	bl	8004874 <HAL_I2C_GetState>
 8001760:	4603      	mov	r3, r0
 8001762:	2b20      	cmp	r3, #32
 8001764:	d1f9      	bne.n	800175a <main+0x1e2>
		  	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000);
 8001766:	1d3a      	adds	r2, r7, #4
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2302      	movs	r3, #2
 8001770:	21e0      	movs	r1, #224	; 0xe0
 8001772:	4849      	ldr	r0, [pc, #292]	; (8001898 <main+0x320>)
 8001774:	f002 fd80 	bl	8004278 <HAL_I2C_Master_Transmit>
		  	  mesure_US_ticks = HAL_GetTick();
 8001778:	f000 fedc 	bl	8002534 <HAL_GetTick>
 800177c:	4603      	mov	r3, r0
 800177e:	4a44      	ldr	r2, [pc, #272]	; (8001890 <main+0x318>)
 8001780:	6013      	str	r3, [r2, #0]
	  }


	  //attente de la fin de la conversion ADC, si jamais ce n'est pas encore fini
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8001782:	2101      	movs	r1, #1
 8001784:	4841      	ldr	r0, [pc, #260]	; (800188c <main+0x314>)
 8001786:	f001 fa15 	bl	8002bb4 <HAL_ADC_PollForConversion>

	  number++;
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	3301      	adds	r3, #1
 800178e:	81fb      	strh	r3, [r7, #14]


	  //Reset CRC;
	  CRC->CR = 1;
 8001790:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <main+0x33c>)
 8001792:	2201      	movs	r2, #1
 8001794:	609a      	str	r2, [r3, #8]


	  SPI_TxBuffer[0] = (uint8_t)((lectures_ADC[2] >> 8) & 0xFF);
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <main+0x310>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <main+0x340>)
 80017a0:	701a      	strb	r2, [r3, #0]
	  SPI_TxBuffer[1] = (uint8_t)(lectures_ADC[2] & 0xFF); //battery_voltage (unit ?)
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <main+0x310>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <main+0x340>)
 80017aa:	705a      	strb	r2, [r3, #1]
	  SPI_TxBuffer[2] = (uint8_t)((yaw >> 8) & 0xFF);
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <main+0x32c>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <main+0x340>)
 80017b8:	709a      	strb	r2, [r3, #2]
	  SPI_TxBuffer[3] = (uint8_t)(yaw & 0xFF);
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <main+0x32c>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <main+0x340>)
 80017c2:	70da      	strb	r2, [r3, #3]

	  CRC->DR = (uint32_t)((((uint16_t) lectures_ADC[2] << 16)) | ((uint16_t) yaw));
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <main+0x310>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	4a35      	ldr	r2, [pc, #212]	; (80018a4 <main+0x32c>)
 80017ce:	8812      	ldrh	r2, [r2, #0]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <main+0x33c>)
 80017d4:	601a      	str	r2, [r3, #0]


	  SPI_TxBuffer[4] = (uint8_t)((((uint16_t)(lectures_ADC[0])) >> 8) & 0xFF);
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <main+0x310>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <main+0x340>)
 80017e4:	711a      	strb	r2, [r3, #4]
	  SPI_TxBuffer[5] = (uint8_t)(((uint16_t)(lectures_ADC[0])) & 0xFF);    // Octet de poids faible de l'IR gauche
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <main+0x310>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <main+0x340>)
 80017ee:	715a      	strb	r2, [r3, #5]
	  SPI_TxBuffer[6] = (uint8_t)((((uint16_t)(lectures_ADC[1])) >> 8) & 0xFF);
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <main+0x310>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <main+0x340>)
 80017fe:	719a      	strb	r2, [r3, #6]
	  SPI_TxBuffer[7] = (uint8_t)(((uint16_t)(lectures_ADC[1])) & 0xFF);    // Octet de poids faible de l'IR droit
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <main+0x310>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <main+0x340>)
 8001808:	71da      	strb	r2, [r3, #7]

	  CRC->DR = (uint32_t)(((uint16_t) lectures_ADC[0] << 16) | ((uint16_t) lectures_ADC[1])); //Put 4 next bytes in the CRC register
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <main+0x310>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <main+0x310>)
 8001814:	6852      	ldr	r2, [r2, #4]
 8001816:	b292      	uxth	r2, r2
 8001818:	431a      	orrs	r2, r3
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <main+0x33c>)
 800181c:	601a      	str	r2, [r3, #0]


	  SPI_TxBuffer[8] = (uint8_t)((vitesse_mesuree_mm_s >> 8) & 0xFF); // Octet de poids fort de vitesse_mesuree_mm_s
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <main+0x338>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <main+0x340>)
 8001828:	721a      	strb	r2, [r3, #8]
	  SPI_TxBuffer[9] = (uint8_t)(vitesse_mesuree_mm_s & 0xFF);    // Octet de poids faible de vitesse_mesuree_mm_s
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <main+0x338>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <main+0x340>)
 8001832:	725a      	strb	r2, [r3, #9]
	  SPI_TxBuffer[10] = (uint8_t)((distance_US_cm >> 8) & 0xFF);
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <main+0x328>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b29b      	uxth	r3, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <main+0x340>)
 8001840:	729a      	strb	r2, [r3, #10]
	  SPI_TxBuffer[11] = (uint8_t)((distance_US_cm &0xFF));
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <main+0x328>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <main+0x340>)
 800184a:	72da      	strb	r2, [r3, #11]

	  CRC->DR = (uint32_t)(((uint16_t) vitesse_mesuree_mm_s << 16) | ((uint16_t) distance_US_cm));
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <main+0x338>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	e032      	b.n	80018bc <main+0x344>
 8001856:	bf00      	nop
 8001858:	9999999a 	.word	0x9999999a
 800185c:	3fb99999 	.word	0x3fb99999
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	3feccccc 	.word	0x3feccccc
 8001868:	2000035c 	.word	0x2000035c
 800186c:	200003f4 	.word	0x200003f4
 8001870:	080014c1 	.word	0x080014c1
 8001874:	2000002c 	.word	0x2000002c
 8001878:	2000017c 	.word	0x2000017c
 800187c:	08009fec 	.word	0x08009fec
 8001880:	08009f44 	.word	0x08009f44
 8001884:	08009f50 	.word	0x08009f50
 8001888:	20000158 	.word	0x20000158
 800188c:	20000054 	.word	0x20000054
 8001890:	20000170 	.word	0x20000170
 8001894:	20000178 	.word	0x20000178
 8001898:	20000100 	.word	0x20000100
 800189c:	20000168 	.word	0x20000168
 80018a0:	20000166 	.word	0x20000166
 80018a4:	20000164 	.word	0x20000164
 80018a8:	2000016c 	.word	0x2000016c
 80018ac:	20000174 	.word	0x20000174
 80018b0:	20000154 	.word	0x20000154
 80018b4:	40023000 	.word	0x40023000
 80018b8:	20000000 	.word	0x20000000
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <main+0x3b0>)
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <main+0x3b4>)
 80018c4:	601a      	str	r2, [r3, #0]


	  uint32_t checksum = CRC->DR; //Read from register to get computer value
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <main+0x3b4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60bb      	str	r3, [r7, #8]

	  //Send the checksum over SPI.
	  SPI_TxBuffer[15] = (uint8_t)(checksum & 0xFF);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <main+0x3b8>)
 80018d2:	73da      	strb	r2, [r3, #15]
	  SPI_TxBuffer[14] = (uint8_t)((checksum >> 8) & 0xFF);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <main+0x3b8>)
 80018dc:	739a      	strb	r2, [r3, #14]
	  SPI_TxBuffer[13] = (uint8_t)((checksum >> 16) & 0xFF);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <main+0x3b8>)
 80018e6:	735a      	strb	r2, [r3, #13]
	  SPI_TxBuffer[12] = (uint8_t)((checksum >> 24) & 0xFF);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	0e1b      	lsrs	r3, r3, #24
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <main+0x3b8>)
 80018f0:	731a      	strb	r2, [r3, #12]




	  HAL_SPI_Transmit(&hspi3, (uint8_t *)SPI_TxBuffer, 16,10);
 80018f2:	230a      	movs	r3, #10
 80018f4:	2210      	movs	r2, #16
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <main+0x3b8>)
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <main+0x3bc>)
 80018fa:	f004 fd74 	bl	80063e6 <HAL_SPI_Transmit>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018fe:	2104      	movs	r1, #4
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f002 fc0e 	bl	8004124 <HAL_GPIO_TogglePin>
	  * DO NOT DELETE THIS IF YOU DON'T HAVE AN ACTUAL SOLUTION, REALLY,
	  * YOU'RE GOING TO PULL YOUR HAIR OUT TRYING TO FIX THE MESS IT WILL
	  * INEVITABLY CREATE. PROCEED AT YOUR OWN RISK
	  ******************************************************************************
	  */
	  __HAL_RCC_SPI3_FORCE_RESET();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <main+0x3c0>)
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <main+0x3c0>)
 800190e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001912:	6393      	str	r3, [r2, #56]	; 0x38
	  __HAL_RCC_SPI3_RELEASE_RESET();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <main+0x3c0>)
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <main+0x3c0>)
 800191a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800191e:	6393      	str	r3, [r2, #56]	; 0x38
	  MX_SPI3_Init();
 8001920:	f000 f92a 	bl	8001b78 <MX_SPI3_Init>
  {
 8001924:	e68e      	b.n	8001644 <main+0xcc>
 8001926:	bf00      	nop
 8001928:	20000166 	.word	0x20000166
 800192c:	40023000 	.word	0x40023000
 8001930:	20000000 	.word	0x20000000
 8001934:	2000021c 	.word	0x2000021c
 8001938:	40021000 	.word	0x40021000

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b096      	sub	sp, #88	; 0x58
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2244      	movs	r2, #68	; 0x44
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f008 fac1 	bl	8009ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800195e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001962:	f003 fb17 	bl	8004f94 <HAL_PWREx_ControlVoltageScaling>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800196c:	f000 f8fe 	bl	8001b6c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001970:	f003 faf2 	bl	8004f58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <SystemClock_Config+0xc0>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <SystemClock_Config+0xc0>)
 800197c:	f023 0318 	bic.w	r3, r3, #24
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001984:	2314      	movs	r3, #20
 8001986:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001998:	2302      	movs	r3, #2
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800199c:	2301      	movs	r3, #1
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019a4:	2310      	movs	r3, #16
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019a8:	2307      	movs	r3, #7
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fb41 	bl	8005040 <HAL_RCC_OscConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80019c4:	f000 f8d2 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c8:	230f      	movs	r3, #15
 80019ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019cc:	2303      	movs	r3, #3
 80019ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 ff41 	bl	8005868 <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80019ec:	f000 f8be 	bl	8001b6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80019f0:	f004 fb54 	bl	800609c <HAL_RCCEx_EnableMSIPLLMode>
}
 80019f4:	bf00      	nop
 80019f6:	3758      	adds	r7, #88	; 0x58
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	static uint32_t mesure_precedente_us=0, mesure_us, indice=0, i;
	static uint32_t tableau_intervalles_us[16]={};
	static float coefficient_distance_par_intervalle_um = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0;
	static uint32_t somme_intervalles_us = 0;
	uint32_t nb_intervalles=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
	//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	mesure_us = TIM2->CCR1; // ou TIM2->CCR1
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a14:	6013      	str	r3, [r2, #0]
	mesure_vitesse_ms = HAL_GetTick();
 8001a16:	f000 fd8d 	bl	8002534 <HAL_GetTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001a1e:	6013      	str	r3, [r2, #0]
	uint32_t delta_us = mesure_us-mesure_precedente_us;
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	60bb      	str	r3, [r7, #8]

	if((delta_us) >= 300) //si mesure cohérente (pas un glitch):
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a32:	d374      	bcc.n	8001b1e <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if((mesure_us > (mesure_precedente_us+100000)) || ((mesure_us-100000) > mesure_precedente_us)) //cas d'un nouveau départ (the second term is for overflow)
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001a3c:	33a0      	adds	r3, #160	; 0xa0
 8001a3e:	4a3a      	ldr	r2, [pc, #232]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d308      	bcc.n	8001a58 <HAL_TIM_IC_CaptureCallback+0x58>
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001a4e:	3ba0      	subs	r3, #160	; 0xa0
 8001a50:	4a37      	ldr	r2, [pc, #220]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d908      	bls.n	8001a6a <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			memset(tableau_intervalles_us, 0, sizeof(tableau_intervalles_us));
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4835      	ldr	r0, [pc, #212]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001a5e:	f008 fa38 	bl	8009ed2 <memset>
			indice=0;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e055      	b.n	8001b16 <HAL_TIM_IC_CaptureCallback+0x116>
		}
		else //cas où on tourne depuis plus d'un intervalle
		{
			tableau_intervalles_us[indice] = delta_us; //on sauvegarde la nouvelle mesure dans le tableau
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4931      	ldr	r1, [pc, #196]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//On fait une moyenne sur 10 ms au plus ou 16 valeurs.
			somme_intervalles_us = 0;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
			i= indice;
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a82:	6013      	str	r3, [r2, #0]

			do{
				if(!tableau_intervalles_us[i])
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01d      	beq.n	8001ace <HAL_TIM_IC_CaptureCallback+0xce>
						break;
				somme_intervalles_us += tableau_intervalles_us[i];
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001aa4:	6013      	str	r3, [r2, #0]

				i = (i - 1)%16;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ab2:	6013      	str	r3, [r2, #0]
				
				nb_intervalles++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]

			}while ((somme_intervalles_us<10000) && (nb_intervalles < 16));
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d804      	bhi.n	8001ad0 <HAL_TIM_IC_CaptureCallback+0xd0>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d9db      	bls.n	8001a84 <HAL_TIM_IC_CaptureCallback+0x84>
 8001acc:	e000      	b.n	8001ad0 <HAL_TIM_IC_CaptureCallback+0xd0>
						break;
 8001ace:	bf00      	nop

			indice = (indice+1)%16; // on incrémente l'indice avec retour à 0 pour indice = 16
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001adc:	6013      	str	r3, [r2, #0]

			vitesse_mesuree_mm_s = 1000 * coefficient_distance_par_intervalle_um * nb_intervalles / somme_intervalles_us;
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001b48 <HAL_TIM_IC_CaptureCallback+0x148>
 8001ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0e:	ee17 2a90 	vmov	r2, s15
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b14:	601a      	str	r2, [r3, #0]
		}
		mesure_precedente_us = mesure_us;
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001b1c:	6013      	str	r3, [r2, #0]
	}
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200001c8 	.word	0x200001c8
 8001b2c:	2000016c 	.word	0x2000016c
 8001b30:	200001cc 	.word	0x200001cc
 8001b34:	200001d0 	.word	0x200001d0
 8001b38:	20000210 	.word	0x20000210
 8001b3c:	20000214 	.word	0x20000214
 8001b40:	20000218 	.word	0x20000218
 8001b44:	20000010 	.word	0x20000010
 8001b48:	447a0000 	.word	0x447a0000
 8001b4c:	20000154 	.word	0x20000154

08001b50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001b5c:	f002 fae2 	bl	8004124 <HAL_GPIO_TogglePin>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	48000400 	.word	0x48000400

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <Error_Handler+0x8>
	...

08001b78 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <MX_SPI3_Init+0x70>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_SPI3_Init+0x6c>)
 8001bd0:	f004 fb66 	bl	80062a0 <HAL_SPI_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001bda:	f7ff ffc7 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000021c 	.word	0x2000021c
 8001be8:	40003c00 	.word	0x40003c00

08001bec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a40      	ldr	r2, [pc, #256]	; (8001d0c <HAL_SPI_MspInit+0x120>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d179      	bne.n	8001d02 <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	4a3f      	ldr	r2, [pc, #252]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a39      	ldr	r2, [pc, #228]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_SPI_MspInit+0x124>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c3e:	2338      	movs	r3, #56	; 0x38
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c4e:	2306      	movs	r3, #6
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	482e      	ldr	r0, [pc, #184]	; (8001d14 <HAL_SPI_MspInit+0x128>)
 8001c5a:	f002 f8e1 	bl	8003e20 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c60:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_SPI_MspInit+0x130>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c66:	2203      	movs	r2, #3
 8001c68:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001c94:	4820      	ldr	r0, [pc, #128]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001c96:	f001 fecb 	bl	8003a30 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8001ca0:	f7ff ff64 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_SPI_MspInit+0x12c>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_SPI_MspInit+0x138>)
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_3;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cb8:	2203      	movs	r2, #3
 8001cba:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cdc:	2220      	movs	r2, #32
 8001cde:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001ce8:	f001 fea2 	bl	8003a30 <HAL_DMA_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001cf2:	f7ff ff3b 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_SPI_MspInit+0x134>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40003c00 	.word	0x40003c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	20000280 	.word	0x20000280
 8001d1c:	4002041c 	.word	0x4002041c
 8001d20:	200002c8 	.word	0x200002c8
 8001d24:	40020408 	.word	0x40020408

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_MspInit+0x44>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_MspInit+0x44>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x44>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_MspInit+0x44>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_MspInit+0x44>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_MspInit+0x44>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 fba6 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dca:	f001 ff49 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200000b8 	.word	0x200000b8

08001dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM2_IRQHandler+0x10>)
 8001dde:	f005 f8ed 	bl	8006fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000035c 	.word	0x2000035c

08001dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM6_DAC_IRQHandler+0x10>)
 8001df2:	f005 f8e3 	bl	8006fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200003a8 	.word	0x200003a8

08001e00 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <DMA2_Channel1_IRQHandler+0x10>)
 8001e06:	f001 ff2b 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200002c8 	.word	0x200002c8

08001e14 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <DMA2_Channel2_IRQHandler+0x10>)
 8001e1a:	f001 ff21 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000280 	.word	0x20000280

08001e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b09a      	sub	sp, #104	; 0x68
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	615a      	str	r2, [r3, #20]
 8001e7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	222c      	movs	r2, #44	; 0x2c
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f008 f823 	bl	8009ed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001e8e:	4a4b      	ldr	r2, [pc, #300]	; (8001fbc <MX_TIM1_Init+0x170>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001e94:	221f      	movs	r2, #31
 8001e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001ea0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eb8:	483f      	ldr	r0, [pc, #252]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001eba:	f004 fd67 	bl	800698c <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ec4:	f7ff fe52 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ece:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4838      	ldr	r0, [pc, #224]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001ed6:	f005 fb41 	bl	800755c <HAL_TIM_ConfigClockSource>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ee0:	f7ff fe44 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ee4:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001ee6:	f004 fe78 	bl	8006bda <HAL_TIM_PWM_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ef0:	f7ff fe3c 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f04:	4619      	mov	r1, r3
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001f08:	f006 f8be 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f12:	f7ff fe2b 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f16:	2360      	movs	r3, #96	; 0x60
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8001f1a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001f3e:	f005 f9f9 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f48:	f7ff fe10 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f50:	220c      	movs	r2, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	4818      	ldr	r0, [pc, #96]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001f56:	f005 f9ed 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f60:	f7ff fe04 	bl	8001b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001f9a:	f006 f8db 	bl	8008154 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001fa4:	f7ff fde2 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <MX_TIM1_Init+0x16c>)
 8001faa:	f000 f971 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001fae:	bf00      	nop
 8001fb0:	3768      	adds	r7, #104	; 0x68
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000310 	.word	0x20000310
 8001fbc:	40012c00 	.word	0x40012c00

08001fc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_TIM2_Init+0xdc>)
 8001fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <MX_TIM2_Init+0xdc>)
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_TIM2_Init+0xdc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_TIM2_Init+0xdc>)
 8002002:	f04f 32ff 	mov.w	r2, #4294967295
 8002006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <MX_TIM2_Init+0xdc>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <MX_TIM2_Init+0xdc>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002014:	4821      	ldr	r0, [pc, #132]	; (800209c <MX_TIM2_Init+0xdc>)
 8002016:	f004 fcb9 	bl	800698c <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002020:	f7ff fda4 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	4619      	mov	r1, r3
 8002030:	481a      	ldr	r0, [pc, #104]	; (800209c <MX_TIM2_Init+0xdc>)
 8002032:	f005 fa93 	bl	800755c <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800203c:	f7ff fd96 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002040:	4816      	ldr	r0, [pc, #88]	; (800209c <MX_TIM2_Init+0xdc>)
 8002042:	f004 fe2b 	bl	8006c9c <HAL_TIM_IC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800204c:	f7ff fd8e 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	480f      	ldr	r0, [pc, #60]	; (800209c <MX_TIM2_Init+0xdc>)
 8002060:	f006 f812 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800206a:	f7ff fd7f 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800206e:	2302      	movs	r3, #2
 8002070:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002072:	2301      	movs	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_TIM2_Init+0xdc>)
 8002086:	f005 f8b8 	bl	80071fa <HAL_TIM_IC_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002090:	f7ff fd6c 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2000035c 	.word	0x2000035c

080020a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_TIM6_Init+0x64>)
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <MX_TIM6_Init+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_TIM6_Init+0x64>)
 80020b8:	221f      	movs	r2, #31
 80020ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_TIM6_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2272;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_TIM6_Init+0x64>)
 80020c4:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 80020c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_TIM6_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <MX_TIM6_Init+0x64>)
 80020d2:	f004 fc5b 	bl	800698c <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020dc:	f7ff fd46 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM6_Init+0x64>)
 80020ee:	f005 ffcb 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f7ff fd38 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200003a8 	.word	0x200003a8
 8002108:	40001000 	.word	0x40001000

0800210c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_TIM7_Init+0x64>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_TIM7_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_TIM7_Init+0x64>)
 8002124:	221f      	movs	r2, #31
 8002126:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_TIM7_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <MX_TIM7_Init+0x64>)
 8002130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002134:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_TIM7_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <MX_TIM7_Init+0x64>)
 800213e:	f004 fc25 	bl	800698c <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002148:	f7ff fd10 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_TIM7_Init+0x64>)
 800215a:	f005 ff95 	bl	8008088 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002164:	f7ff fd02 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200003f4 	.word	0x200003f4
 8002174:	40001400 	.word	0x40001400

08002178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_TIM_Base_MspInit+0x108>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10c      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4a39      	ldr	r2, [pc, #228]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a4:	6613      	str	r3, [r2, #96]	; 0x60
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80021b2:	e061      	b.n	8002278 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d131      	bne.n	8002222 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fe:	2301      	movs	r3, #1
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f001 fe08 	bl	8003e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	201c      	movs	r0, #28
 8002216:	f001 fbd4 	bl	80039c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800221a:	201c      	movs	r0, #28
 800221c:	f001 fbed 	bl	80039fa <HAL_NVIC_EnableIRQ>
}
 8002220:	e02a      	b.n	8002278 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM6)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_TIM_Base_MspInit+0x110>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d114      	bne.n	8002256 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2036      	movs	r0, #54	; 0x36
 800224a:	f001 fbba 	bl	80039c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800224e:	2036      	movs	r0, #54	; 0x36
 8002250:	f001 fbd3 	bl	80039fa <HAL_NVIC_EnableIRQ>
}
 8002254:	e010      	b.n	8002278 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM7)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <HAL_TIM_Base_MspInit+0x114>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10b      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 8002266:	f043 0320 	orr.w	r3, r3, #32
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_TIM_Base_MspInit+0x10c>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40001000 	.word	0x40001000
 800228c:	40001400 	.word	0x40001400

08002290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11d      	bne.n	80022ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin|PWM_DIRECTION_Pin;
 80022ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80022ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ea:	f001 fd99 	bl	8003e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40021000 	.word	0x40021000

08002300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <MX_USART1_UART_Init+0x5c>)
 8002308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <MX_USART1_UART_Init+0x58>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_USART1_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_USART1_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <MX_USART1_UART_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_USART1_UART_Init+0x58>)
 8002344:	f005 ff9c 	bl	8008280 <HAL_UART_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800234e:	f7ff fc0d 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000440 	.word	0x20000440
 800235c:	40013800 	.word	0x40013800

08002360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b09e      	sub	sp, #120	; 0x78
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2254      	movs	r2, #84	; 0x54
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fda6 	bl	8009ed2 <memset>
  if(uartHandle->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_UART_MspInit+0xa8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d137      	bne.n	8002400 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f003 fc87 	bl	8005cb0 <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023a8:	f7ff fbe0 	bl	8001b6c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_UART_MspInit+0xac>)
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_UART_MspInit+0xac>)
 80023b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b6:	6613      	str	r3, [r2, #96]	; 0x60
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_UART_MspInit+0xac>)
 80023ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_UART_MspInit+0xac>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_UART_MspInit+0xac>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_UART_MspInit+0xac>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ee:	2307      	movs	r3, #7
 80023f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fc:	f001 fd10 	bl	8003e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002400:	bf00      	nop
 8002402:	3778      	adds	r7, #120	; 0x78
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40013800 	.word	0x40013800
 800240c:	40021000 	.word	0x40021000

08002410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002414:	f7ff fd08 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <LoopForever+0x6>)
  ldr r1, =_edata
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <LoopForever+0xe>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002430:	4c0a      	ldr	r4, [pc, #40]	; (800245c <LoopForever+0x16>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243e:	f007 fd51 	bl	8009ee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002442:	f7ff f899 	bl	8001578 <main>

08002446 <LoopForever>:

LoopForever:
    b LoopForever
 8002446:	e7fe      	b.n	8002446 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002448:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002454:	0800c1d8 	.word	0x0800c1d8
  ldr r2, =_sbss
 8002458:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800245c:	20000548 	.word	0x20000548

08002460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC1_IRQHandler>

08002462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f001 fa9d 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f80e 	bl	8002494 <HAL_InitTick>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	e001      	b.n	8002488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002484:	f7ff fc50 	bl	8001d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002488:	79fb      	ldrb	r3, [r7, #7]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_InitTick+0x6c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_InitTick+0x70>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 faa9 	bl	8003a16 <HAL_SYSTICK_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d809      	bhi.n	80024e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f001 fa73 	bl	80039c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0x74>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e004      	b.n	80024f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e001      	b.n	80024f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000001c 	.word	0x2000001c
 8002504:	20000014 	.word	0x20000014
 8002508:	20000018 	.word	0x20000018

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000001c 	.word	0x2000001c
 8002530:	200004c4 	.word	0x200004c4

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200004c4 	.word	0x200004c4

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffde 	bl	8002534 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000001c 	.word	0x2000001c

08002594 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3360      	adds	r3, #96	; 0x60
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <LL_ADC_SetOffset+0x44>)
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	4313      	orrs	r3, r2
 800262c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002634:	bf00      	nop
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	03fff000 	.word	0x03fff000

08002644 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	461a      	mov	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3330      	adds	r3, #48	; 0x30
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	211f      	movs	r1, #31
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 011f 	and.w	r1, r3, #31
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3314      	adds	r3, #20
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	0e5b      	lsrs	r3, r3, #25
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	0d1b      	lsrs	r3, r3, #20
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2107      	movs	r1, #7
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0d1b      	lsrs	r3, r3, #20
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0318 	and.w	r3, r3, #24
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027a0:	40d9      	lsrs	r1, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	400b      	ands	r3, r1
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	0007ffff 	.word	0x0007ffff

080027c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6093      	str	r3, [r2, #8]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027fc:	d101      	bne.n	8002802 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002824:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284c:	d101      	bne.n	8002852 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <LL_ADC_IsEnabled+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_ADC_IsEnabled+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c2:	f043 0204 	orr.w	r2, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d101      	bne.n	80028ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b08      	cmp	r3, #8
 800290e:	d101      	bne.n	8002914 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e12c      	b.n	8002b98 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe fb19 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff3f 	bl	80027e8 <LL_ADC_IsDeepPowerDownEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff25 	bl	80027c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff5a 	bl	8002838 <LL_ADC_IsInternalRegulatorEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d115      	bne.n	80029b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff3e 	bl	8002810 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002994:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_ADC_Init+0x27c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	4a82      	ldr	r2, [pc, #520]	; (8002ba4 <HAL_ADC_Init+0x280>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff3c 	bl	8002838 <LL_ADC_IsInternalRegulatorEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff75 	bl	80028d6 <LL_ADC_REG_IsConversionOngoing>
 80029ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80c5 	bne.w	8002b86 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 80c1 	bne.w	8002b86 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a0c:	f043 0202 	orr.w	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff35 	bl	8002888 <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a24:	4860      	ldr	r0, [pc, #384]	; (8002ba8 <HAL_ADC_Init+0x284>)
 8002a26:	f7ff ff2f 	bl	8002888 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	485d      	ldr	r0, [pc, #372]	; (8002bac <HAL_ADC_Init+0x288>)
 8002a38:	f7ff fdac 	bl	8002594 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7e5b      	ldrb	r3, [r3, #25]
 8002a40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d106      	bne.n	8002a78 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	045b      	lsls	r3, r3, #17
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_ADC_Init+0x28c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff12 	bl	80028d6 <LL_ADC_REG_IsConversionOngoing>
 8002ab2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff1f 	bl	80028fc <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d13d      	bne.n	8002b42 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d13a      	bne.n	8002b42 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae8:	f023 0302 	bic.w	r3, r3, #2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	430b      	orrs	r3, r1
 8002af4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d118      	bne.n	8002b32 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b22:	430a      	orrs	r2, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	e007      	b.n	8002b42 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10c      	bne.n	8002b64 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f023 010f 	bic.w	r1, r3, #15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
 8002b62:	e007      	b.n	8002b74 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020f 	bic.w	r2, r2, #15
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f023 0303 	bic.w	r3, r3, #3
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
 8002b84:	e007      	b.n	8002b96 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000014 	.word	0x20000014
 8002ba4:	053e2d63 	.word	0x053e2d63
 8002ba8:	50040000 	.word	0x50040000
 8002bac:	50040300 	.word	0x50040300
 8002bb0:	fff0c007 	.word	0xfff0c007

08002bb4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d102      	bne.n	8002bcc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e010      	b.n	8002bee <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002bea:	2304      	movs	r3, #4
 8002bec:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bee:	f7ff fca1 	bl	8002534 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bf4:	e021      	b.n	8002c3a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d01d      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bfe:	f7ff fc99 	bl	8002534 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <HAL_ADC_PollForConversion+0x60>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d112      	bne.n	8002c3a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e047      	b.n	8002cca <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0d6      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd24 	bl	80026a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e5b      	ldrb	r3, [r3, #25]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d118      	bne.n	8002c9e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d111      	bne.n	8002c9e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d104      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e008      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	220c      	movs	r2, #12
 8002cc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fdf6 	bl	80028d6 <LL_ADC_REG_IsConversionOngoing>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d167      	bne.n	8002dc0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x2a>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e063      	b.n	8002dc6 <HAL_ADC_Start_DMA+0xf2>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fc66 	bl	80035d8 <ADC_Enable>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d14f      	bne.n	8002db6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f023 0206 	bic.w	r2, r3, #6
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	659a      	str	r2, [r3, #88]	; 0x58
 8002d42:	e002      	b.n	8002d4a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <HAL_ADC_Start_DMA+0xfc>)
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_ADC_Start_DMA+0x100>)
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_ADC_Start_DMA+0x104>)
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	221c      	movs	r2, #28
 8002d68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0210 	orr.w	r2, r2, #16
 8002d80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3340      	adds	r3, #64	; 0x40
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f000 fefd 	bl	8003ba0 <HAL_DMA_Start_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fd7d 	bl	80028ae <LL_ADC_REG_StartConversion>
 8002db4:	e006      	b.n	8002dc4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002dbe:	e001      	b.n	8002dc4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	080036e5 	.word	0x080036e5
 8002dd4:	080037bd 	.word	0x080037bd
 8002dd8:	080037d9 	.word	0x080037d9

08002ddc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0b6      	sub	sp, #216	; 0xd8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x22>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e3b9      	b.n	80035ae <HAL_ADC_ConfigChannel+0x796>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd45 	bl	80028d6 <LL_ADC_REG_IsConversionOngoing>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 839e 	bne.w	8003590 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d824      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	3b02      	subs	r3, #2
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d81b      	bhi.n	8002e9e <HAL_ADC_ConfigChannel+0x86>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_ADC_ConfigChannel+0x54>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e95 	.word	0x08002e95
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	220c      	movs	r2, #12
 8002e80:	605a      	str	r2, [r3, #4]
          break;
 8002e82:	e010      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2212      	movs	r2, #18
 8002e88:	605a      	str	r2, [r3, #4]
          break;
 8002e8a:	e00c      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2218      	movs	r2, #24
 8002e90:	605a      	str	r2, [r3, #4]
          break;
 8002e92:	e008      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	605a      	str	r2, [r3, #4]
          break;
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	605a      	str	r2, [r3, #4]
          break;
 8002ea4:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f7ff fc0a 	bl	80026cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd0a 	bl	80028d6 <LL_ADC_REG_IsConversionOngoing>
 8002ec2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fd16 	bl	80028fc <LL_ADC_INJ_IsConversionOngoing>
 8002ed0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 81a6 	bne.w	800322a <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 81a1 	bne.w	800322a <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f7ff fc15 	bl	8002724 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00a      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6919      	ldr	r1, [r3, #16]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f2c:	f7ff fb66 	bl	80025fc <LL_ADC_SetOffset>
 8002f30:	e17b      	b.n	800322a <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb83 	bl	8002644 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x146>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb78 	bl	8002644 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	e01e      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x184>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fb6d 	bl	8002644 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e004      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x19c>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	e018      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x1ce>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e004      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d106      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fb3c 	bl	8002670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fb20 	bl	8002644 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x20c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fb15 	bl	8002644 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	e01e      	b.n	8003062 <HAL_ADC_ConfigChannel+0x24a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fb0a 	bl	8002644 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800304a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e004      	b.n	8003060 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8003056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_ADC_ConfigChannel+0x262>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	e018      	b.n	80030ac <HAL_ADC_ConfigChannel+0x294>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800308e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003096:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e004      	b.n	80030ac <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80030a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fad9 	bl	8002670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fabd 	bl	8002644 <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x2d2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fab2 	bl	8002644 <LL_ADC_GetOffsetChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	e01e      	b.n	8003128 <HAL_ADC_ConfigChannel+0x310>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff faa7 	bl	8002644 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800310c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e004      	b.n	8003126 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800311c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x328>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	e016      	b.n	800316e <HAL_ADC_ConfigChannel+0x356>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e004      	b.n	800316e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8003164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fa78 	bl	8002670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2103      	movs	r1, #3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fa5c 	bl	8002644 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x394>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fa51 	bl	8002644 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	e017      	b.n	80031dc <HAL_ADC_ConfigChannel+0x3c4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2103      	movs	r1, #3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fa46 	bl	8002644 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80031ce:	2320      	movs	r3, #32
 80031d0:	e003      	b.n	80031da <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80031d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x3dc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	e011      	b.n	8003218 <HAL_ADC_ConfigChannel+0x400>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003204:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003218:	429a      	cmp	r2, r3
 800321a:	d106      	bne.n	800322a <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa23 	bl	8002670 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fb2a 	bl	8002888 <LL_ADC_IsEnabled>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 8140 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	461a      	mov	r2, r3
 800324a:	f7ff fa97 	bl	800277c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4a8f      	ldr	r2, [pc, #572]	; (8003490 <HAL_ADC_ConfigChannel+0x678>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f040 8131 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x46a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	3301      	adds	r3, #1
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2b09      	cmp	r3, #9
 8003278:	bf94      	ite	ls
 800327a:	2301      	movls	r3, #1
 800327c:	2300      	movhi	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e019      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x49e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003292:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 800329e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	bf94      	ite	ls
 80032b0:	2301      	movls	r3, #1
 80032b2:	2300      	movhi	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d079      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x4be>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	3301      	adds	r3, #1
 80032ce:	069b      	lsls	r3, r3, #26
 80032d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d4:	e015      	b.n	8003302 <HAL_ADC_ConfigChannel+0x4ea>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80032f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x50a>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	3301      	adds	r3, #1
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	e017      	b.n	8003352 <HAL_ADC_ConfigChannel+0x53a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	ea42 0103 	orr.w	r1, r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x560>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	3301      	adds	r3, #1
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	e018      	b.n	80033aa <HAL_ADC_ConfigChannel+0x592>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800338a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e003      	b.n	800339c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033aa:	430b      	orrs	r3, r1
 80033ac:	e081      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x5b2>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	3301      	adds	r3, #1
 80033c2:	069b      	lsls	r3, r3, #26
 80033c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c8:	e015      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5de>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	069b      	lsls	r3, r3, #26
 80033f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x5fe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	3301      	adds	r3, #1
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	e017      	b.n	8003446 <HAL_ADC_ConfigChannel+0x62e>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	61fb      	str	r3, [r7, #28]
  return result;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e003      	b.n	800343a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	ea42 0103 	orr.w	r1, r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x65a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0e9b      	lsrs	r3, r3, #26
 800345c:	3301      	adds	r3, #1
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	3b1e      	subs	r3, #30
 800346a:	051b      	lsls	r3, r3, #20
 800346c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003470:	e01e      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x698>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	613b      	str	r3, [r7, #16]
  return result;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e006      	b.n	800349c <HAL_ADC_ConfigChannel+0x684>
 800348e:	bf00      	nop
 8003490:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	430b      	orrs	r3, r1
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7ff f934 	bl	8002724 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_ADC_ConfigChannel+0x7a0>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d06c      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c8:	483c      	ldr	r0, [pc, #240]	; (80035bc <HAL_ADC_ConfigChannel+0x7a4>)
 80034ca:	f7ff f889 	bl	80025e0 <LL_ADC_GetCommonPathInternalCh>
 80034ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <HAL_ADC_ConfigChannel+0x7a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d127      	bne.n	800352c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d121      	bne.n	800352c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d157      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034fa:	4619      	mov	r1, r3
 80034fc:	482f      	ldr	r0, [pc, #188]	; (80035bc <HAL_ADC_ConfigChannel+0x7a4>)
 80034fe:	f7ff f85c 	bl	80025ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <HAL_ADC_ConfigChannel+0x7b4>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800351c:	e002      	b.n	8003524 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3b01      	subs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800352a:	e03a      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_ADC_ConfigChannel+0x7b8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <HAL_ADC_ConfigChannel+0x746>
 8003536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800353a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ac>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d12a      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003554:	4619      	mov	r1, r3
 8003556:	4819      	ldr	r0, [pc, #100]	; (80035bc <HAL_ADC_ConfigChannel+0x7a4>)
 8003558:	f7ff f82f 	bl	80025ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800355c:	e021      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d11c      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d111      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003586:	4619      	mov	r1, r3
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <HAL_ADC_ConfigChannel+0x7a4>)
 800358a:	f7ff f816 	bl	80025ba <LL_ADC_SetCommonPathInternalCh>
 800358e:	e008      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	37d8      	adds	r7, #216	; 0xd8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	80080000 	.word	0x80080000
 80035bc:	50040300 	.word	0x50040300
 80035c0:	c7520000 	.word	0xc7520000
 80035c4:	50040000 	.word	0x50040000
 80035c8:	20000014 	.word	0x20000014
 80035cc:	053e2d63 	.word	0x053e2d63
 80035d0:	cb840000 	.word	0xcb840000
 80035d4:	80000001 	.word	0x80000001

080035d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff f94d 	bl	8002888 <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d169      	bne.n	80036c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <ADC_Enable+0xfc>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e055      	b.n	80036ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f91c 	bl	8002860 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003628:	482b      	ldr	r0, [pc, #172]	; (80036d8 <ADC_Enable+0x100>)
 800362a:	f7fe ffd9 	bl	80025e0 <LL_ADC_GetCommonPathInternalCh>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <ADC_Enable+0x104>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <ADC_Enable+0x108>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003652:	e002      	b.n	800365a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3b01      	subs	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f9      	bne.n	8003654 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003660:	f7fe ff68 	bl	8002534 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003666:	e028      	b.n	80036ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f90b 	bl	8002888 <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f8ef 	bl	8002860 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003682:	f7fe ff57 	bl	8002534 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d914      	bls.n	80036ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00d      	beq.n	80036ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d1cf      	bne.n	8003668 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	8000003f 	.word	0x8000003f
 80036d8:	50040300 	.word	0x50040300
 80036dc:	20000014 	.word	0x20000014
 80036e0:	053e2d63 	.word	0x053e2d63

080036e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d14b      	bne.n	8003796 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d021      	beq.n	800375c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe ffc2 	bl	80026a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d032      	beq.n	800378e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d12b      	bne.n	800378e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
 800375a:	e018      	b.n	800378e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d111      	bne.n	800378e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff fb24 	bl	8002ddc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003794:	e00e      	b.n	80037b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fb2e 	bl	8002e04 <HAL_ADC_ErrorCallback>
}
 80037a8:	e004      	b.n	80037b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff fb10 	bl	8002df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff fb00 	bl	8002e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003828:	4013      	ands	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60d3      	str	r3, [r2, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <__NVIC_GetPriorityGrouping+0x18>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0307 	and.w	r3, r3, #7
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	db0b      	blt.n	800389a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4907      	ldr	r1, [pc, #28]	; (80038a8 <__NVIC_EnableIRQ+0x38>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2001      	movs	r0, #1
 8003892:	fa00 f202 	lsl.w	r2, r0, r2
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0a      	blt.n	80038d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	490c      	ldr	r1, [pc, #48]	; (80038f8 <__NVIC_SetPriority+0x4c>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d4:	e00a      	b.n	80038ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <__NVIC_SetPriority+0x50>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3b04      	subs	r3, #4
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	440b      	add	r3, r1
 80038ea:	761a      	strb	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf28      	it	cs
 800391e:	2304      	movcs	r3, #4
 8003920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3304      	adds	r3, #4
 8003926:	2b06      	cmp	r3, #6
 8003928:	d902      	bls.n	8003930 <NVIC_EncodePriority+0x30>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3b03      	subs	r3, #3
 800392e:	e000      	b.n	8003932 <NVIC_EncodePriority+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	401a      	ands	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003948:	f04f 31ff 	mov.w	r1, #4294967295
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43d9      	mvns	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	4313      	orrs	r3, r2
         );
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003978:	d301      	bcc.n	800397e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397a:	2301      	movs	r3, #1
 800397c:	e00f      	b.n	800399e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <SysTick_Config+0x40>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003986:	210f      	movs	r1, #15
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	f7ff ff8e 	bl	80038ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <SysTick_Config+0x40>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <SysTick_Config+0x40>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000e010 	.word	0xe000e010

080039ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff29 	bl	800380c <__NVIC_SetPriorityGrouping>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039d4:	f7ff ff3e 	bl	8003854 <__NVIC_GetPriorityGrouping>
 80039d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	6978      	ldr	r0, [r7, #20]
 80039e0:	f7ff ff8e 	bl	8003900 <NVIC_EncodePriority>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff5d 	bl	80038ac <__NVIC_SetPriority>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff31 	bl	8003870 <__NVIC_EnableIRQ>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ffa2 	bl	8003968 <SysTick_Config>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e098      	b.n	8003b74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_DMA_Init+0x150>)
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d80f      	bhi.n	8003a6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_DMA_Init+0x154>)
 8003a56:	4413      	add	r3, r2
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_DMA_Init+0x158>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	009a      	lsls	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <HAL_DMA_Init+0x15c>)
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6c:	e00e      	b.n	8003a8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_DMA_Init+0x160>)
 8003a76:	4413      	add	r3, r2
 8003a78:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <HAL_DMA_Init+0x158>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a42      	ldr	r2, [pc, #264]	; (8003b94 <HAL_DMA_Init+0x164>)
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae6:	d039      	beq.n	8003b5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <HAL_DMA_Init+0x15c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d11a      	bne.n	8003b28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_DMA_Init+0x168>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f003 031c 	and.w	r3, r3, #28
 8003afe:	210f      	movs	r1, #15
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4924      	ldr	r1, [pc, #144]	; (8003b98 <HAL_DMA_Init+0x168>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_DMA_Init+0x168>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f003 031c 	and.w	r3, r3, #28
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	491d      	ldr	r1, [pc, #116]	; (8003b98 <HAL_DMA_Init+0x168>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
 8003b26:	e019      	b.n	8003b5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <HAL_DMA_Init+0x16c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f003 031c 	and.w	r3, r3, #28
 8003b34:	210f      	movs	r1, #15
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	4917      	ldr	r1, [pc, #92]	; (8003b9c <HAL_DMA_Init+0x16c>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_DMA_Init+0x16c>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 031c 	and.w	r3, r3, #28
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	4911      	ldr	r1, [pc, #68]	; (8003b9c <HAL_DMA_Init+0x16c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40020407 	.word	0x40020407
 8003b84:	bffdfff8 	.word	0xbffdfff8
 8003b88:	cccccccd 	.word	0xcccccccd
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	bffdfbf8 	.word	0xbffdfbf8
 8003b94:	40020400 	.word	0x40020400
 8003b98:	400200a8 	.word	0x400200a8
 8003b9c:	400204a8 	.word	0x400204a8

08003ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Start_IT+0x20>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e04b      	b.n	8003c58 <HAL_DMA_Start_IT+0xb8>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d13a      	bne.n	8003c4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f8e0 	bl	8003dbe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 020e 	orr.w	r2, r2, #14
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e00f      	b.n	8003c38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 020a 	orr.w	r2, r2, #10
 8003c36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e005      	b.n	8003c56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
 8003c54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	f003 031c 	and.w	r3, r3, #28
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d026      	beq.n	8003cda <HAL_DMA_IRQHandler+0x7a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d021      	beq.n	8003cda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0204 	bic.w	r2, r2, #4
 8003cb2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 021c 	and.w	r2, r3, #28
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d071      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003cd8:	e06c      	b.n	8003db4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f003 031c 	and.w	r3, r3, #28
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02e      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xec>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d029      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 020a 	bic.w	r2, r2, #10
 8003d14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f003 021c 	and.w	r2, r3, #28
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d038      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d4a:	e033      	b.n	8003db4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 031c 	and.w	r3, r3, #28
 8003d54:	2208      	movs	r2, #8
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02a      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d025      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 020e 	bic.w	r2, r2, #14
 8003d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f003 021c 	and.w	r2, r3, #28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
}
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	f003 021c 	and.w	r2, r3, #28
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f202 	lsl.w	r2, r1, r2
 8003dde:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d108      	bne.n	8003e02 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e00:	e007      	b.n	8003e12 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	60da      	str	r2, [r3, #12]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	e148      	b.n	80040c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 813a 	beq.w	80040bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_GPIO_Init+0x40>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d130      	bne.n	8003ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e96:	2201      	movs	r2, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0201 	and.w	r2, r3, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d017      	beq.n	8003efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d123      	bne.n	8003f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	08da      	lsrs	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3208      	adds	r2, #8
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0203 	and.w	r2, r3, #3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8094 	beq.w	80040bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <HAL_GPIO_Init+0x2c0>)
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	4a51      	ldr	r2, [pc, #324]	; (80040e0 <HAL_GPIO_Init+0x2c0>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <HAL_GPIO_Init+0x2c0>)
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fac:	4a4d      	ldr	r2, [pc, #308]	; (80040e4 <HAL_GPIO_Init+0x2c4>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_GPIO_Init+0x1d4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a43      	ldr	r2, [pc, #268]	; (80040e8 <HAL_GPIO_Init+0x2c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x1d0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_GPIO_Init+0x2cc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_GPIO_Init+0x1cc>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e004      	b.n	8003ff6 <HAL_GPIO_Init+0x1d6>
 8003fec:	2307      	movs	r3, #7
 8003fee:	e002      	b.n	8003ff6 <HAL_GPIO_Init+0x1d6>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_GPIO_Init+0x1d6>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	f002 0203 	and.w	r2, r2, #3
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	4093      	lsls	r3, r2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004006:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_GPIO_Init+0x2c4>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004092:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f aeaf 	bne.w	8003e30 <HAL_GPIO_Init+0x10>
  }
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40010000 	.word	0x40010000
 80040e8:	48000400 	.word	0x48000400
 80040ec:	48000800 	.word	0x48000800
 80040f0:	40010400 	.word	0x40010400

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004110:	e002      	b.n	8004118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43d9      	mvns	r1, r3
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	400b      	ands	r3, r1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e081      	b.n	800426e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd f89a 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e006      	b.n	80041e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d104      	bne.n	80041f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 80da 	bne.w	800444e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x30>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0d3      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe f940 	bl	8002534 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fb5c 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0be      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2210      	movs	r2, #16
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	893a      	ldrh	r2, [r7, #8]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2bff      	cmp	r3, #255	; 0xff
 8004302:	d90e      	bls.n	8004322 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_I2C_Master_Transmit+0x1e0>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fd52 	bl	8004dc4 <I2C_TransferConfig>
 8004320:	e06c      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_I2C_Master_Transmit+0x1e0>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fd41 	bl	8004dc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004342:	e05b      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fb59 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07b      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d034      	beq.n	80043fc <HAL_I2C_Master_Transmit+0x184>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d130      	bne.n	80043fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 faeb 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04d      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	; 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fcf5 	bl	8004dc4 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fce4 	bl	8004dc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19e      	bne.n	8004344 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fb38 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01a      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_I2C_Master_Transmit+0x1e4>)
 800442e:	400b      	ands	r3, r1
 8004430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	80002000 	.word	0x80002000
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	460b      	mov	r3, r1
 800446e:	817b      	strh	r3, [r7, #10]
 8004470:	4613      	mov	r3, r2
 8004472:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	f040 80db 	bne.w	8004638 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_I2C_Master_Receive+0x30>
 800448c:	2302      	movs	r3, #2
 800448e:	e0d4      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004498:	f7fe f84c 	bl	8002534 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2319      	movs	r3, #25
 80044a4:	2201      	movs	r2, #1
 80044a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa68 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0bf      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2222      	movs	r2, #34	; 0x22
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2210      	movs	r2, #16
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2bff      	cmp	r3, #255	; 0xff
 80044ea:	d90e      	bls.n	800450a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	8979      	ldrh	r1, [r7, #10]
 80044fa:	4b52      	ldr	r3, [pc, #328]	; (8004644 <HAL_I2C_Master_Receive+0x1e4>)
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fc5e 	bl	8004dc4 <I2C_TransferConfig>
 8004508:	e06d      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <HAL_I2C_Master_Receive+0x1e4>)
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fc4d 	bl	8004dc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800452a:	e05c      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	6a39      	ldr	r1, [r7, #32]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fae1 	bl	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e07c      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d034      	beq.n	80045e6 <HAL_I2C_Master_Receive+0x186>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d130      	bne.n	80045e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2200      	movs	r2, #0
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f9f6 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e04d      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2bff      	cmp	r3, #255	; 0xff
 80045a6:	d90e      	bls.n	80045c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	22ff      	movs	r2, #255	; 0xff
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	8979      	ldrh	r1, [r7, #10]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fc00 	bl	8004dc4 <I2C_TransferConfig>
 80045c4:	e00f      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	2300      	movs	r3, #0
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fbef 	bl	8004dc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d19d      	bne.n	800452c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	6a39      	ldr	r1, [r7, #32]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fa43 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e01a      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2220      	movs	r2, #32
 800460a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_I2C_Master_Receive+0x1e8>)
 8004618:	400b      	ands	r3, r1
 800461a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	80002400 	.word	0x80002400
 8004648:	fe00e800 	.word	0xfe00e800

0800464c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	461a      	mov	r2, r3
 800465a:	4603      	mov	r3, r0
 800465c:	817b      	strh	r3, [r7, #10]
 800465e:	460b      	mov	r3, r1
 8004660:	813b      	strh	r3, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b20      	cmp	r3, #32
 8004670:	f040 80f9 	bne.w	8004866 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_I2C_Mem_Write+0x34>
 800467a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0ed      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_I2C_Mem_Write+0x4e>
 8004696:	2302      	movs	r3, #2
 8004698:	e0e6      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046a2:	f7fd ff47 	bl	8002534 <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2319      	movs	r3, #25
 80046ae:	2201      	movs	r2, #1
 80046b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f963 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d1      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2221      	movs	r2, #33	; 0x21
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2240      	movs	r2, #64	; 0x40
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ec:	88f8      	ldrh	r0, [r7, #6]
 80046ee:	893a      	ldrh	r2, [r7, #8]
 80046f0:	8979      	ldrh	r1, [r7, #10]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4603      	mov	r3, r0
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f8c7 	bl	8004890 <I2C_RequestMemoryWrite>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0a9      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2bff      	cmp	r3, #255	; 0xff
 800471c:	d90e      	bls.n	800473c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	22ff      	movs	r2, #255	; 0xff
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	b2da      	uxtb	r2, r3
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb45 	bl	8004dc4 <I2C_TransferConfig>
 800473a:	e00f      	b.n	800475c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	b2da      	uxtb	r2, r3
 800474c:	8979      	ldrh	r1, [r7, #10]
 800474e:	2300      	movs	r3, #0
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fb34 	bl	8004dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f94d 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e07b      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d034      	beq.n	8004814 <HAL_I2C_Mem_Write+0x1c8>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d130      	bne.n	8004814 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	2200      	movs	r2, #0
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f8df 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e04d      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2bff      	cmp	r3, #255	; 0xff
 80047d4:	d90e      	bls.n	80047f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fae9 	bl	8004dc4 <I2C_TransferConfig>
 80047f2:	e00f      	b.n	8004814 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	b2da      	uxtb	r2, r3
 8004804:	8979      	ldrh	r1, [r7, #10]
 8004806:	2300      	movs	r3, #0
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fad8 	bl	8004dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d19e      	bne.n	800475c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f92c 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e01a      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2220      	movs	r2, #32
 8004838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_I2C_Mem_Write+0x224>)
 8004846:	400b      	ands	r3, r1
 8004848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	fe00e800 	.word	0xfe00e800

08004874 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004882:	b2db      	uxtb	r3, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	460b      	mov	r3, r1
 80048a4:	813b      	strh	r3, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	4b20      	ldr	r3, [pc, #128]	; (8004934 <I2C_RequestMemoryWrite+0xa4>)
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fa83 	bl	8004dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f89c 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e02c      	b.n	800492c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
 80048e2:	e015      	b.n	8004910 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	69b9      	ldr	r1, [r7, #24]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f882 	bl	8004a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e012      	b.n	800492c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004906:	893b      	ldrh	r3, [r7, #8]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2200      	movs	r2, #0
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f830 	bl	8004980 <I2C_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	80002000 	.word	0x80002000

08004938 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d103      	bne.n	8004956 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d007      	beq.n	8004974 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	619a      	str	r2, [r3, #24]
  }
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004990:	e022      	b.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d01e      	beq.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fd fdcb 	bl	8002534 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e00f      	b.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d0cd      	beq.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a0c:	e02c      	b.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f8ea 	bl	8004bec <I2C_IsErrorOccurred>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e02a      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d01e      	beq.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fd fd83 	bl	8002534 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d1cb      	bne.n	8004a0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	e028      	b.n	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f8aa 	bl	8004bec <I2C_IsErrorOccurred>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e026      	b.n	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fd fd47 	bl	8002534 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e007      	b.n	8004af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d1cf      	bne.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b04:	e064      	b.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f86e 	bl	8004bec <I2C_IsErrorOccurred>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e062      	b.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d138      	bne.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d105      	bne.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e04e      	b.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d107      	bne.n	8004b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2210      	movs	r2, #16
 8004b56:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b5e:	e002      	b.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e022      	b.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fd fccb 	bl	8002534 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e007      	b.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d193      	bne.n	8004b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	fe00e800 	.word	0xfe00e800

08004bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d075      	beq.n	8004d04 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c20:	e056      	b.n	8004cd0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d052      	beq.n	8004cd0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fd fc83 	bl	8002534 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_IsErrorOccurred+0x54>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d147      	bne.n	8004cd0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	d12e      	bne.n	8004cc2 <I2C_IsErrorOccurred+0xd6>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6a:	d02a      	beq.n	8004cc2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d027      	beq.n	8004cc2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c82:	f7fd fc57 	bl	8002534 <HAL_GetTick>
 8004c86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c88:	e01b      	b.n	8004cc2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c8a:	f7fd fc53 	bl	8002534 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b19      	cmp	r3, #25
 8004c96:	d914      	bls.n	8004cc2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d1dc      	bne.n	8004c8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d003      	beq.n	8004ce6 <I2C_IsErrorOccurred+0xfa>
 8004cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d09d      	beq.n	8004c22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f043 0308 	orr.w	r3, r3, #8
 8004d3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01c      	beq.n	8004db4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fddc 	bl	8004938 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <I2C_IsErrorOccurred+0x1d4>)
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fe00e800 	.word	0xfe00e800

08004dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dd6:	897b      	ldrh	r3, [r7, #10]
 8004dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ddc:	7a7b      	ldrb	r3, [r7, #9]
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004de4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004df2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	0d5b      	lsrs	r3, r3, #21
 8004dfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <I2C_TransferConfig+0x60>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	43db      	mvns	r3, r3
 8004e08:	ea02 0103 	and.w	r1, r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	03ff63ff 	.word	0x03ff63ff

08004e28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d138      	bne.n	8004eb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e032      	b.n	8004eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d139      	bne.n	8004f48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e033      	b.n	8004f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40007000 	.word	0x40007000

08004f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40007000 	.word	0x40007000

08004f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa2:	d130      	bne.n	8005006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fa4:	4b23      	ldr	r3, [pc, #140]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb0:	d038      	beq.n	8005024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fba:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2232      	movs	r2, #50	; 0x32
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0c9b      	lsrs	r3, r3, #18
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd8:	e002      	b.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d102      	bne.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f2      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	d110      	bne.n	8005024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e00f      	b.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d007      	beq.n	8005024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800501c:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800501e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40007000 	.word	0x40007000
 8005038:	20000014 	.word	0x20000014
 800503c:	431bde83 	.word	0x431bde83

08005040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f000 bc02 	b.w	8005858 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005054:	4b96      	ldr	r3, [pc, #600]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800505e:	4b94      	ldr	r3, [pc, #592]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80e4 	beq.w	800523e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_RCC_OscConfig+0x4c>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	f040 808b 	bne.w	800519a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b01      	cmp	r3, #1
 8005088:	f040 8087 	bne.w	800519a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800508c:	4b88      	ldr	r3, [pc, #544]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_OscConfig+0x64>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e3d9      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	4b81      	ldr	r3, [pc, #516]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <HAL_RCC_OscConfig+0x7e>
 80050b4:	4b7e      	ldr	r3, [pc, #504]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050bc:	e005      	b.n	80050ca <HAL_RCC_OscConfig+0x8a>
 80050be:	4b7c      	ldr	r3, [pc, #496]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d223      	bcs.n	8005116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fd8c 	bl	8005bf0 <RCC_SetFlashLatencyFromMSIRange>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e3ba      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050e2:	4b73      	ldr	r3, [pc, #460]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a72      	ldr	r2, [pc, #456]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050e8:	f043 0308 	orr.w	r3, r3, #8
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	496d      	ldr	r1, [pc, #436]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005100:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	4968      	ldr	r1, [pc, #416]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
 8005114:	e025      	b.n	8005162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005116:	4b66      	ldr	r3, [pc, #408]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a65      	ldr	r2, [pc, #404]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800511c:	f043 0308 	orr.w	r3, r3, #8
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4960      	ldr	r1, [pc, #384]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	495b      	ldr	r1, [pc, #364]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fd4c 	bl	8005bf0 <RCC_SetFlashLatencyFromMSIRange>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e37a      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005162:	f000 fc81 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	4950      	ldr	r1, [pc, #320]	; (80052b4 <HAL_RCC_OscConfig+0x274>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	4a4e      	ldr	r2, [pc, #312]	; (80052b8 <HAL_RCC_OscConfig+0x278>)
 8005180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005182:	4b4e      	ldr	r3, [pc, #312]	; (80052bc <HAL_RCC_OscConfig+0x27c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd f984 	bl	8002494 <HAL_InitTick>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d052      	beq.n	800523c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	e35e      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d032      	beq.n	8005208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051a2:	4b43      	ldr	r3, [pc, #268]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a42      	ldr	r2, [pc, #264]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ae:	f7fd f9c1 	bl	8002534 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b6:	f7fd f9bd 	bl	8002534 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e347      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a35      	ldr	r2, [pc, #212]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051da:	f043 0308 	orr.w	r3, r3, #8
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	4930      	ldr	r1, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	492b      	ldr	r1, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
 8005206:	e01a      	b.n	800523e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005214:	f7fd f98e 	bl	8002534 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800521c:	f7fd f98a 	bl	8002534 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e314      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1dc>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d073      	beq.n	8005332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d005      	beq.n	800525c <HAL_RCC_OscConfig+0x21c>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d10e      	bne.n	8005274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d063      	beq.n	8005330 <HAL_RCC_OscConfig+0x2f0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d15f      	bne.n	8005330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e2f1      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x24c>
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e025      	b.n	80052d8 <HAL_RCC_OscConfig+0x298>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005294:	d114      	bne.n	80052c0 <HAL_RCC_OscConfig+0x280>
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a02      	ldr	r2, [pc, #8]	; (80052b0 <HAL_RCC_OscConfig+0x270>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e013      	b.n	80052d8 <HAL_RCC_OscConfig+0x298>
 80052b0:	40021000 	.word	0x40021000
 80052b4:	08009f5c 	.word	0x08009f5c
 80052b8:	20000014 	.word	0x20000014
 80052bc:	20000018 	.word	0x20000018
 80052c0:	4ba0      	ldr	r3, [pc, #640]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a9f      	ldr	r2, [pc, #636]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b9d      	ldr	r3, [pc, #628]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a9c      	ldr	r2, [pc, #624]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd f928 	bl	8002534 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e8:	f7fd f924 	bl	8002534 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e2ae      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fa:	4b92      	ldr	r3, [pc, #584]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x2a8>
 8005306:	e014      	b.n	8005332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd f914 	bl	8002534 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fd f910 	bl	8002534 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e29a      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005322:	4b88      	ldr	r3, [pc, #544]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x2d0>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d060      	beq.n	8005400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d005      	beq.n	8005350 <HAL_RCC_OscConfig+0x310>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d119      	bne.n	800537e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d116      	bne.n	800537e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005350:	4b7c      	ldr	r3, [pc, #496]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_OscConfig+0x328>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e277      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005368:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	4973      	ldr	r1, [pc, #460]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537c:	e040      	b.n	8005400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d023      	beq.n	80053ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6e      	ldr	r2, [pc, #440]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fd f8cf 	bl	8002534 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539a:	f7fd f8cb 	bl	8002534 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e255      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ac:	4b65      	ldr	r3, [pc, #404]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b8:	4b62      	ldr	r3, [pc, #392]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	495f      	ldr	r1, [pc, #380]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ce:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5c      	ldr	r2, [pc, #368]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fd f8ab 	bl	8002534 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fd f8a7 	bl	8002534 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e231      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03c      	beq.n	8005486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005414:	4b4b      	ldr	r3, [pc, #300]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	4a4a      	ldr	r2, [pc, #296]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd f886 	bl	8002534 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542c:	f7fd f882 	bl	8002534 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e20c      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <HAL_RCC_OscConfig+0x3ec>
 800544c:	e01b      	b.n	8005486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005454:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fd f869 	bl	8002534 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005466:	f7fd f865 	bl	8002534 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e1ef      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ef      	bne.n	8005466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80a6 	beq.w	80055e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6593      	str	r3, [r2, #88]	; 0x58
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c0:	4b21      	ldr	r3, [pc, #132]	; (8005548 <HAL_RCC_OscConfig+0x508>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d118      	bne.n	80054fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_RCC_OscConfig+0x508>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_RCC_OscConfig+0x508>)
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d8:	f7fd f82c 	bl	8002534 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e0:	f7fd f828 	bl	8002534 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e1b2      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <HAL_RCC_OscConfig+0x508>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f0      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <HAL_RCC_OscConfig+0x4d8>
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005516:	e029      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d115      	bne.n	800554c <HAL_RCC_OscConfig+0x50c>
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_OscConfig+0x504>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005540:	e014      	b.n	800556c <HAL_RCC_OscConfig+0x52c>
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	40007000 	.word	0x40007000
 800554c:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a99      	ldr	r2, [pc, #612]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800555c:	4b96      	ldr	r3, [pc, #600]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	4a95      	ldr	r2, [pc, #596]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005564:	f023 0304 	bic.w	r3, r3, #4
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc ffde 	bl	8002534 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	e00a      	b.n	8005592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fc ffda 	bl	8002534 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e162      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ed      	beq.n	800557c <HAL_RCC_OscConfig+0x53c>
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fc ffc7 	bl	8002534 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fc ffc3 	bl	8002534 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e14b      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c0:	4b7d      	ldr	r3, [pc, #500]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ed      	bne.n	80055aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d4:	4b78      	ldr	r3, [pc, #480]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	4a77      	ldr	r2, [pc, #476]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80055da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d03c      	beq.n	8005666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01c      	beq.n	800562e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055f4:	4b70      	ldr	r3, [pc, #448]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80055f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fa:	4a6f      	ldr	r2, [pc, #444]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fc ff96 	bl	8002534 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800560c:	f7fc ff92 	bl	8002534 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e11c      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ef      	beq.n	800560c <HAL_RCC_OscConfig+0x5cc>
 800562c:	e01b      	b.n	8005666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800562e:	4b62      	ldr	r3, [pc, #392]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005634:	4a60      	ldr	r2, [pc, #384]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563e:	f7fc ff79 	bl	8002534 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005646:	f7fc ff75 	bl	8002534 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0ff      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005658:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 800565a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ef      	bne.n	8005646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80f3 	beq.w	8005856 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2b02      	cmp	r3, #2
 8005676:	f040 80c9 	bne.w	800580c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800567a:	4b4f      	ldr	r3, [pc, #316]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f003 0203 	and.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	429a      	cmp	r2, r3
 800568c:	d12c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	3b01      	subs	r3, #1
 800569a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d123      	bne.n	80056e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d11b      	bne.n	80056e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d113      	bne.n	80056e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	3b01      	subs	r3, #1
 80056ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d109      	bne.n	80056e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	3b01      	subs	r3, #1
 80056e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d06b      	beq.n	80057c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d062      	beq.n	80057b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056ee:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0ac      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800570a:	f7fc ff13 	bl	8002534 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005712:	f7fc ff0f 	bl	8002534 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e099      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005724:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	4b21      	ldr	r3, [pc, #132]	; (80057bc <HAL_RCC_OscConfig+0x77c>)
 8005736:	4013      	ands	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005740:	3a01      	subs	r2, #1
 8005742:	0112      	lsls	r2, r2, #4
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800574a:	0212      	lsls	r2, r2, #8
 800574c:	4311      	orrs	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005752:	0852      	lsrs	r2, r2, #1
 8005754:	3a01      	subs	r2, #1
 8005756:	0552      	lsls	r2, r2, #21
 8005758:	4311      	orrs	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800575e:	0852      	lsrs	r2, r2, #1
 8005760:	3a01      	subs	r2, #1
 8005762:	0652      	lsls	r2, r2, #25
 8005764:	4311      	orrs	r1, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800576a:	06d2      	lsls	r2, r2, #27
 800576c:	430a      	orrs	r2, r1
 800576e:	4912      	ldr	r1, [pc, #72]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005770:	4313      	orrs	r3, r2
 8005772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 800577a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 8005786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800578c:	f7fc fed2 	bl	8002534 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005794:	f7fc fece 	bl	8002534 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e058      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <HAL_RCC_OscConfig+0x778>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057b2:	e050      	b.n	8005856 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e04f      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
 80057b8:	40021000 	.word	0x40021000
 80057bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c0:	4b27      	ldr	r3, [pc, #156]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d144      	bne.n	8005856 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057cc:	4b24      	ldr	r3, [pc, #144]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a23      	ldr	r2, [pc, #140]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 80057d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 80057de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057e4:	f7fc fea6 	bl	8002534 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fc fea2 	bl	8002534 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e02c      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fe:	4b18      	ldr	r3, [pc, #96]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x7ac>
 800580a:	e024      	b.n	8005856 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d01f      	beq.n	8005852 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b13      	ldr	r3, [pc, #76]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 8005818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800581c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fc fe89 	bl	8002534 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005826:	f7fc fe85 	bl	8002534 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e00f      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	4905      	ldr	r1, [pc, #20]	; (8005860 <HAL_RCC_OscConfig+0x820>)
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCC_OscConfig+0x824>)
 800584c:	4013      	ands	r3, r2
 800584e:	60cb      	str	r3, [r1, #12]
 8005850:	e001      	b.n	8005856 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	feeefffc 	.word	0xfeeefffc

08005868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0e7      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800587c:	4b75      	ldr	r3, [pc, #468]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d910      	bls.n	80058ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b72      	ldr	r3, [pc, #456]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 0207 	bic.w	r2, r3, #7
 8005892:	4970      	ldr	r1, [pc, #448]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b6e      	ldr	r3, [pc, #440]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0cf      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	4b66      	ldr	r3, [pc, #408]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d908      	bls.n	80058da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c8:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4960      	ldr	r1, [pc, #384]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04c      	beq.n	8005980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ee:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d121      	bne.n	800593e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0a6      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d107      	bne.n	8005916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005906:	4b54      	ldr	r3, [pc, #336]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d115      	bne.n	800593e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e09a      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800591e:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e08e      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800592e:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e086      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800593e:	4b46      	ldr	r3, [pc, #280]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4943      	ldr	r1, [pc, #268]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005950:	f7fc fdf0 	bl	8002534 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc fdec 	bl	8002534 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e06e      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	4b3a      	ldr	r3, [pc, #232]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 020c 	and.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d1eb      	bne.n	8005958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b31      	ldr	r3, [pc, #196]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	429a      	cmp	r2, r3
 800599a:	d208      	bcs.n	80059ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599c:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	492b      	ldr	r1, [pc, #172]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ae:	4b29      	ldr	r3, [pc, #164]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d210      	bcs.n	80059de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 0207 	bic.w	r2, r3, #7
 80059c4:	4923      	ldr	r1, [pc, #140]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCC_ClockConfig+0x1ec>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d001      	beq.n	80059de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e036      	b.n	8005a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ea:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4918      	ldr	r1, [pc, #96]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4910      	ldr	r1, [pc, #64]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a1c:	f000 f824 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCC_ClockConfig+0x1f0>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	490b      	ldr	r1, [pc, #44]	; (8005a5c <HAL_RCC_ClockConfig+0x1f4>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_RCC_ClockConfig+0x1fc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fc fd27 	bl	8002494 <HAL_InitTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40022000 	.word	0x40022000
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	08009f5c 	.word	0x08009f5c
 8005a60:	20000014 	.word	0x20000014
 8005a64:	20000018 	.word	0x20000018

08005a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a76:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a80:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x34>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b0c      	cmp	r3, #12
 8005a94:	d121      	bne.n	8005ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d11e      	bne.n	8005ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a9c:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005aa8:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e005      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ab8:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10d      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d102      	bne.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e004      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aec:	4b23      	ldr	r3, [pc, #140]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d134      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d003      	beq.n	8005b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d003      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0xac>
 8005b0c:	e005      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b10:	617b      	str	r3, [r7, #20]
      break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b14:	4b19      	ldr	r3, [pc, #100]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005b16:	617b      	str	r3, [r7, #20]
      break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	617b      	str	r3, [r7, #20]
      break;
 8005b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	fb03 f202 	mul.w	r2, r3, r2
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	0e5b      	lsrs	r3, r3, #25
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	3301      	adds	r3, #1
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b60:	69bb      	ldr	r3, [r7, #24]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
 8005b74:	08009f74 	.word	0x08009f74
 8005b78:	00f42400 	.word	0x00f42400
 8005b7c:	007a1200 	.word	0x007a1200

08005b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000014 	.word	0x20000014

08005b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b9c:	f7ff fff0 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4904      	ldr	r1, [pc, #16]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	08009f6c 	.word	0x08009f6c

08005bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bc8:	f7ff ffda 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0adb      	lsrs	r3, r3, #11
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4904      	ldr	r1, [pc, #16]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40021000 	.word	0x40021000
 8005bec:	08009f6c 	.word	0x08009f6c

08005bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c08:	f7ff f9b6 	bl	8004f78 <HAL_PWREx_GetVoltageRange>
 8005c0c:	6178      	str	r0, [r7, #20]
 8005c0e:	e014      	b.n	8005c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	4a24      	ldr	r2, [pc, #144]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c28:	f7ff f9a6 	bl	8004f78 <HAL_PWREx_GetVoltageRange>
 8005c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c40:	d10b      	bne.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d919      	bls.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8005c4c:	d902      	bls.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c4e:	2302      	movs	r3, #2
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e013      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c54:	2301      	movs	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e010      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d902      	bls.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c60:	2303      	movs	r3, #3
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e00a      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d102      	bne.n	8005c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e004      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d101      	bne.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c78:	2301      	movs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 0207 	bic.w	r2, r3, #7
 8005c84:	4909      	ldr	r1, [pc, #36]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d001      	beq.n	8005c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40022000 	.word	0x40022000

08005cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d031      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cd4:	d01a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005cd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cda:	d814      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ce4:	d10f      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	4a5c      	ldr	r2, [pc, #368]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cf2:	e00c      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f9de 	bl	80060bc <RCCEx_PLLSAI1_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d04:	e003      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	74fb      	strb	r3, [r7, #19]
      break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d14:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	494e      	ldr	r1, [pc, #312]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d2a:	e001      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 809e 	beq.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d42:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d58:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6593      	str	r3, [r2, #88]	; 0x58
 8005d64:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d70:	2301      	movs	r3, #1
 8005d72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d74:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d80:	f7fc fbd8 	bl	8002534 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d86:	e009      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d88:	f7fc fbd4 	bl	8002534 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	74fb      	strb	r3, [r7, #19]
        break;
 8005d9a:	e005      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d9c:	4b30      	ldr	r3, [pc, #192]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0ef      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005da8:	7cfb      	ldrb	r3, [r7, #19]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d15a      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dae:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01e      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d019      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dd6:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005de6:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d016      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fc fb94 	bl	8002534 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e0e:	e00b      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e10:	f7fc fb90 	bl	8002534 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d902      	bls.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	74fb      	strb	r3, [r7, #19]
            break;
 8005e26:	e006      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ec      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005e36:	7cfb      	ldrb	r3, [r7, #19]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4a:	4904      	ldr	r1, [pc, #16]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e52:	e009      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e54:	7cfb      	ldrb	r3, [r7, #19]
 8005e56:	74bb      	strb	r3, [r7, #18]
 8005e58:	e006      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	7cfb      	ldrb	r3, [r7, #19]
 8005e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e68:	7c7b      	ldrb	r3, [r7, #17]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6e:	4b8a      	ldr	r3, [pc, #552]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	4a89      	ldr	r2, [pc, #548]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e86:	4b84      	ldr	r3, [pc, #528]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f023 0203 	bic.w	r2, r3, #3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4980      	ldr	r1, [pc, #512]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ea8:	4b7b      	ldr	r3, [pc, #492]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f023 020c 	bic.w	r2, r3, #12
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	4978      	ldr	r1, [pc, #480]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eca:	4b73      	ldr	r3, [pc, #460]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	496f      	ldr	r1, [pc, #444]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eec:	4b6a      	ldr	r3, [pc, #424]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	4967      	ldr	r1, [pc, #412]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f0e:	4b62      	ldr	r3, [pc, #392]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	495e      	ldr	r1, [pc, #376]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f30:	4b59      	ldr	r3, [pc, #356]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	4956      	ldr	r1, [pc, #344]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f52:	4b51      	ldr	r3, [pc, #324]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	494d      	ldr	r1, [pc, #308]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d028      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f74:	4b48      	ldr	r3, [pc, #288]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	4945      	ldr	r1, [pc, #276]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b40      	ldr	r3, [pc, #256]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
 8005fa0:	e011      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005faa:	d10c      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f882 	bl	80060bc <RCCEx_PLLSAI1_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fbc:	7cfb      	ldrb	r3, [r7, #19]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d028      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	492d      	ldr	r1, [pc, #180]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff0:	d106      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff2:	4b29      	ldr	r3, [pc, #164]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	4a28      	ldr	r2, [pc, #160]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffc:	60d3      	str	r3, [r2, #12]
 8005ffe:	e011      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006008:	d10c      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	2101      	movs	r1, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f853 	bl	80060bc <RCCEx_PLLSAI1_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800601a:	7cfb      	ldrb	r3, [r7, #19]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01c      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	4916      	ldr	r1, [pc, #88]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800604e:	d10c      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f830 	bl	80060bc <RCCEx_PLLSAI1_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006066:	7cfb      	ldrb	r3, [r7, #19]
 8006068:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006084:	4904      	ldr	r1, [pc, #16]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800608c:	7cbb      	ldrb	r3, [r7, #18]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40021000 	.word	0x40021000

0800609c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80060a6:	f043 0304 	orr.w	r3, r3, #4
 80060aa:	6013      	str	r3, [r2, #0]
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40021000 	.word	0x40021000

080060bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060ca:	4b74      	ldr	r3, [pc, #464]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060d6:	4b71      	ldr	r3, [pc, #452]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0203 	and.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d10d      	bne.n	8006102 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
       ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060ee:	4b6b      	ldr	r3, [pc, #428]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
       ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d047      	beq.n	8006192 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	e044      	b.n	8006192 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b03      	cmp	r3, #3
 800610e:	d018      	beq.n	8006142 <RCCEx_PLLSAI1_Config+0x86>
 8006110:	2b03      	cmp	r3, #3
 8006112:	d825      	bhi.n	8006160 <RCCEx_PLLSAI1_Config+0xa4>
 8006114:	2b01      	cmp	r3, #1
 8006116:	d002      	beq.n	800611e <RCCEx_PLLSAI1_Config+0x62>
 8006118:	2b02      	cmp	r3, #2
 800611a:	d009      	beq.n	8006130 <RCCEx_PLLSAI1_Config+0x74>
 800611c:	e020      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800611e:	4b5f      	ldr	r3, [pc, #380]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11d      	bne.n	8006166 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800612e:	e01a      	b.n	8006166 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006130:	4b5a      	ldr	r3, [pc, #360]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006138:	2b00      	cmp	r3, #0
 800613a:	d116      	bne.n	800616a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006140:	e013      	b.n	800616a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006142:	4b56      	ldr	r3, [pc, #344]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800614e:	4b53      	ldr	r3, [pc, #332]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800615e:	e006      	b.n	800616e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	e004      	b.n	8006170 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800616e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006176:	4b49      	ldr	r3, [pc, #292]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6819      	ldr	r1, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	3b01      	subs	r3, #1
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	430b      	orrs	r3, r1
 800618c:	4943      	ldr	r1, [pc, #268]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d17c      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006198:	4b40      	ldr	r3, [pc, #256]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3f      	ldr	r2, [pc, #252]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 800619e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a4:	f7fc f9c6 	bl	8002534 <HAL_GetTick>
 80061a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061aa:	e009      	b.n	80061c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061ac:	f7fc f9c2 	bl	8002534 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d902      	bls.n	80061c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
        break;
 80061be:	e005      	b.n	80061cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061c0:	4b36      	ldr	r3, [pc, #216]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ef      	bne.n	80061ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d15f      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d110      	bne.n	80061fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6892      	ldr	r2, [r2, #8]
 80061e8:	0211      	lsls	r1, r2, #8
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68d2      	ldr	r2, [r2, #12]
 80061ee:	06d2      	lsls	r2, r2, #27
 80061f0:	430a      	orrs	r2, r1
 80061f2:	492a      	ldr	r1, [pc, #168]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	610b      	str	r3, [r1, #16]
 80061f8:	e027      	b.n	800624a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d112      	bne.n	8006226 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6892      	ldr	r2, [r2, #8]
 8006210:	0211      	lsls	r1, r2, #8
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6912      	ldr	r2, [r2, #16]
 8006216:	0852      	lsrs	r2, r2, #1
 8006218:	3a01      	subs	r2, #1
 800621a:	0552      	lsls	r2, r2, #21
 800621c:	430a      	orrs	r2, r1
 800621e:	491f      	ldr	r1, [pc, #124]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
 8006224:	e011      	b.n	800624a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800622e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6892      	ldr	r2, [r2, #8]
 8006236:	0211      	lsls	r1, r2, #8
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6952      	ldr	r2, [r2, #20]
 800623c:	0852      	lsrs	r2, r2, #1
 800623e:	3a01      	subs	r2, #1
 8006240:	0652      	lsls	r2, r2, #25
 8006242:	430a      	orrs	r2, r1
 8006244:	4915      	ldr	r1, [pc, #84]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006246:	4313      	orrs	r3, r2
 8006248:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006254:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006256:	f7fc f96d 	bl	8002534 <HAL_GetTick>
 800625a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800625c:	e009      	b.n	8006272 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800625e:	f7fc f969 	bl	8002534 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d902      	bls.n	8006272 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	73fb      	strb	r3, [r7, #15]
          break;
 8006270:	e005      	b.n	800627e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ef      	beq.n	800625e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	4903      	ldr	r1, [pc, #12]	; (800629c <RCCEx_PLLSAI1_Config+0x1e0>)
 800628e:	4313      	orrs	r3, r2
 8006290:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000

080062a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e095      	b.n	80063de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c2:	d009      	beq.n	80062d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	61da      	str	r2, [r3, #28]
 80062ca:	e005      	b.n	80062d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fc7a 	bl	8001bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006318:	d902      	bls.n	8006320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e002      	b.n	8006326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800632e:	d007      	beq.n	8006340 <HAL_SPI_Init+0xa0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	ea42 0103 	orr.w	r1, r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	f003 0204 	and.w	r2, r3, #4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063bc:	ea42 0103 	orr.w	r1, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b088      	sub	sp, #32
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Transmit+0x22>
 8006404:	2302      	movs	r3, #2
 8006406:	e158      	b.n	80066ba <HAL_SPI_Transmit+0x2d4>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006410:	f7fc f890 	bl	8002534 <HAL_GetTick>
 8006414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006426:	2302      	movs	r3, #2
 8006428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800642a:	e13d      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_Transmit+0x52>
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800643c:	e134      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d10f      	bne.n	80064aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d0:	d94b      	bls.n	800656a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0xfa>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d13e      	bne.n	800655e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006504:	e02b      	b.n	800655e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d112      	bne.n	800653a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006538:	e011      	b.n	800655e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653a:	f7fb fffb 	bl	8002534 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d803      	bhi.n	8006552 <HAL_SPI_Transmit+0x16c>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d102      	bne.n	8006558 <HAL_SPI_Transmit+0x172>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800655c:	e0a4      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ce      	bne.n	8006506 <HAL_SPI_Transmit+0x120>
 8006568:	e07c      	b.n	8006664 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x192>
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d170      	bne.n	800665a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d912      	bls.n	80065a8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b02      	subs	r3, #2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065a6:	e058      	b.n	800665a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065ce:	e044      	b.n	800665a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d12b      	bne.n	8006636 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d912      	bls.n	800660e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b02      	subs	r3, #2
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800660c:	e025      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006634:	e011      	b.n	800665a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006636:	f7fb ff7d 	bl	8002534 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d803      	bhi.n	800664e <HAL_SPI_Transmit+0x268>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d102      	bne.n	8006654 <HAL_SPI_Transmit+0x26e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006658:	e026      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1b5      	bne.n	80065d0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f949 	bl	8006900 <SPI_EndRxTxTransaction>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e000      	b.n	80066a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066d4:	f7fb ff2e 	bl	8002534 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4413      	add	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066e4:	f7fb ff26 	bl	8002534 <HAL_GetTick>
 80066e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ea:	4b39      	ldr	r3, [pc, #228]	; (80067d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	015b      	lsls	r3, r3, #5
 80066f0:	0d1b      	lsrs	r3, r3, #20
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066fa:	e054      	b.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d050      	beq.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006704:	f7fb ff16 	bl	8002534 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	429a      	cmp	r2, r3
 8006712:	d902      	bls.n	800671a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d13d      	bne.n	8006796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006732:	d111      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	d004      	beq.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d107      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006760:	d10f      	bne.n	8006782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e017      	b.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bf0c      	ite	eq
 80067b6:	2301      	moveq	r3, #1
 80067b8:	2300      	movne	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d19b      	bne.n	80066fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000014 	.word	0x20000014

080067d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067e6:	f7fb fea5 	bl	8002534 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	4413      	add	r3, r2
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80067f6:	f7fb fe9d 	bl	8002534 <HAL_GetTick>
 80067fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006804:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	00da      	lsls	r2, r3, #3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	0d1b      	lsrs	r3, r3, #20
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800681c:	e060      	b.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006824:	d107      	bne.n	8006836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d050      	beq.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800683e:	f7fb fe79 	bl	8002534 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	429a      	cmp	r2, r3
 800684c:	d902      	bls.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d13d      	bne.n	80068d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686c:	d111      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006876:	d004      	beq.n	8006882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d107      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689a:	d10f      	bne.n	80068bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e010      	b.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	3b01      	subs	r3, #1
 80068de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d196      	bne.n	800681e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000014 	.word	0x20000014

08006900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff5b 	bl	80067d4 <SPI_WaitFifoStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e027      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2200      	movs	r2, #0
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fec0 	bl	80066c4 <SPI_WaitFlagStateUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e014      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2200      	movs	r2, #0
 8006962:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff ff34 	bl	80067d4 <SPI_WaitFifoStateUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e000      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e049      	b.n	8006a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb fbe0 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f000 feae 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d001      	beq.n	8006a54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e033      	b.n	8006abc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_TIM_Base_Start+0x8c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_TIM_Base_Start+0x3e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIM_Base_Start+0x3e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <HAL_TIM_Base_Start+0x90>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d115      	bne.n	8006aa6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <HAL_TIM_Base_Start+0x94>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	d015      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x7c>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a92:	d011      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa4:	e008      	b.n	8006ab8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0201 	orr.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e000      	b.n	8006aba <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	00010007 	.word	0x00010007

08006ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d001      	beq.n	8006aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e03b      	b.n	8006b64 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIM_Base_Start_IT+0x4e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d004      	beq.n	8006b22 <HAL_TIM_Base_Start_IT+0x4e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d115      	bne.n	8006b4e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <HAL_TIM_Base_Start_IT+0xa4>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b06      	cmp	r3, #6
 8006b32:	d015      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x8c>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3a:	d011      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4c:	e008      	b.n	8006b60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e000      	b.n	8006b62 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40014000 	.word	0x40014000
 8006b78:	00010007 	.word	0x00010007

08006b7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	f240 4344 	movw	r3, #1092	; 0x444
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e049      	b.n	8006c80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f841 	bl	8006c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f000 fd87 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e049      	b.n	8006d42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f841 	bl	8006d4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 fd26 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_IC_Start_IT+0x1e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e023      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_IC_Start_IT+0x2e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e01b      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_IC_Start_IT+0x3e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	e013      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_IC_Start_IT+0x4e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_IC_Start_IT+0x5e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e003      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <HAL_TIM_IC_Start_IT+0x78>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e013      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d104      	bne.n	8006de8 <HAL_TIM_IC_Start_IT+0x88>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	e00b      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d104      	bne.n	8006df8 <HAL_TIM_IC_Start_IT+0x98>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e003      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d102      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e08:	7b7b      	ldrb	r3, [r7, #13]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0c9      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_IC_Start_IT+0xc2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	e023      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_IT+0xd2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	e01b      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start_IT+0xe2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e40:	e013      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0xf2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e50:	e00b      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_IC_Start_IT+0x102>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e60:	e003      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_IC_Start_IT+0x11a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e78:	e013      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_IC_Start_IT+0x12a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_IC_Start_IT+0x13a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e98:	e003      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d841      	bhi.n	8006f2c <HAL_TIM_IC_Start_IT+0x1cc>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <HAL_TIM_IC_Start_IT+0x150>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f2d 	.word	0x08006f2d
 8006ebc:	08006f2d 	.word	0x08006f2d
 8006ec0:	08006ef7 	.word	0x08006ef7
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f1b 	.word	0x08006f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0202 	orr.w	r2, r2, #2
 8006ef2:	60da      	str	r2, [r3, #12]
      break;
 8006ef4:	e01d      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0204 	orr.w	r2, r2, #4
 8006f04:	60da      	str	r2, [r3, #12]
      break;
 8006f06:	e014      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0208 	orr.w	r2, r2, #8
 8006f16:	60da      	str	r2, [r3, #12]
      break;
 8006f18:	e00b      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0210 	orr.w	r2, r2, #16
 8006f28:	60da      	str	r2, [r3, #12]
      break;
 8006f2a:	e002      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d135      	bne.n	8006fa4 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f87b 	bl	800803c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <HAL_TIM_IC_Start_IT+0x250>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d009      	beq.n	8006f64 <HAL_TIM_IC_Start_IT+0x204>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f58:	d004      	beq.n	8006f64 <HAL_TIM_IC_Start_IT+0x204>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <HAL_TIM_IC_Start_IT+0x254>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d115      	bne.n	8006f90 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <HAL_TIM_IC_Start_IT+0x258>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d015      	beq.n	8006fa2 <HAL_TIM_IC_Start_IT+0x242>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7c:	d011      	beq.n	8006fa2 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0201 	orr.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8e:	e008      	b.n	8006fa2 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e000      	b.n	8006fa4 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	00010007 	.word	0x00010007

08006fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d122      	bne.n	8007018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d11b      	bne.n	8007018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0202 	mvn.w	r2, #2
 8006fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa fcfe 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fb71 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb78 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b04      	cmp	r3, #4
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b04      	cmp	r3, #4
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0204 	mvn.w	r2, #4
 800703c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fa fcd4 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb47 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb4e 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b08      	cmp	r3, #8
 8007078:	d122      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d11b      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0208 	mvn.w	r2, #8
 8007090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2204      	movs	r2, #4
 8007096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fa fcaa 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 80070ac:	e005      	b.n	80070ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb1d 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fb24 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b10      	cmp	r3, #16
 80070cc:	d122      	bne.n	8007114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d11b      	bne.n	8007114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0210 	mvn.w	r2, #16
 80070e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2208      	movs	r2, #8
 80070ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fa fc80 	bl	8001a00 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 faf3 	bl	80076ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fafa 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d10e      	bne.n	8007140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d107      	bne.n	8007140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0201 	mvn.w	r2, #1
 8007138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fa fd08 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714a:	2b80      	cmp	r3, #128	; 0x80
 800714c:	d10e      	bne.n	800716c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007158:	2b80      	cmp	r3, #128	; 0x80
 800715a:	d107      	bne.n	800716c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 f876 	bl	8008258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717a:	d10e      	bne.n	800719a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d107      	bne.n	800719a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f869 	bl	800826c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d10e      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d107      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 faa8 	bl	8007716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d10e      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d107      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f06f 0220 	mvn.w	r2, #32
 80071ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 f829 	bl	8008244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b086      	sub	sp, #24
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007214:	2302      	movs	r3, #2
 8007216:	e088      	b.n	800732a <HAL_TIM_IC_ConfigChannel+0x130>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d11b      	bne.n	800725e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007236:	f000 fd5b 	bl	8007cf0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 020c 	bic.w	r2, r2, #12
 8007248:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6999      	ldr	r1, [r3, #24]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	619a      	str	r2, [r3, #24]
 800725c:	e060      	b.n	8007320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d11c      	bne.n	800729e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007274:	f000 fdc1 	bl	8007dfa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007286:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6999      	ldr	r1, [r3, #24]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	021a      	lsls	r2, r3, #8
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	e040      	b.n	8007320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d11b      	bne.n	80072dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80072b4:	f000 fe0e 	bl	8007ed4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 020c 	bic.w	r2, r2, #12
 80072c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69d9      	ldr	r1, [r3, #28]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	61da      	str	r2, [r3, #28]
 80072da:	e021      	b.n	8007320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b0c      	cmp	r3, #12
 80072e0:	d11c      	bne.n	800731c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80072f2:	f000 fe2b 	bl	8007f4c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007304:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	021a      	lsls	r2, r3, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	61da      	str	r2, [r3, #28]
 800731a:	e001      	b.n	8007320 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e0ff      	b.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b14      	cmp	r3, #20
 800735e:	f200 80f0 	bhi.w	8007542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007543 	.word	0x08007543
 8007370:	08007543 	.word	0x08007543
 8007374:	08007543 	.word	0x08007543
 8007378:	080073fd 	.word	0x080073fd
 800737c:	08007543 	.word	0x08007543
 8007380:	08007543 	.word	0x08007543
 8007384:	08007543 	.word	0x08007543
 8007388:	0800743f 	.word	0x0800743f
 800738c:	08007543 	.word	0x08007543
 8007390:	08007543 	.word	0x08007543
 8007394:	08007543 	.word	0x08007543
 8007398:	0800747f 	.word	0x0800747f
 800739c:	08007543 	.word	0x08007543
 80073a0:	08007543 	.word	0x08007543
 80073a4:	08007543 	.word	0x08007543
 80073a8:	080074c1 	.word	0x080074c1
 80073ac:	08007543 	.word	0x08007543
 80073b0:	08007543 	.word	0x08007543
 80073b4:	08007543 	.word	0x08007543
 80073b8:	08007501 	.word	0x08007501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa16 	bl	80077f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e0a5      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fa72 	bl	80078ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e084      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 facb 	bl	80079e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e064      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fb23 	bl	8007ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e043      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fb60 	bl	8007b8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0204 	bic.w	r2, r2, #4
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074fe:	e023      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fb98 	bl	8007c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007540:	e002      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
      break;
 8007546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIM_ConfigClockSource+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e0b6      	b.n	80076e6 <HAL_TIM_ConfigClockSource+0x18a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800759a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b4:	d03e      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0xd8>
 80075b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ba:	f200 8087 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c2:	f000 8086 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x176>
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ca:	d87f      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075cc:	2b70      	cmp	r3, #112	; 0x70
 80075ce:	d01a      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0xaa>
 80075d0:	2b70      	cmp	r3, #112	; 0x70
 80075d2:	d87b      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075d4:	2b60      	cmp	r3, #96	; 0x60
 80075d6:	d050      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x11e>
 80075d8:	2b60      	cmp	r3, #96	; 0x60
 80075da:	d877      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075dc:	2b50      	cmp	r3, #80	; 0x50
 80075de:	d03c      	beq.n	800765a <HAL_TIM_ConfigClockSource+0xfe>
 80075e0:	2b50      	cmp	r3, #80	; 0x50
 80075e2:	d873      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d058      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x13e>
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d86f      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d064      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x15e>
 80075f0:	2b30      	cmp	r3, #48	; 0x30
 80075f2:	d86b      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d060      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x15e>
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d867      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d05c      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x15e>
 8007600:	2b10      	cmp	r3, #16
 8007602:	d05a      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x15e>
 8007604:	e062      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007616:	f000 fcf1 	bl	8007ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	609a      	str	r2, [r3, #8]
      break;
 8007632:	e04f      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007644:	f000 fcda 	bl	8007ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007656:	609a      	str	r2, [r3, #8]
      break;
 8007658:	e03c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fb98 	bl	8007d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2150      	movs	r1, #80	; 0x50
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fca7 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 8007678:	e02c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007686:	461a      	mov	r2, r3
 8007688:	f000 fbf4 	bl	8007e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2160      	movs	r1, #96	; 0x60
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fc97 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 8007698:	e01c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 fb78 	bl	8007d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fc87 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 80076b8:	e00c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f000 fc7e 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 80076ca:	e003      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
      break;
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x20>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d108      	bne.n	800775e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00b      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d007      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <TIM_Base_SetConfig+0xc0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d003      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <TIM_Base_SetConfig+0xc4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d108      	bne.n	8007790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_Base_SetConfig+0xa0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <TIM_Base_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_Base_SetConfig+0xa0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <TIM_Base_SetConfig+0xc4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d103      	bne.n	80077d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	615a      	str	r2, [r3, #20]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400

080077f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0302 	bic.w	r3, r3, #2
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <TIM_OC1_SetConfig+0xec>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC1_SetConfig+0x70>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <TIM_OC1_SetConfig+0xf0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC1_SetConfig+0x70>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <TIM_OC1_SetConfig+0xf4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d10c      	bne.n	800787e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f023 0308 	bic.w	r3, r3, #8
 800786a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f023 0304 	bic.w	r3, r3, #4
 800787c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <TIM_OC1_SetConfig+0xec>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_OC1_SetConfig+0xa2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <TIM_OC1_SetConfig+0xf0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_OC1_SetConfig+0xa2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_OC1_SetConfig+0xf4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d111      	bne.n	80078ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	621a      	str	r2, [r3, #32]
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40014400 	.word	0x40014400

080078ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f023 0210 	bic.w	r2, r3, #16
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <TIM_OC2_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10d      	bne.n	800796c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <TIM_OC2_SetConfig+0xe8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d007      	beq.n	8007984 <TIM_OC2_SetConfig+0x98>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <TIM_OC2_SetConfig+0xec>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_OC2_SetConfig+0x98>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <TIM_OC2_SetConfig+0xf0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d113      	bne.n	80079ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40012c00 	.word	0x40012c00
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400

080079e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <TIM_OC3_SetConfig+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10d      	bne.n	8007a5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <TIM_OC3_SetConfig+0xe4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC3_SetConfig+0x96>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <TIM_OC3_SetConfig+0xe8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC3_SetConfig+0x96>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <TIM_OC3_SetConfig+0xec>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d113      	bne.n	8007a9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400

08007ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	031b      	lsls	r3, r3, #12
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <TIM_OC4_SetConfig+0xb0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d007      	beq.n	8007b44 <TIM_OC4_SetConfig+0x74>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <TIM_OC4_SetConfig+0xb4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_OC4_SetConfig+0x74>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <TIM_OC4_SetConfig+0xb8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d109      	bne.n	8007b58 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400

08007b8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <TIM_OC5_SetConfig+0xa4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d007      	beq.n	8007bf6 <TIM_OC5_SetConfig+0x6a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <TIM_OC5_SetConfig+0xa8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_OC5_SetConfig+0x6a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	; (8007c38 <TIM_OC5_SetConfig+0xac>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d109      	bne.n	8007c0a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40014400 	.word	0x40014400

08007c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a14      	ldr	r2, [pc, #80]	; (8007ce4 <TIM_OC6_SetConfig+0xa8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x6c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <TIM_OC6_SetConfig+0xac>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x6c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a12      	ldr	r2, [pc, #72]	; (8007cec <TIM_OC6_SetConfig+0xb0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400

08007cf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f023 0201 	bic.w	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a1e      	ldr	r2, [pc, #120]	; (8007d94 <TIM_TI1_SetConfig+0xa4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d007      	beq.n	8007d2e <TIM_TI1_SetConfig+0x3e>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d24:	d003      	beq.n	8007d2e <TIM_TI1_SetConfig+0x3e>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <TIM_TI1_SetConfig+0xa8>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d101      	bne.n	8007d32 <TIM_TI1_SetConfig+0x42>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <TIM_TI1_SetConfig+0x44>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0303 	bic.w	r3, r3, #3
 8007d3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e003      	b.n	8007d52 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f023 030a 	bic.w	r3, r3, #10
 8007d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f003 030a 	and.w	r3, r3, #10
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40014000 	.word	0x40014000

08007d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 030a 	bic.w	r3, r3, #10
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f023 0210 	bic.w	r2, r3, #16
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f023 0210 	bic.w	r2, r3, #16
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	031b      	lsls	r3, r3, #12
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	621a      	str	r2, [r3, #32]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007f24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	621a      	str	r2, [r3, #32]
}
 8007f40:	bf00      	nop
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	031b      	lsls	r3, r3, #12
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	031b      	lsls	r3, r3, #12
 8007fa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	621a      	str	r2, [r3, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f043 0307 	orr.w	r3, r3, #7
 8007fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	431a      	orrs	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4313      	orrs	r3, r2
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	609a      	str	r2, [r3, #8]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	2201      	movs	r2, #1
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	43db      	mvns	r3, r3
 800805e:	401a      	ands	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	fa01 f303 	lsl.w	r3, r1, r3
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800809c:	2302      	movs	r3, #2
 800809e:	e04f      	b.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a21      	ldr	r2, [pc, #132]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d108      	bne.n	80080dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a14      	ldr	r2, [pc, #80]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008108:	d004      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a10      	ldr	r2, [pc, #64]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10c      	bne.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4313      	orrs	r3, r2
 8008124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40014000 	.word	0x40014000

08008154 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800816c:	2302      	movs	r3, #2
 800816e:	e060      	b.n	8008232 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a14      	ldr	r2, [pc, #80]	; (8008240 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d115      	bne.n	8008220 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	051b      	lsls	r3, r3, #20
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40012c00 	.word	0x40012c00

08008244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e040      	b.n	8008314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fa f85c 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2224      	movs	r2, #36	; 0x24
 80082ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f82c 	bl	800831c <UART_SetConfig>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e022      	b.n	8008314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa4c 	bl	8008774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fad3 	bl	80088b8 <UART_CheckIdleState>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800831c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008320:	b08a      	sub	sp, #40	; 0x28
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	431a      	orrs	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	431a      	orrs	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4bb4      	ldr	r3, [pc, #720]	; (800861c <UART_SetConfig+0x300>)
 800834c:	4013      	ands	r3, r2
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008354:	430b      	orrs	r3, r1
 8008356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4aa9      	ldr	r2, [pc, #676]	; (8008620 <UART_SetConfig+0x304>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008384:	4313      	orrs	r3, r2
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4aa0      	ldr	r2, [pc, #640]	; (8008624 <UART_SetConfig+0x308>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d126      	bne.n	80083f4 <UART_SetConfig+0xd8>
 80083a6:	4ba0      	ldr	r3, [pc, #640]	; (8008628 <UART_SetConfig+0x30c>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	f003 0303 	and.w	r3, r3, #3
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d81b      	bhi.n	80083ec <UART_SetConfig+0xd0>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <UART_SetConfig+0xa0>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	080083cd 	.word	0x080083cd
 80083c0:	080083dd 	.word	0x080083dd
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d2:	e080      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80083d4:	2302      	movs	r3, #2
 80083d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083da:	e07c      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80083dc:	2304      	movs	r3, #4
 80083de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e2:	e078      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80083e4:	2308      	movs	r3, #8
 80083e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ea:	e074      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80083ec:	2310      	movs	r3, #16
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f2:	e070      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a8c      	ldr	r2, [pc, #560]	; (800862c <UART_SetConfig+0x310>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d138      	bne.n	8008470 <UART_SetConfig+0x154>
 80083fe:	4b8a      	ldr	r3, [pc, #552]	; (8008628 <UART_SetConfig+0x30c>)
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	f003 030c 	and.w	r3, r3, #12
 8008408:	2b0c      	cmp	r3, #12
 800840a:	d82d      	bhi.n	8008468 <UART_SetConfig+0x14c>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0xf8>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	08008449 	.word	0x08008449
 8008418:	08008469 	.word	0x08008469
 800841c:	08008469 	.word	0x08008469
 8008420:	08008469 	.word	0x08008469
 8008424:	08008459 	.word	0x08008459
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
 8008430:	08008469 	.word	0x08008469
 8008434:	08008451 	.word	0x08008451
 8008438:	08008469 	.word	0x08008469
 800843c:	08008469 	.word	0x08008469
 8008440:	08008469 	.word	0x08008469
 8008444:	08008461 	.word	0x08008461
 8008448:	2300      	movs	r3, #0
 800844a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800844e:	e042      	b.n	80084d6 <UART_SetConfig+0x1ba>
 8008450:	2302      	movs	r3, #2
 8008452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008456:	e03e      	b.n	80084d6 <UART_SetConfig+0x1ba>
 8008458:	2304      	movs	r3, #4
 800845a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800845e:	e03a      	b.n	80084d6 <UART_SetConfig+0x1ba>
 8008460:	2308      	movs	r3, #8
 8008462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008466:	e036      	b.n	80084d6 <UART_SetConfig+0x1ba>
 8008468:	2310      	movs	r3, #16
 800846a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846e:	e032      	b.n	80084d6 <UART_SetConfig+0x1ba>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a6a      	ldr	r2, [pc, #424]	; (8008620 <UART_SetConfig+0x304>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d12a      	bne.n	80084d0 <UART_SetConfig+0x1b4>
 800847a:	4b6b      	ldr	r3, [pc, #428]	; (8008628 <UART_SetConfig+0x30c>)
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008488:	d01a      	beq.n	80084c0 <UART_SetConfig+0x1a4>
 800848a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848e:	d81b      	bhi.n	80084c8 <UART_SetConfig+0x1ac>
 8008490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008494:	d00c      	beq.n	80084b0 <UART_SetConfig+0x194>
 8008496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849a:	d815      	bhi.n	80084c8 <UART_SetConfig+0x1ac>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <UART_SetConfig+0x18c>
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d008      	beq.n	80084b8 <UART_SetConfig+0x19c>
 80084a6:	e00f      	b.n	80084c8 <UART_SetConfig+0x1ac>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ae:	e012      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80084b0:	2302      	movs	r3, #2
 80084b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b6:	e00e      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084be:	e00a      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80084c0:	2308      	movs	r3, #8
 80084c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c6:	e006      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80084c8:	2310      	movs	r3, #16
 80084ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ce:	e002      	b.n	80084d6 <UART_SetConfig+0x1ba>
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a51      	ldr	r2, [pc, #324]	; (8008620 <UART_SetConfig+0x304>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d17a      	bne.n	80085d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d824      	bhi.n	8008532 <UART_SetConfig+0x216>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x1d4>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008533 	.word	0x08008533
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008523 	.word	0x08008523
 8008504:	08008533 	.word	0x08008533
 8008508:	08008533 	.word	0x08008533
 800850c:	08008533 	.word	0x08008533
 8008510:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fd fb40 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 8008518:	61f8      	str	r0, [r7, #28]
        break;
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b44      	ldr	r3, [pc, #272]	; (8008630 <UART_SetConfig+0x314>)
 800851e:	61fb      	str	r3, [r7, #28]
        break;
 8008520:	e00d      	b.n	800853e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fd faa1 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8008526:	61f8      	str	r0, [r7, #28]
        break;
 8008528:	e009      	b.n	800853e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852e:	61fb      	str	r3, [r7, #28]
        break;
 8008530:	e005      	b.n	800853e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800853c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8107 	beq.w	8008754 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	4413      	add	r3, r2
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	429a      	cmp	r2, r3
 8008554:	d305      	bcc.n	8008562 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	429a      	cmp	r2, r3
 8008560:	d903      	bls.n	800856a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008568:	e0f4      	b.n	8008754 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	2200      	movs	r2, #0
 800856e:	461c      	mov	r4, r3
 8008570:	4615      	mov	r5, r2
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	022b      	lsls	r3, r5, #8
 800857c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008580:	0222      	lsls	r2, r4, #8
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6849      	ldr	r1, [r1, #4]
 8008586:	0849      	lsrs	r1, r1, #1
 8008588:	2000      	movs	r0, #0
 800858a:	4688      	mov	r8, r1
 800858c:	4681      	mov	r9, r0
 800858e:	eb12 0a08 	adds.w	sl, r2, r8
 8008592:	eb43 0b09 	adc.w	fp, r3, r9
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	f7f8 f918 	bl	80007dc <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4613      	mov	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ba:	d308      	bcc.n	80085ce <UART_SetConfig+0x2b2>
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c2:	d204      	bcs.n	80085ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	60da      	str	r2, [r3, #12]
 80085cc:	e0c2      	b.n	8008754 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085d4:	e0be      	b.n	8008754 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d16a      	bne.n	80086b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80085e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d834      	bhi.n	8008652 <UART_SetConfig+0x336>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x2d4>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008615 	.word	0x08008615
 80085f4:	08008635 	.word	0x08008635
 80085f8:	0800863d 	.word	0x0800863d
 80085fc:	08008653 	.word	0x08008653
 8008600:	08008643 	.word	0x08008643
 8008604:	08008653 	.word	0x08008653
 8008608:	08008653 	.word	0x08008653
 800860c:	08008653 	.word	0x08008653
 8008610:	0800864b 	.word	0x0800864b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd fac0 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 8008618:	61f8      	str	r0, [r7, #28]
        break;
 800861a:	e020      	b.n	800865e <UART_SetConfig+0x342>
 800861c:	efff69f3 	.word	0xefff69f3
 8008620:	40008000 	.word	0x40008000
 8008624:	40013800 	.word	0x40013800
 8008628:	40021000 	.word	0x40021000
 800862c:	40004400 	.word	0x40004400
 8008630:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008634:	f7fd fac6 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 8008638:	61f8      	str	r0, [r7, #28]
        break;
 800863a:	e010      	b.n	800865e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800863c:	4b4c      	ldr	r3, [pc, #304]	; (8008770 <UART_SetConfig+0x454>)
 800863e:	61fb      	str	r3, [r7, #28]
        break;
 8008640:	e00d      	b.n	800865e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008642:	f7fd fa11 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8008646:	61f8      	str	r0, [r7, #28]
        break;
 8008648:	e009      	b.n	800865e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864e:	61fb      	str	r3, [r7, #28]
        break;
 8008650:	e005      	b.n	800865e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800865c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d077      	beq.n	8008754 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	005a      	lsls	r2, r3, #1
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	441a      	add	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	fbb2 f3f3 	udiv	r3, r2, r3
 8008678:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b0f      	cmp	r3, #15
 800867e:	d916      	bls.n	80086ae <UART_SetConfig+0x392>
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d212      	bcs.n	80086ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	b29b      	uxth	r3, r3
 800868c:	f023 030f 	bic.w	r3, r3, #15
 8008690:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	b29b      	uxth	r3, r3
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	b29a      	uxth	r2, r3
 800869e:	8afb      	ldrh	r3, [r7, #22]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	8afa      	ldrh	r2, [r7, #22]
 80086aa:	60da      	str	r2, [r3, #12]
 80086ac:	e052      	b.n	8008754 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086b4:	e04e      	b.n	8008754 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d827      	bhi.n	800870e <UART_SetConfig+0x3f2>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0x3a8>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	0800870f 	.word	0x0800870f
 80086d4:	080086ff 	.word	0x080086ff
 80086d8:	0800870f 	.word	0x0800870f
 80086dc:	0800870f 	.word	0x0800870f
 80086e0:	0800870f 	.word	0x0800870f
 80086e4:	08008707 	.word	0x08008707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e8:	f7fd fa56 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 80086ec:	61f8      	str	r0, [r7, #28]
        break;
 80086ee:	e014      	b.n	800871a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f0:	f7fd fa68 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 80086f4:	61f8      	str	r0, [r7, #28]
        break;
 80086f6:	e010      	b.n	800871a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <UART_SetConfig+0x454>)
 80086fa:	61fb      	str	r3, [r7, #28]
        break;
 80086fc:	e00d      	b.n	800871a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086fe:	f7fd f9b3 	bl	8005a68 <HAL_RCC_GetSysClockFreq>
 8008702:	61f8      	str	r0, [r7, #28]
        break;
 8008704:	e009      	b.n	800871a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800870a:	61fb      	str	r3, [r7, #28]
        break;
 800870c:	e005      	b.n	800871a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008718:	bf00      	nop
    }

    if (pclk != 0U)
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d019      	beq.n	8008754 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	085a      	lsrs	r2, r3, #1
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	441a      	add	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d909      	bls.n	800874e <UART_SetConfig+0x432>
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008740:	d205      	bcs.n	800874e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e002      	b.n	8008754 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008760:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008764:	4618      	mov	r0, r3
 8008766:	3728      	adds	r7, #40	; 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800876e:	bf00      	nop
 8008770:	00f42400 	.word	0x00f42400

08008774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01a      	beq.n	800888a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008872:	d10a      	bne.n	800888a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	605a      	str	r2, [r3, #4]
  }
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088c8:	f7f9 fe34 	bl	8002534 <HAL_GetTick>
 80088cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d10e      	bne.n	80088fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f82d 	bl	800894a <UART_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e023      	b.n	8008942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b04      	cmp	r3, #4
 8008906:	d10e      	bne.n	8008926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f817 	bl	800894a <UART_WaitOnFlagUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e00d      	b.n	8008942 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2220      	movs	r2, #32
 8008930:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b09c      	sub	sp, #112	; 0x70
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	603b      	str	r3, [r7, #0]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800895a:	e0a5      	b.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800895c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	f000 80a1 	beq.w	8008aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008966:	f7f9 fde5 	bl	8002534 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008972:	429a      	cmp	r2, r3
 8008974:	d302      	bcc.n	800897c <UART_WaitOnFlagUntilTimeout+0x32>
 8008976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008978:	2b00      	cmp	r3, #0
 800897a:	d13e      	bne.n	80089fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008990:	667b      	str	r3, [r7, #100]	; 0x64
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800899a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800899c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e6      	bne.n	800897c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	663b      	str	r3, [r7, #96]	; 0x60
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80089d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e5      	bne.n	80089ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e067      	b.n	8008aca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d04f      	beq.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a16:	d147      	bne.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	613b      	str	r3, [r7, #16]
   return(result);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f023 0301 	bic.w	r3, r3, #1
 8008a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3308      	adds	r3, #8
 8008a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a74:	623a      	str	r2, [r7, #32]
 8008a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	69f9      	ldr	r1, [r7, #28]
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e5      	bne.n	8008a54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e010      	b.n	8008aca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69da      	ldr	r2, [r3, #28]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f43f af4a 	beq.w	800895c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3770      	adds	r7, #112	; 0x70
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8008ad2:	b490      	push	{r4, r7}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	4608      	mov	r0, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	70fb      	strb	r3, [r7, #3]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70bb      	strb	r3, [r7, #2]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 8008aec:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 8008aee:	7e3b      	ldrb	r3, [r7, #24]
 8008af0:	4423      	add	r3, r4
 8008af2:	b2dc      	uxtb	r4, r3
  tmp--;
 8008af4:	4623      	mov	r3, r4
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008b06:	73fa      	strb	r2, [r7, #15]
 8008b08:	73bb      	strb	r3, [r7, #14]
 8008b0a:	78bb      	ldrb	r3, [r7, #2]
 8008b0c:	737b      	strb	r3, [r7, #13]
 8008b0e:	4623      	mov	r3, r4
 8008b10:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8008b12:	7bba      	ldrb	r2, [r7, #14]
 8008b14:	7b7b      	ldrb	r3, [r7, #13]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d30d      	bcc.n	8008b36 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8008b1a:	7bfa      	ldrb	r2, [r7, #15]
 8008b1c:	7b3b      	ldrb	r3, [r7, #12]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d801      	bhi.n	8008b26 <u8g_IsBBXIntersection+0x54>
      return 1;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e014      	b.n	8008b50 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8008b26:	7b7a      	ldrb	r2, [r7, #13]
 8008b28:	7b3b      	ldrb	r3, [r7, #12]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d901      	bls.n	8008b32 <u8g_IsBBXIntersection+0x60>
	return 1;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e00e      	b.n	8008b50 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e00c      	b.n	8008b50 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8008b36:	7bfa      	ldrb	r2, [r7, #15]
 8008b38:	7b3b      	ldrb	r3, [r7, #12]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d807      	bhi.n	8008b4e <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8008b3e:	7b7a      	ldrb	r2, [r7, #13]
 8008b40:	7b3b      	ldrb	r3, [r7, #12]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d901      	bls.n	8008b4a <u8g_IsBBXIntersection+0x78>
	return 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e002      	b.n	8008b50 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8008b4e:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8008b54:	2300      	movs	r3, #0
 8008b56:	e032      	b.n	8008bbe <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8008b58:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8008b5a:	787b      	ldrb	r3, [r7, #1]
 8008b5c:	4423      	add	r3, r4
 8008b5e:	b2dc      	uxtb	r4, r3
  tmp--;
 8008b60:	4623      	mov	r3, r4
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b72:	72fa      	strb	r2, [r7, #11]
 8008b74:	72bb      	strb	r3, [r7, #10]
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	727b      	strb	r3, [r7, #9]
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8008b7e:	7aba      	ldrb	r2, [r7, #10]
 8008b80:	7a7b      	ldrb	r3, [r7, #9]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d30d      	bcc.n	8008ba2 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8008b86:	7afa      	ldrb	r2, [r7, #11]
 8008b88:	7a3b      	ldrb	r3, [r7, #8]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d801      	bhi.n	8008b92 <u8g_IsBBXIntersection+0xc0>
      return 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e014      	b.n	8008bbc <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8008b92:	7a7a      	ldrb	r2, [r7, #9]
 8008b94:	7a3b      	ldrb	r3, [r7, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d901      	bls.n	8008b9e <u8g_IsBBXIntersection+0xcc>
	return 1;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e00e      	b.n	8008bbc <u8g_IsBBXIntersection+0xea>
	return 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e00c      	b.n	8008bbc <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8008ba2:	7afa      	ldrb	r2, [r7, #11]
 8008ba4:	7a3b      	ldrb	r3, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d807      	bhi.n	8008bba <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8008baa:	7a7a      	ldrb	r2, [r7, #9]
 8008bac:	7a3b      	ldrb	r3, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d901      	bls.n	8008bb6 <u8g_IsBBXIntersection+0xe4>
	return 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e002      	b.n	8008bbc <u8g_IsBBXIntersection+0xea>
	return 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e000      	b.n	8008bbc <u8g_IsBBXIntersection+0xea>
      return 0;
 8008bba:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008bbc:	bf00      	nop
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc90      	pop	{r4, r7}
 8008bc6:	4770      	bx	lr

08008bc8 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	689c      	ldr	r4, [r3, #8]
 8008bda:	79fa      	ldrb	r2, [r7, #7]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2101      	movs	r1, #1
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	47a0      	blx	r4
 8008be4:	4603      	mov	r3, r0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}

08008bee <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8008bee:	b590      	push	{r4, r7, lr}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	689c      	ldr	r4, [r3, #8]
 8008c00:	79fa      	ldrb	r2, [r7, #7]
 8008c02:	2300      	movs	r3, #0
 8008c04:	2103      	movs	r1, #3
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	47a0      	blx	r4
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd90      	pop	{r4, r7, pc}

08008c12 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8008c12:	b590      	push	{r4, r7, lr}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689c      	ldr	r4, [r3, #8]
 8008c20:	2300      	movs	r3, #0
 8008c22:	2200      	movs	r2, #0
 8008c24:	2104      	movs	r1, #4
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	47a0      	blx	r4
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd90      	pop	{r4, r7, pc}

08008c32 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8008c32:	b590      	push	{r4, r7, lr}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689c      	ldr	r4, [r3, #8]
 8008c40:	2300      	movs	r3, #0
 8008c42:	2201      	movs	r2, #1
 8008c44:	2104      	movs	r1, #4
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	47a0      	blx	r4
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd90      	pop	{r4, r7, pc}

08008c52 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8008c52:	b590      	push	{r4, r7, lr}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	689c      	ldr	r4, [r3, #8]
 8008c64:	79fa      	ldrb	r2, [r7, #7]
 8008c66:	2300      	movs	r3, #0
 8008c68:	2102      	movs	r1, #2
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	47a0      	blx	r4
}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}

08008c76 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8008c76:	b590      	push	{r4, r7, lr}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	4613      	mov	r3, r2
 8008c82:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	689c      	ldr	r4, [r3, #8]
 8008c88:	79fa      	ldrb	r2, [r7, #7]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2105      	movs	r1, #5
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	47a0      	blx	r4
 8008c92:	4603      	mov	r3, r0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd90      	pop	{r4, r7, pc}

08008c9c <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	689c      	ldr	r4, [r3, #8]
 8008cb0:	79fa      	ldrb	r2, [r7, #7]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2106      	movs	r1, #6
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	47a0      	blx	r4
 8008cba:	4603      	mov	r3, r0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd90      	pop	{r4, r7, pc}

08008cc4 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d110      	bne.n	8008d02 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
 8008ce2:	2bff      	cmp	r3, #255	; 0xff
 8008ce4:	d00a      	beq.n	8008cfc <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008ce6:	7dbb      	ldrb	r3, [r7, #22]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff ffc2 	bl	8008c76 <u8g_WriteByte>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d160      	bne.n	8008dba <u8g_WriteEscSeqP+0xf6>
          return 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e064      	b.n	8008dc6 <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
 8008d00:	e05b      	b.n	8008dba <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 8008d02:	7dbb      	ldrb	r3, [r7, #22]
 8008d04:	2bff      	cmp	r3, #255	; 0xff
 8008d06:	d10a      	bne.n	8008d1e <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008d08:	7dbb      	ldrb	r3, [r7, #22]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7ff ffb1 	bl	8008c76 <u8g_WriteByte>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d14d      	bne.n	8008db6 <u8g_WriteEscSeqP+0xf2>
          return 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e053      	b.n	8008dc6 <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	2bfe      	cmp	r3, #254	; 0xfe
 8008d22:	d04e      	beq.n	8008dc2 <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8008d24:	7dbb      	ldrb	r3, [r7, #22]
 8008d26:	2bef      	cmp	r3, #239	; 0xef
 8008d28:	d845      	bhi.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	2bdf      	cmp	r3, #223	; 0xdf
 8008d2e:	d909      	bls.n	8008d44 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8008d30:	7dbb      	ldrb	r3, [r7, #22]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff ff88 	bl	8008c52 <u8g_SetAddress>
 8008d42:	e038      	b.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 8008d44:	7dbb      	ldrb	r3, [r7, #22]
 8008d46:	2bcf      	cmp	r3, #207	; 0xcf
 8008d48:	d909      	bls.n	8008d5e <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8008d4a:	7dbb      	ldrb	r3, [r7, #22]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f7ff ff49 	bl	8008bee <u8g_SetChipSelect>
 8008d5c:	e02b      	b.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8008d5e:	7dbb      	ldrb	r3, [r7, #22]
 8008d60:	2bbf      	cmp	r3, #191	; 0xbf
 8008d62:	d91c      	bls.n	8008d9e <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff ff53 	bl	8008c12 <u8g_SetResetLow>
        value &= 0x0f;
 8008d6c:	7dbb      	ldrb	r3, [r7, #22]
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8008d74:	7dbb      	ldrb	r3, [r7, #22]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8008d7a:	7dbb      	ldrb	r3, [r7, #22]
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8008d80:	7dbb      	ldrb	r3, [r7, #22]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f8 fb41 	bl	800140c <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff50 	bl	8008c32 <u8g_SetResetHigh>
        u8g_Delay(value);
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f8 fb38 	bl	800140c <u8g_Delay>
 8008d9c:	e00b      	b.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 8008d9e:	7dbb      	ldrb	r3, [r7, #22]
 8008da0:	2bbd      	cmp	r3, #189	; 0xbd
 8008da2:	d808      	bhi.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8008da4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db04      	blt.n	8008db6 <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 8008dac:	7dbb      	ldrb	r3, [r7, #22]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7f8 fb2b 	bl	800140c <u8g_Delay>
      }
      is_escape = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8008dc0:	e788      	b.n	8008cd4 <u8g_WriteEscSeqP+0x10>
        break;
 8008dc2:	bf00      	nop
  }
  return 1;
 8008dc4:	2301      	movs	r3, #1
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	72fb      	strb	r3, [r7, #11]
 8008dde:	4613      	mov	r3, r2
 8008de0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	2b06      	cmp	r3, #6
 8008de6:	d811      	bhi.n	8008e0c <u8g_com_null_fn+0x3c>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <u8g_com_null_fn+0x20>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e0d 	.word	0x08008e0d
 8008df8:	08008e0d 	.word	0x08008e0d
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e0d 	.word	0x08008e0d
 8008e04:	08008e0d 	.word	0x08008e0d
 8008e08:	08008e0d 	.word	0x08008e0d
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8008e0c:	2301      	movs	r3, #1
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop

08008e1c <u8g_dev_sh1106_128x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	3b0a      	subs	r3, #10
 8008e30:	2b0b      	cmp	r3, #11
 8008e32:	d878      	bhi.n	8008f26 <u8g_dev_sh1106_128x64_fn+0x10a>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <u8g_dev_sh1106_128x64_fn+0x20>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e6d 	.word	0x08008e6d
 8008e40:	08008f27 	.word	0x08008f27
 8008e44:	08008f27 	.word	0x08008f27
 8008e48:	08008f27 	.word	0x08008f27
 8008e4c:	08008f27 	.word	0x08008f27
 8008e50:	08008eed 	.word	0x08008eed
 8008e54:	08008ed1 	.word	0x08008ed1
 8008e58:	08008edf 	.word	0x08008edf
 8008e5c:	08008f27 	.word	0x08008f27
 8008e60:	08008f27 	.word	0x08008f27
 8008e64:	08008f27 	.word	0x08008f27
 8008e68:	08008e83 	.word	0x08008e83
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f7ff fea9 	bl	8008bc8 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 8008e76:	4a31      	ldr	r2, [pc, #196]	; (8008f3c <u8g_dev_sh1106_128x64_fn+0x120>)
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff ff22 	bl	8008cc4 <u8g_WriteEscSeqP>
      break;
 8008e80:	e051      	b.n	8008f26 <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8008e88:	4a2d      	ldr	r2, [pc, #180]	; (8008f40 <u8g_dev_sh1106_128x64_fn+0x124>)
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7ff ff19 	bl	8008cc4 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fee8 	bl	8008c76 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fed1 	bl	8008c52 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	68f9      	ldr	r1, [r7, #12]
 8008eb4:	6978      	ldr	r0, [r7, #20]
 8008eb6:	f000 fe73 	bl	8009ba0 <u8g_pb_WriteBuffer>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <u8g_dev_sh1106_128x64_fn+0xa8>
          return 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e037      	b.n	8008f34 <u8g_dev_sh1106_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fe90 	bl	8008bee <u8g_SetChipSelect>
      }
      break;
 8008ece:	e02a      	b.n	8008f26 <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8008ed0:	4a1c      	ldr	r2, [pc, #112]	; (8008f44 <u8g_dev_sh1106_128x64_fn+0x128>)
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fef5 	bl	8008cc4 <u8g_WriteEscSeqP>
      return 1;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e02a      	b.n	8008f34 <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8008ede:	4a1a      	ldr	r2, [pc, #104]	; (8008f48 <u8g_dev_sh1106_128x64_fn+0x12c>)
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff feee 	bl	8008cc4 <u8g_WriteEscSeqP>
      return 1;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e023      	b.n	8008f34 <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 8008eec:	2201      	movs	r2, #1
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7ff fe7c 	bl	8008bee <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff fea9 	bl	8008c52 <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 8008f00:	2281      	movs	r2, #129	; 0x81
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff feb6 	bl	8008c76 <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff feaf 	bl	8008c76 <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fe66 	bl	8008bee <u8g_SetChipSelect>
	return 1;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e006      	b.n	8008f34 <u8g_dev_sh1106_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8008f26:	79fa      	ldrb	r2, [r7, #7]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fef5 	bl	8009d1c <u8g_dev_pb8v1_base_fn>
 8008f32:	4603      	mov	r3, r0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	08009fa4 	.word	0x08009fa4
 8008f40:	08009fcc 	.word	0x08009fcc
 8008f44:	08009fd4 	.word	0x08009fd4
 8008f48:	08009fe0 	.word	0x08009fe0

08008f4c <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	781b      	ldrb	r3, [r3, #0]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	81fb      	strh	r3, [r7, #14]
    font++;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8008f90:	89fb      	ldrh	r3, [r7, #14]
 8008f92:	021b      	lsls	r3, r3, #8
 8008f94:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	89fb      	ldrh	r3, [r7, #14]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	81fb      	strh	r3, [r7, #14]
    return pos;
 8008fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ffc6 	bl	8008f4c <u8g_font_get_byte>
 8008fc0:	4603      	mov	r3, r0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff ffec 	bl	8008fb0 <u8g_font_GetFormat>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d00a      	beq.n	8008ff4 <u8g_font_GetFontGlyphStructureSize+0x2a>
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	dc0a      	bgt.n	8008ff8 <u8g_font_GetFontGlyphStructureSize+0x2e>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <u8g_font_GetFontGlyphStructureSize+0x22>
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d002      	beq.n	8008ff0 <u8g_font_GetFontGlyphStructureSize+0x26>
 8008fea:	e005      	b.n	8008ff8 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 8008fec:	2306      	movs	r3, #6
 8008fee:	e004      	b.n	8008ffa <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e002      	b.n	8008ffa <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	e000      	b.n	8008ffa <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8008ff8:	2303      	movs	r3, #3
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 800900a:	2105      	movs	r1, #5
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff9d 	bl	8008f4c <u8g_font_get_byte>
 8009012:	4603      	mov	r3, r0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 8009024:	2106      	movs	r1, #6
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff ffa2 	bl	8008f70 <u8g_font_get_word>
 800902c:	4603      	mov	r3, r0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 800903e:	2108      	movs	r1, #8
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff95 	bl	8008f70 <u8g_font_get_word>
 8009046:	4603      	mov	r3, r0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8009058:	210a      	movs	r1, #10
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff ff76 	bl	8008f4c <u8g_font_get_byte>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 8009072:	210b      	movs	r1, #11
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ff69 	bl	8008f4c <u8g_font_get_byte>
 800907a:	4603      	mov	r3, r0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 800908c:	210c      	movs	r1, #12
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff ff5c 	bl	8008f4c <u8g_font_get_byte>
 8009094:	4603      	mov	r3, r0
 8009096:	b25b      	sxtb	r3, r3
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 80090a8:	210d      	movs	r1, #13
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff ff4e 	bl	8008f4c <u8g_font_get_byte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	b25b      	sxtb	r3, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 80090c4:	210e      	movs	r1, #14
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff ff40 	bl	8008f4c <u8g_font_get_byte>
 80090cc:	4603      	mov	r3, r0
 80090ce:	b25b      	sxtb	r3, r3
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 80090e0:	210f      	movs	r1, #15
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff ff32 	bl	8008f4c <u8g_font_get_byte>
 80090e8:	4603      	mov	r3, r0
 80090ea:	b25b      	sxtb	r3, r3
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 80090fc:	2110      	movs	r1, #16
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff ff24 	bl	8008f4c <u8g_font_get_byte>
 8009104:	4603      	mov	r3, r0
 8009106:	b25b      	sxtb	r3, r3
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff ff55 	bl	8008fca <u8g_font_GetFontGlyphStructureSize>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	4413      	add	r3, r2
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ff36 	bl	8008fb0 <u8g_font_GetFormat>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <u8g_CopyGlyphDataToCache+0x1e>
 800914a:	2b02      	cmp	r3, #2
 800914c:	d11c      	bne.n	8009188 <u8g_CopyGlyphDataToCache+0x58>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3301      	adds	r3, #1
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	3303      	adds	r3, #3
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b25a      	sxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	3304      	adds	r3, #4
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b25a      	sxtb	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	3305      	adds	r3, #5
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	b25a      	sxtb	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	779a      	strb	r2, [r3, #30]
      break;
 8009186:	e036      	b.n	80091f6 <u8g_CopyGlyphDataToCache+0xc6>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 800918e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	b25a      	sxtb	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	3b02      	subs	r3, #2
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	b25a      	sxtb	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	091b      	lsrs	r3, r3, #4
 80091b2:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 80091b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3301      	adds	r3, #1
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7bfa      	ldrb	r2, [r7, #15]
 80091dc:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3302      	adds	r3, #2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	091b      	lsrs	r3, r3, #4
 80091ea:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 80091ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	771a      	strb	r2, [r3, #28]
    
      
      break;
 80091f4:	bf00      	nop
  }
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	779a      	strb	r2, [r3, #30]
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b086      	sub	sp, #24
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff feb1 	bl	8008fb0 <u8g_font_GetFormat>
 800924e:	4603      	mov	r3, r0
 8009250:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff feb7 	bl	8008fca <u8g_font_GetFontGlyphStructureSize>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8009264:	7c3b      	ldrb	r3, [r7, #16]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <u8g_GetGlyph+0x3c>
    mask = 15;
 800926a:	230f      	movs	r3, #15
 800926c:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff feec 	bl	8009050 <u8g_font_GetFontStartEncoding>
 8009278:	4603      	mov	r3, r0
 800927a:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fef2 	bl	800906a <u8g_font_GetFontEndEncoding>
 8009286:	4603      	mov	r3, r0
 8009288:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fed1 	bl	8009036 <u8g_font_GetEncoding97Pos>
 8009294:	4603      	mov	r3, r0
 8009296:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	2b60      	cmp	r3, #96	; 0x60
 800929c:	d909      	bls.n	80092b2 <u8g_GetGlyph+0x80>
 800929e:	89bb      	ldrh	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <u8g_GetGlyph+0x80>
  {
    p+= pos;
 80092a4:	89bb      	ldrh	r3, [r7, #12]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4413      	add	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]
    start = 97;
 80092ac:	2361      	movs	r3, #97	; 0x61
 80092ae:	74fb      	strb	r3, [r7, #19]
 80092b0:	e016      	b.n	80092e0 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff feb0 	bl	800901c <u8g_font_GetEncoding65Pos>
 80092bc:	4603      	mov	r3, r0
 80092be:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2b40      	cmp	r3, #64	; 0x40
 80092c4:	d909      	bls.n	80092da <u8g_GetGlyph+0xa8>
 80092c6:	89bb      	ldrh	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d006      	beq.n	80092da <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 80092cc:	89bb      	ldrh	r3, [r7, #12]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4413      	add	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
      start = 65;
 80092d4:	2341      	movs	r3, #65	; 0x41
 80092d6:	74fb      	strb	r3, [r7, #19]
 80092d8:	e002      	b.n	80092e0 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	3311      	adds	r3, #17
 80092de:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 80092e0:	78fa      	ldrb	r2, [r7, #3]
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d904      	bls.n	80092f2 <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff ff88 	bl	80091fe <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 80092ee:	2300      	movs	r3, #0
 80092f0:	e032      	b.n	8009358 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 80092f2:	7cfb      	ldrb	r3, [r7, #19]
 80092f4:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 80092f6:	7cba      	ldrb	r2, [r7, #18]
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d828      	bhi.n	8009350 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2bff      	cmp	r3, #255	; 0xff
 8009304:	d103      	bne.n	800930e <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	3301      	adds	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	e017      	b.n	800933e <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 800930e:	7cba      	ldrb	r2, [r7, #18]
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	429a      	cmp	r2, r3
 8009314:	d105      	bne.n	8009322 <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ff09 	bl	8009130 <u8g_CopyGlyphDataToCache>
          return p;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	e01a      	b.n	8009358 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	3302      	adds	r3, #2
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	7c7b      	ldrb	r3, [r7, #17]
 800932a:	4013      	ands	r3, r2
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	4413      	add	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4413      	add	r3, r2
 800933c:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 800933e:	7cba      	ldrb	r2, [r7, #18]
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	429a      	cmp	r2, r3
 8009344:	d003      	beq.n	800934e <u8g_GetGlyph+0x11c>
        break;
      i++;
 8009346:	7cbb      	ldrb	r3, [r7, #18]
 8009348:	3301      	adds	r3, #1
 800934a:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800934c:	e7d7      	b.n	80092fe <u8g_GetGlyph+0xcc>
        break;
 800934e:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff54 	bl	80091fe <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	4608      	mov	r0, r1
 800936a:	4611      	mov	r1, r2
 800936c:	461a      	mov	r2, r3
 800936e:	4603      	mov	r3, r0
 8009370:	70fb      	strb	r3, [r7, #3]
 8009372:	460b      	mov	r3, r1
 8009374:	70bb      	strb	r3, [r7, #2]
 8009376:	4613      	mov	r3, r2
 8009378:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800937a:	787b      	ldrb	r3, [r7, #1]
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff57 	bl	8009232 <u8g_GetGlyph>
 8009384:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <u8g_draw_glyph+0x30>
      return 0;
 800938c:	2300      	movs	r3, #0
 800938e:	e06d      	b.n	800946c <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff feba 	bl	8009110 <u8g_font_GetGlyphDataStart>
 800939c:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7fdb      	ldrb	r3, [r3, #31]
 80093a2:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093aa:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	4413      	add	r3, r2
 80093b8:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	78ba      	ldrb	r2, [r7, #2]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	70bb      	strb	r3, [r7, #2]
  y--;
 80093c8:	78bb      	ldrb	r3, [r7, #2]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80093ce:	78ba      	ldrb	r2, [r7, #2]
 80093d0:	7abb      	ldrb	r3, [r7, #10]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	3301      	adds	r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	7af8      	ldrb	r0, [r7, #11]
 80093dc:	78f9      	ldrb	r1, [r7, #3]
 80093de:	7abb      	ldrb	r3, [r7, #10]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	4603      	mov	r3, r0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fb74 	bl	8008ad2 <u8g_IsBBXIntersection>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80093f6:	e039      	b.n	800946c <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3307      	adds	r3, #7
 80093fc:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	08db      	lsrs	r3, r3, #3
 8009402:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8009404:	78bb      	ldrb	r3, [r7, #2]
 8009406:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8009408:	7c3a      	ldrb	r2, [r7, #16]
 800940a:	7abb      	ldrb	r3, [r7, #10]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	743b      	strb	r3, [r7, #16]
  iy++;
 8009410:	7c3b      	ldrb	r3, [r7, #16]
 8009412:	3301      	adds	r3, #1
 8009414:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8009416:	2300      	movs	r3, #0
 8009418:	74bb      	strb	r3, [r7, #18]
 800941a:	e020      	b.n	800945e <u8g_draw_glyph+0xfe>
  {
    ix = x;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8009420:	2300      	movs	r3, #0
 8009422:	74fb      	strb	r3, [r7, #19]
 8009424:	e011      	b.n	800944a <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	7c3a      	ldrb	r2, [r7, #16]
 800942c:	7c79      	ldrb	r1, [r7, #17]
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	2300      	movs	r3, #0
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa8c 	bl	8009950 <u8g_Draw8Pixel>
      data++;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	3301      	adds	r3, #1
 800943c:	617b      	str	r3, [r7, #20]
      ix+=8;
 800943e:	7c7b      	ldrb	r3, [r7, #17]
 8009440:	3308      	adds	r3, #8
 8009442:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8009444:	7cfb      	ldrb	r3, [r7, #19]
 8009446:	3301      	adds	r3, #1
 8009448:	74fb      	strb	r3, [r7, #19]
 800944a:	7cfa      	ldrb	r2, [r7, #19]
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	429a      	cmp	r2, r3
 8009450:	d3e9      	bcc.n	8009426 <u8g_draw_glyph+0xc6>
    }
    iy++;
 8009452:	7c3b      	ldrb	r3, [r7, #16]
 8009454:	3301      	adds	r3, #1
 8009456:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8009458:	7cbb      	ldrb	r3, [r7, #18]
 800945a:	3301      	adds	r3, #1
 800945c:	74bb      	strb	r3, [r7, #18]
 800945e:	7cba      	ldrb	r2, [r7, #18]
 8009460:	7abb      	ldrb	r3, [r7, #10]
 8009462:	429a      	cmp	r2, r3
 8009464:	d3da      	bcc.n	800941c <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	72fb      	strb	r3, [r7, #11]
 8009482:	4613      	mov	r3, r2
 8009484:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	7abb      	ldrb	r3, [r7, #10]
 8009498:	4413      	add	r3, r2
 800949a:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 800949c:	e013      	b.n	80094c6 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	7aba      	ldrb	r2, [r7, #10]
 80094a4:	7af9      	ldrb	r1, [r7, #11]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff ff5a 	bl	8009360 <u8g_draw_glyph>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75bb      	strb	r3, [r7, #22]
    x += d;
 80094b0:	7dba      	ldrb	r2, [r7, #22]
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	4413      	add	r3, r2
 80094b6:	72fb      	strb	r3, [r7, #11]
    t += d;
 80094b8:	7dba      	ldrb	r2, [r7, #22]
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	4413      	add	r3, r2
 80094be:	75fb      	strb	r3, [r7, #23]
    s++;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3301      	adds	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e7      	bne.n	800949e <u8g_DrawStr+0x2a>
  }
  return t;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d06b      	beq.n	80095c0 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d114      	bne.n	800951c <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff fd83 	bl	8009002 <u8g_font_GetCapitalAHeight>
 80094fc:	4603      	mov	r3, r0
 80094fe:	b25a      	sxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fdba 	bl	8009084 <u8g_font_GetLowerGDescent>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800951a:	e02d      	b.n	8009578 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009522:	2b01      	cmp	r3, #1
 8009524:	d114      	bne.n	8009550 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff fdd4 	bl	80090d8 <u8g_font_GetFontXAscent>
 8009530:	4603      	mov	r3, r0
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fdd8 	bl	80090f4 <u8g_font_GetFontXDescent>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800954e:	e013      	b.n	8009578 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fda3 	bl	80090a0 <u8g_font_GetFontAscent>
 800955a:	4603      	mov	r3, r0
 800955c:	461a      	mov	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fda7 	bl	80090bc <u8g_font_GetFontDescent>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800957e:	b21a      	sxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8009586:	b21b      	sxth	r3, r3
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	b21b      	sxth	r3, r3
 800958c:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d00d      	beq.n	80095b4 <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8009598:	89fb      	ldrh	r3, [r7, #14]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	89fa      	ldrh	r2, [r7, #14]
 80095a8:	fb12 f303 	smulbb	r3, r2, r3
 80095ac:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 80095ae:	89fb      	ldrh	r3, [r7, #14]
 80095b0:	099b      	lsrs	r3, r3, #6
 80095b2:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 80095b4:	89fb      	ldrh	r3, [r7, #14]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80095be:	e000      	b.n	80095c2 <u8g_UpdateRefHeight+0xea>
    return;
 80095c0:	bf00      	nop
}
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  return 0;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a04      	ldr	r2, [pc, #16]	; (80095fc <u8g_SetFontPosBaseline+0x1c>)
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	080095c9 	.word	0x080095c9

08009600 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	429a      	cmp	r2, r3
 8009612:	d008      	beq.n	8009626 <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ff5c 	bl	80094d8 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ffdd 	bl	80095e0 <u8g_SetFontPosBaseline>
  }
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800962e:	b590      	push	{r4, r7, lr}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	681c      	ldr	r4, [r3, #0]
 8009642:	79fa      	ldrb	r2, [r7, #7]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	47a0      	blx	r4
 800964c:	4603      	mov	r3, r0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	bd90      	pop	{r4, r7, pc}

08009656 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	2002      	movs	r0, #2
 8009666:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8009668:	2300      	movs	r3, #0
 800966a:	220a      	movs	r2, #10
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ffdd 	bl	800962e <u8g_call_dev_fn>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	2003      	movs	r0, #3
 800967e:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	2000      	movs	r0, #0
 8009686:	4798      	blx	r3
  return r;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a0:	2002      	movs	r0, #2
 80096a2:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	2001      	movs	r0, #1
 80096aa:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80096ac:	2300      	movs	r3, #0
 80096ae:	2214      	movs	r2, #20
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ffbb 	bl	800962e <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3338      	adds	r3, #56	; 0x38
 80096bc:	2217      	movs	r2, #23
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ffb4 	bl	800962e <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ca:	2000      	movs	r0, #0
 80096cc:	4798      	blx	r3
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	2002      	movs	r0, #2
 80096e6:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	2001      	movs	r0, #1
 80096ee:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80096f0:	2300      	movs	r3, #0
 80096f2:	2215      	movs	r2, #21
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff ff99 	bl	800962e <u8g_call_dev_fn>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3338      	adds	r3, #56	; 0x38
 800970a:	2217      	movs	r2, #23
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff ff8d 	bl	800962e <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009718:	2000      	movs	r0, #0
 800971a:	4798      	blx	r3
  return r;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b086      	sub	sp, #24
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	4611      	mov	r1, r2
 8009732:	461a      	mov	r2, r3
 8009734:	460b      	mov	r3, r1
 8009736:	71fb      	strb	r3, [r7, #7]
 8009738:	4613      	mov	r3, r2
 800973a:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	332d      	adds	r3, #45	; 0x2d
 8009740:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	79ba      	ldrb	r2, [r7, #6]
 800974c:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009754:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800975c:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	223b      	movs	r2, #59	; 0x3b
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff ff62 	bl	800962e <u8g_call_dev_fn>
}
 800976a:	bf00      	nop
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800977c:	f107 030f 	add.w	r3, r7, #15
 8009780:	2246      	movs	r2, #70	; 0x46
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff ff52 	bl	800962e <u8g_call_dev_fn>
  return r;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800979e:	f107 030f 	add.w	r3, r7, #15
 80097a2:	2247      	movs	r2, #71	; 0x47
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff41 	bl	800962e <u8g_call_dev_fn>
  return r;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80097c0:	2300      	movs	r3, #0
 80097c2:	2248      	movs	r2, #72	; 0x48
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff ff31 	bl	800962e <u8g_call_dev_fn>
 80097cc:	4603      	mov	r3, r0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ffc4 	bl	8009772 <u8g_GetWidthLL>
 80097ea:	4603      	mov	r3, r0
 80097ec:	461a      	mov	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ffcb 	bl	8009794 <u8g_GetHeightLL>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffd2 	bl	80097b6 <u8g_GetModeLL>
 8009812:	4603      	mov	r3, r0
 8009814:	461a      	mov	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6859      	ldr	r1, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3338      	adds	r3, #56	; 0x38
 8009822:	2217      	movs	r2, #23
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff02 	bl	800962e <u8g_call_dev_fn>
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2222      	movs	r2, #34	; 0x22
 8009858:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8009860:	2101      	movs	r1, #1
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f891 	bl	800998a <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff feb9 	bl	80095e0 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2240      	movs	r2, #64	; 0x40
 800988a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a02      	ldr	r2, [pc, #8]	; (80098a4 <u8g_init_data+0x70>)
 800989a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	08009ebd 	.word	0x08009ebd

080098a8 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fecd 	bl	8009656 <u8g_InitLL>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <u8g_Begin+0x1e>
    return 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e003      	b.n	80098ce <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff ff85 	bl	80097d6 <u8g_UpdateDimension>
  return 1;
 80098cc:	2301      	movs	r3, #1
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff ffa6 	bl	8009834 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7ff ffd6 	bl	80098a8 <u8g_Begin>
 80098fc:	4603      	mov	r3, r0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff febc 	bl	8009692 <u8g_FirstPageLL>
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fec8 	bl	80096d6 <u8g_NextPageLL>
 8009946:	4603      	mov	r3, r0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af02      	add	r7, sp, #8
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4603      	mov	r3, r0
 8009960:	70fb      	strb	r3, [r7, #3]
 8009962:	460b      	mov	r3, r1
 8009964:	70bb      	strb	r3, [r7, #2]
 8009966:	4613      	mov	r3, r2
 8009968:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6859      	ldr	r1, [r3, #4]
 800996e:	78b8      	ldrb	r0, [r7, #2]
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	7c3b      	ldrb	r3, [r7, #16]
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	787b      	ldrb	r3, [r7, #1]
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	4603      	mov	r3, r0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff fed2 	bl	8009726 <u8g_Draw8PixelLL>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	78db      	ldrb	r3, [r3, #3]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	711a      	strb	r2, [r3, #4]
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 80099de:	b490      	push	{r4, r7}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	789a      	ldrb	r2, [r3, #2]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	4413      	add	r3, r2
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	789a      	ldrb	r2, [r3, #2]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	785b      	ldrb	r3, [r3, #1]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d301      	bcc.n	8009a06 <u8g_page_Next+0x28>
    return 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e018      	b.n	8009a38 <u8g_page_Next+0x5a>
  p->page++;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	4423      	add	r3, r4
 8009a1c:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d304      	bcc.n	8009a30 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4622      	mov	r2, r4
 8009a34:	70da      	strb	r2, [r3, #3]
  
  return 1;
 8009a36:	2301      	movs	r3, #1
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc90      	pop	{r4, r7}
 8009a40:	4770      	bx	lr

08009a42 <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b085      	sub	sp, #20
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	795b      	ldrb	r3, [r3, #5]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	60fa      	str	r2, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d1f6      	bne.n	8009a60 <u8g_pb_Clear+0x1e>
}
 8009a72:	bf00      	nop
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	78db      	ldrb	r3, [r3, #3]
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	bf94      	ite	ls
 8009a9a:	2301      	movls	r3, #1
 8009a9c:	2300      	movhi	r3, #0
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	789b      	ldrb	r3, [r3, #2]
 8009aa6:	78ba      	ldrb	r2, [r7, #2]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	bf2c      	ite	cs
 8009aac:	2301      	movcs	r3, #1
 8009aae:	2300      	movcc	r3, #0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8009ab4:	78fa      	ldrb	r2, [r7, #3]
 8009ab6:	78bb      	ldrb	r3, [r7, #2]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	bf8c      	ite	hi
 8009abc:	2301      	movhi	r3, #1
 8009abe:	2300      	movls	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8009ac8:	7bfa      	ldrb	r2, [r7, #15]
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	4013      	ands	r3, r2
 8009ace:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8009ad0:	7bba      	ldrb	r2, [r7, #14]
 8009ad2:	7b7b      	ldrb	r3, [r7, #13]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8009ad8:	7b7a      	ldrb	r2, [r7, #13]
 8009ada:	7b3b      	ldrb	r3, [r7, #12]
 8009adc:	4013      	ands	r3, r2
 8009ade:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8009ae0:	7bfa      	ldrb	r2, [r7, #15]
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8009ae8:	7bfa      	ldrb	r2, [r7, #15]
 8009aea:	7b7b      	ldrb	r3, [r7, #13]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	789a      	ldrb	r2, [r3, #2]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	795a      	ldrb	r2, [r3, #5]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	709a      	strb	r2, [r3, #2]
  box->x1--;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	78da      	ldrb	r2, [r3, #3]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	70da      	strb	r2, [r3, #3]
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	78db      	ldrb	r3, [r3, #3]
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d813      	bhi.n	8009b88 <u8g_pb_Is8PixelVisible+0x44>
 8009b60:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <u8g_pb_Is8PixelVisible+0x24>)
 8009b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009b89 	.word	0x08009b89
 8009b6c:	08009b79 	.word	0x08009b79
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b81 	.word	0x08009b81
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	73bb      	strb	r3, [r7, #14]
      break;
 8009b7e:	e003      	b.n	8009b88 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	3b08      	subs	r3, #8
 8009b84:	73fb      	strb	r3, [r7, #15]
      break;
 8009b86:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8009b88:	7bba      	ldrb	r2, [r7, #14]
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff ff76 	bl	8009a80 <u8g_pb_IsYIntersection>
 8009b94:	4603      	mov	r3, r0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	795a      	ldrb	r2, [r3, #5]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	68b8      	ldr	r0, [r7, #8]
 8009bb8:	f7ff f870 	bl	8008c9c <u8g_WriteSequence>
 8009bbc:	4603      	mov	r3, r0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8009bc6:	b490      	push	{r4, r7}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	4608      	mov	r0, r1
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	70fb      	strb	r3, [r7, #3]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70bb      	strb	r3, [r7, #2]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	789b      	ldrb	r3, [r3, #2]
 8009bea:	78ba      	ldrb	r2, [r7, #2]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8009bf0:	2401      	movs	r4, #1
  y &= 0x07;
 8009bf2:	78bb      	ldrb	r3, [r7, #2]
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	78bb      	ldrb	r3, [r7, #2]
 8009bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009c02:	b2dc      	uxtb	r4, r3
  ptr += x;
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8009c0c:	787b      	ldrb	r3, [r7, #1]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d006      	beq.n	8009c20 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	4323      	orrs	r3, r4
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8009c1e:	e007      	b.n	8009c30 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8009c20:	43e3      	mvns	r3, r4
 8009c22:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	4023      	ands	r3, r4
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	701a      	strb	r2, [r3, #0]
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc90      	pop	{r4, r7}
 8009c38:	4770      	bx	lr

08009c3a <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	785a      	ldrb	r2, [r3, #1]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	789b      	ldrb	r3, [r3, #2]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d315      	bcc.n	8009c7c <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	785a      	ldrb	r2, [r3, #1]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	78db      	ldrb	r3, [r3, #3]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d811      	bhi.n	8009c80 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	795b      	ldrb	r3, [r3, #5]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d20d      	bcs.n	8009c84 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	7819      	ldrb	r1, [r3, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785a      	ldrb	r2, [r3, #1]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	791b      	ldrb	r3, [r3, #4]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ffa6 	bl	8009bc6 <u8g_pb8v1_set_pixel>
 8009c7a:	e004      	b.n	8009c86 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009c7c:	bf00      	nop
 8009c7e:	e002      	b.n	8009c86 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009c84:	bf00      	nop
}
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	78db      	ldrb	r3, [r3, #3]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d81a      	bhi.n	8009ce0 <u8g_pb8v1_Set8PixelOpt2+0x54>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc1 	.word	0x08009cc1
 8009cb4:	08009cc9 	.word	0x08009cc9
 8009cb8:	08009cd1 	.word	0x08009cd1
 8009cbc:	08009cd9 	.word	0x08009cd9
  {
    case 0: dx++; break;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
 8009cc6:	e00b      	b.n	8009ce0 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	73bb      	strb	r3, [r7, #14]
 8009cce:	e007      	b.n	8009ce0 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	73fb      	strb	r3, [r7, #15]
 8009cd6:	e003      	b.n	8009ce0 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	73bb      	strb	r3, [r7, #14]
 8009cde:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 8009ce0:	b263      	sxtb	r3, r4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da03      	bge.n	8009cee <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff ffa6 	bl	8009c3a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785a      	ldrb	r2, [r3, #1]
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	4413      	add	r3, r2
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8009d0a:	0063      	lsls	r3, r4, #1
 8009d0c:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	d1e6      	bne.n	8009ce0 <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	617b      	str	r3, [r7, #20]
  switch(msg)
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	3b0a      	subs	r3, #10
 8009d36:	2b3e      	cmp	r3, #62	; 0x3e
 8009d38:	f200 80ba 	bhi.w	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <u8g_dev_pb8v1_base_fn+0x28>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009eb1 	.word	0x08009eb1
 8009d48:	08009eb1 	.word	0x08009eb1
 8009d4c:	08009eb1 	.word	0x08009eb1
 8009d50:	08009eb1 	.word	0x08009eb1
 8009d54:	08009eb1 	.word	0x08009eb1
 8009d58:	08009eb1 	.word	0x08009eb1
 8009d5c:	08009eb1 	.word	0x08009eb1
 8009d60:	08009eb1 	.word	0x08009eb1
 8009d64:	08009eb1 	.word	0x08009eb1
 8009d68:	08009eb1 	.word	0x08009eb1
 8009d6c:	08009e63 	.word	0x08009e63
 8009d70:	08009e73 	.word	0x08009e73
 8009d74:	08009eb1 	.word	0x08009eb1
 8009d78:	08009e8d 	.word	0x08009e8d
 8009d7c:	08009eb1 	.word	0x08009eb1
 8009d80:	08009eb1 	.word	0x08009eb1
 8009d84:	08009eb1 	.word	0x08009eb1
 8009d88:	08009eb1 	.word	0x08009eb1
 8009d8c:	08009eb1 	.word	0x08009eb1
 8009d90:	08009eb1 	.word	0x08009eb1
 8009d94:	08009eb1 	.word	0x08009eb1
 8009d98:	08009eb1 	.word	0x08009eb1
 8009d9c:	08009eb1 	.word	0x08009eb1
 8009da0:	08009eb1 	.word	0x08009eb1
 8009da4:	08009eb1 	.word	0x08009eb1
 8009da8:	08009eb1 	.word	0x08009eb1
 8009dac:	08009eb1 	.word	0x08009eb1
 8009db0:	08009eb1 	.word	0x08009eb1
 8009db4:	08009eb1 	.word	0x08009eb1
 8009db8:	08009eb1 	.word	0x08009eb1
 8009dbc:	08009eb1 	.word	0x08009eb1
 8009dc0:	08009eb1 	.word	0x08009eb1
 8009dc4:	08009eb1 	.word	0x08009eb1
 8009dc8:	08009eb1 	.word	0x08009eb1
 8009dcc:	08009eb1 	.word	0x08009eb1
 8009dd0:	08009eb1 	.word	0x08009eb1
 8009dd4:	08009eb1 	.word	0x08009eb1
 8009dd8:	08009eb1 	.word	0x08009eb1
 8009ddc:	08009eb1 	.word	0x08009eb1
 8009de0:	08009eb1 	.word	0x08009eb1
 8009de4:	08009e59 	.word	0x08009e59
 8009de8:	08009eb1 	.word	0x08009eb1
 8009dec:	08009eb1 	.word	0x08009eb1
 8009df0:	08009eb1 	.word	0x08009eb1
 8009df4:	08009eb1 	.word	0x08009eb1
 8009df8:	08009eb1 	.word	0x08009eb1
 8009dfc:	08009eb1 	.word	0x08009eb1
 8009e00:	08009eb1 	.word	0x08009eb1
 8009e04:	08009eb1 	.word	0x08009eb1
 8009e08:	08009e41 	.word	0x08009e41
 8009e0c:	08009eb1 	.word	0x08009eb1
 8009e10:	08009eb1 	.word	0x08009eb1
 8009e14:	08009eb1 	.word	0x08009eb1
 8009e18:	08009eb1 	.word	0x08009eb1
 8009e1c:	08009eb1 	.word	0x08009eb1
 8009e20:	08009eb1 	.word	0x08009eb1
 8009e24:	08009eb1 	.word	0x08009eb1
 8009e28:	08009eb1 	.word	0x08009eb1
 8009e2c:	08009eb1 	.word	0x08009eb1
 8009e30:	08009eb1 	.word	0x08009eb1
 8009e34:	08009e97 	.word	0x08009e97
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009eab 	.word	0x08009eab
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6978      	ldr	r0, [r7, #20]
 8009e44:	f7ff fe7e 	bl	8009b44 <u8g_pb_Is8PixelVisible>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d02f      	beq.n	8009eae <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6978      	ldr	r0, [r7, #20]
 8009e52:	f7ff ff1b 	bl	8009c8c <u8g_pb8v1_Set8PixelOpt2>
      break;
 8009e56:	e02a      	b.n	8009eae <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6978      	ldr	r0, [r7, #20]
 8009e5c:	f7ff feed 	bl	8009c3a <u8g_pb8v1_SetPixel>
      break;
 8009e60:	e026      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8009e62:	6978      	ldr	r0, [r7, #20]
 8009e64:	f7ff fded 	bl	8009a42 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff fd9d 	bl	80099aa <u8g_page_First>
      break;
 8009e70:	e01e      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff fdb2 	bl	80099de <u8g_page_Next>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e016      	b.n	8009eb2 <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 8009e84:	6978      	ldr	r0, [r7, #20]
 8009e86:	f7ff fddc 	bl	8009a42 <u8g_pb_Clear>
      break;
 8009e8a:	e011      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f7ff fe38 	bl	8009b04 <u8g_pb_GetPageBox>
      break;
 8009e94:	e00c      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	795a      	ldrb	r2, [r3, #5]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
      break;
 8009e9e:	e007      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	785a      	ldrb	r2, [r3, #1]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	701a      	strb	r2, [r3, #0]
      break;
 8009ea8:	e002      	b.n	8009eb0 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e001      	b.n	8009eb2 <u8g_dev_pb8v1_base_fn+0x196>
      break;
 8009eae:	bf00      	nop
  }
  return 1;
 8009eb0:	2301      	movs	r3, #1
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop

08009ebc <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <memset>:
 8009ed2:	4402      	add	r2, r0
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d100      	bne.n	8009edc <memset+0xa>
 8009eda:	4770      	bx	lr
 8009edc:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee0:	e7f9      	b.n	8009ed6 <memset+0x4>
	...

08009ee4 <__libc_init_array>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	4d0d      	ldr	r5, [pc, #52]	; (8009f1c <__libc_init_array+0x38>)
 8009ee8:	4c0d      	ldr	r4, [pc, #52]	; (8009f20 <__libc_init_array+0x3c>)
 8009eea:	1b64      	subs	r4, r4, r5
 8009eec:	10a4      	asrs	r4, r4, #2
 8009eee:	2600      	movs	r6, #0
 8009ef0:	42a6      	cmp	r6, r4
 8009ef2:	d109      	bne.n	8009f08 <__libc_init_array+0x24>
 8009ef4:	4d0b      	ldr	r5, [pc, #44]	; (8009f24 <__libc_init_array+0x40>)
 8009ef6:	4c0c      	ldr	r4, [pc, #48]	; (8009f28 <__libc_init_array+0x44>)
 8009ef8:	f000 f818 	bl	8009f2c <_init>
 8009efc:	1b64      	subs	r4, r4, r5
 8009efe:	10a4      	asrs	r4, r4, #2
 8009f00:	2600      	movs	r6, #0
 8009f02:	42a6      	cmp	r6, r4
 8009f04:	d105      	bne.n	8009f12 <__libc_init_array+0x2e>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0c:	4798      	blx	r3
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7ee      	b.n	8009ef0 <__libc_init_array+0xc>
 8009f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f16:	4798      	blx	r3
 8009f18:	3601      	adds	r6, #1
 8009f1a:	e7f2      	b.n	8009f02 <__libc_init_array+0x1e>
 8009f1c:	0800c1d0 	.word	0x0800c1d0
 8009f20:	0800c1d0 	.word	0x0800c1d0
 8009f24:	0800c1d0 	.word	0x0800c1d0
 8009f28:	0800c1d4 	.word	0x0800c1d4

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
