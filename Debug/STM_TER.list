
STM_TER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aabc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8cc  0800b8cc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8cc  0800b8cc  0001b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8d4  0800b8d4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8d4  0800b8d4  0001b8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000088  0800b964  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800b964  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026995  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000518e  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  0004bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174a  00000000  00000000  0004da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026297  00000000  00000000  0004f1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261ce  00000000  00000000  00075479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4f61  00000000  00000000  0009b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008370  00000000  00000000  001805a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00188918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac34 	.word	0x0800ac34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ac34 	.word	0x0800ac34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <bno055_init>:
#include <CoVAPSy_bno055.h>
#include "i2c.h"
// Initialisation du BNO055
void bno055_init(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af02      	add	r7, sp, #8
	* This code uses a lot of HAL. Could probably do with a simpler bare metal
	* implementation. Current performance exceeds that of the sensor, so it is
	* not a priority. But could be a fun exercise in embedded programming :)))
	******************************************************************************
	*/
	HAL_Delay(2000);
 8000b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b82:	f001 fe05 	bl	8002790 <HAL_Delay>
	donnees_Tx_i2c[0] = 0x39;
 8000b86:	2339      	movs	r3, #57	; 0x39
 8000b88:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000b8a:	bf00      	nop
 8000b8c:	489b      	ldr	r0, [pc, #620]	; (8000dfc <bno055_init+0x284>)
 8000b8e:	f004 f87d 	bl	8004c8c <HAL_I2C_GetState>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b20      	cmp	r3, #32
 8000b96:	d1f9      	bne.n	8000b8c <bno055_init+0x14>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2150      	movs	r1, #80	; 0x50
 8000ba4:	4895      	ldr	r0, [pc, #596]	; (8000dfc <bno055_init+0x284>)
 8000ba6:	f003 fd73 	bl	8004690 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000baa:	bf00      	nop
 8000bac:	4893      	ldr	r0, [pc, #588]	; (8000dfc <bno055_init+0x284>)
 8000bae:	f004 f86d 	bl	8004c8c <HAL_I2C_GetState>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d1f9      	bne.n	8000bac <bno055_init+0x34>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000bb8:	463a      	mov	r2, r7
 8000bba:	2314      	movs	r3, #20
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2150      	movs	r1, #80	; 0x50
 8000bc2:	488e      	ldr	r0, [pc, #568]	; (8000dfc <bno055_init+0x284>)
 8000bc4:	f003 fe58 	bl	8004878 <HAL_I2C_Master_Receive>

	donnees_Tx_i2c[0] = 0x37;
 8000bc8:	2337      	movs	r3, #55	; 0x37
 8000bca:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000bcc:	bf00      	nop
 8000bce:	488b      	ldr	r0, [pc, #556]	; (8000dfc <bno055_init+0x284>)
 8000bd0:	f004 f85c 	bl	8004c8c <HAL_I2C_GetState>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	d1f9      	bne.n	8000bce <bno055_init+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2301      	movs	r3, #1
 8000be4:	2150      	movs	r1, #80	; 0x50
 8000be6:	4885      	ldr	r0, [pc, #532]	; (8000dfc <bno055_init+0x284>)
 8000be8:	f003 fd52 	bl	8004690 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000bec:	bf00      	nop
 8000bee:	4883      	ldr	r0, [pc, #524]	; (8000dfc <bno055_init+0x284>)
 8000bf0:	f004 f84c 	bl	8004c8c <HAL_I2C_GetState>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b20      	cmp	r3, #32
 8000bf8:	d1f9      	bne.n	8000bee <bno055_init+0x76>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000bfa:	463a      	mov	r2, r7
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2150      	movs	r1, #80	; 0x50
 8000c04:	487d      	ldr	r0, [pc, #500]	; (8000dfc <bno055_init+0x284>)
 8000c06:	f003 fe37 	bl	8004878 <HAL_I2C_Master_Receive>



	donnees_Tx_i2c[0] = 0x3F;
 8000c0a:	233f      	movs	r3, #63	; 0x3f
 8000c0c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000c12:	bf00      	nop
 8000c14:	4879      	ldr	r0, [pc, #484]	; (8000dfc <bno055_init+0x284>)
 8000c16:	f004 f839 	bl	8004c8c <HAL_I2C_GetState>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b20      	cmp	r3, #32
 8000c1e:	d1f9      	bne.n	8000c14 <bno055_init+0x9c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c20:	1d3a      	adds	r2, r7, #4
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	2150      	movs	r1, #80	; 0x50
 8000c2c:	4873      	ldr	r0, [pc, #460]	; (8000dfc <bno055_init+0x284>)
 8000c2e:	f003 fd2f 	bl	8004690 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000c32:	bf00      	nop
 8000c34:	4871      	ldr	r0, [pc, #452]	; (8000dfc <bno055_init+0x284>)
 8000c36:	f004 f829 	bl	8004c8c <HAL_I2C_GetState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d1f9      	bne.n	8000c34 <bno055_init+0xbc>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000c40:	463a      	mov	r2, r7
 8000c42:	2314      	movs	r3, #20
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	2150      	movs	r1, #80	; 0x50
 8000c4a:	486c      	ldr	r0, [pc, #432]	; (8000dfc <bno055_init+0x284>)
 8000c4c:	f003 fe14 	bl	8004878 <HAL_I2C_Master_Receive>

	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f003 fc71 	bl	800453c <HAL_GPIO_TogglePin>


	HAL_Delay(800); //delai 2000 ms
 8000c5a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c5e:	f001 fd97 	bl	8002790 <HAL_Delay>

	// A envoyer lors du premier test
	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000c62:	2307      	movs	r3, #7
 8000c64:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c6a:	bf00      	nop
 8000c6c:	4863      	ldr	r0, [pc, #396]	; (8000dfc <bno055_init+0x284>)
 8000c6e:	f004 f80d 	bl	8004c8c <HAL_I2C_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d1f9      	bne.n	8000c6c <bno055_init+0xf4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2302      	movs	r3, #2
 8000c82:	2150      	movs	r1, #80	; 0x50
 8000c84:	485d      	ldr	r0, [pc, #372]	; (8000dfc <bno055_init+0x284>)
 8000c86:	f003 fd03 	bl	8004690 <HAL_I2C_Master_Transmit>


	donnees_Tx_i2c[0] = ACC_CONF;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x08;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c92:	bf00      	nop
 8000c94:	4859      	ldr	r0, [pc, #356]	; (8000dfc <bno055_init+0x284>)
 8000c96:	f003 fff9 	bl	8004c8c <HAL_I2C_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d1f9      	bne.n	8000c94 <bno055_init+0x11c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000ca0:	1d3a      	adds	r2, r7, #4
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	4853      	ldr	r0, [pc, #332]	; (8000dfc <bno055_init+0x284>)
 8000cae:	f003 fcef 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_0;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x23;
 8000cb6:	2323      	movs	r3, #35	; 0x23
 8000cb8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000cba:	bf00      	nop
 8000cbc:	484f      	ldr	r0, [pc, #316]	; (8000dfc <bno055_init+0x284>)
 8000cbe:	f003 ffe5 	bl	8004c8c <HAL_I2C_GetState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b20      	cmp	r3, #32
 8000cc6:	d1f9      	bne.n	8000cbc <bno055_init+0x144>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	2150      	movs	r1, #80	; 0x50
 8000cd4:	4849      	ldr	r0, [pc, #292]	; (8000dfc <bno055_init+0x284>)
 8000cd6:	f003 fcdb 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_1;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000ce2:	bf00      	nop
 8000ce4:	4845      	ldr	r0, [pc, #276]	; (8000dfc <bno055_init+0x284>)
 8000ce6:	f003 ffd1 	bl	8004c8c <HAL_I2C_GetState>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b20      	cmp	r3, #32
 8000cee:	d1f9      	bne.n	8000ce4 <bno055_init+0x16c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	2150      	movs	r1, #80	; 0x50
 8000cfc:	483f      	ldr	r0, [pc, #252]	; (8000dfc <bno055_init+0x284>)
 8000cfe:	f003 fcc7 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MAG_CONF;
 8000d02:	2309      	movs	r3, #9
 8000d04:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x1B;
 8000d06:	231b      	movs	r3, #27
 8000d08:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d0a:	bf00      	nop
 8000d0c:	483b      	ldr	r0, [pc, #236]	; (8000dfc <bno055_init+0x284>)
 8000d0e:	f003 ffbd 	bl	8004c8c <HAL_I2C_GetState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d1f9      	bne.n	8000d0c <bno055_init+0x194>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2302      	movs	r3, #2
 8000d22:	2150      	movs	r1, #80	; 0x50
 8000d24:	4835      	ldr	r0, [pc, #212]	; (8000dfc <bno055_init+0x284>)
 8000d26:	f003 fcb3 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d32:	bf00      	nop
 8000d34:	4831      	ldr	r0, [pc, #196]	; (8000dfc <bno055_init+0x284>)
 8000d36:	f003 ffa9 	bl	8004c8c <HAL_I2C_GetState>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d1f9      	bne.n	8000d34 <bno055_init+0x1bc>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d40:	1d3a      	adds	r2, r7, #4
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2150      	movs	r1, #80	; 0x50
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <bno055_init+0x284>)
 8000d4e:	f003 fc9f 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = TEMP_SOURCE;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000d56:	2301      	movs	r3, #1
 8000d58:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d5a:	bf00      	nop
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <bno055_init+0x284>)
 8000d5e:	f003 ff95 	bl	8004c8c <HAL_I2C_GetState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d1f9      	bne.n	8000d5c <bno055_init+0x1e4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d68:	1d3a      	adds	r2, r7, #4
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2302      	movs	r3, #2
 8000d72:	2150      	movs	r1, #80	; 0x50
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <bno055_init+0x284>)
 8000d76:	f003 fc8b 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = UNIT_SEL;
 8000d7a:	233b      	movs	r3, #59	; 0x3b
 8000d7c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d82:	bf00      	nop
 8000d84:	481d      	ldr	r0, [pc, #116]	; (8000dfc <bno055_init+0x284>)
 8000d86:	f003 ff81 	bl	8004c8c <HAL_I2C_GetState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	d1f9      	bne.n	8000d84 <bno055_init+0x20c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d90:	1d3a      	adds	r2, r7, #4
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	2150      	movs	r1, #80	; 0x50
 8000d9c:	4817      	ldr	r0, [pc, #92]	; (8000dfc <bno055_init+0x284>)
 8000d9e:	f003 fc77 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PWR_MODE;
 8000da2:	233e      	movs	r3, #62	; 0x3e
 8000da4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000daa:	bf00      	nop
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <bno055_init+0x284>)
 8000dae:	f003 ff6d 	bl	8004c8c <HAL_I2C_GetState>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d1f9      	bne.n	8000dac <bno055_init+0x234>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000db8:	1d3a      	adds	r2, r7, #4
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	2150      	movs	r1, #80	; 0x50
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <bno055_init+0x284>)
 8000dc6:	f003 fc63 	bl	8004690 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MODE_REG;
 8000dca:	233d      	movs	r3, #61	; 0x3d
 8000dcc:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = FUSION_MODE;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000dd2:	bf00      	nop
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <bno055_init+0x284>)
 8000dd6:	f003 ff59 	bl	8004c8c <HAL_I2C_GetState>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d1f9      	bne.n	8000dd4 <bno055_init+0x25c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2302      	movs	r3, #2
 8000dea:	2150      	movs	r1, #80	; 0x50
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <bno055_init+0x284>)
 8000dee:	f003 fc4f 	bl	8004690 <HAL_I2C_Master_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000174 	.word	0x20000174

08000e00 <bno055_lecture_16bits>:

int16_t bno055_lecture_16bits(uint8_t num_registre) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[1];
	uint8_t donnees_Rx_i2c[2];
	donnees_Tx_i2c[0] = num_registre;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	733b      	strb	r3, [r7, #12]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000e0e:	bf00      	nop
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e12:	f003 ff3b 	bl	8004c8c <HAL_I2C_GetState>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	d1f9      	bne.n	8000e10 <bno055_lecture_16bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000e1c:	f107 020c 	add.w	r2, r7, #12
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	2150      	movs	r1, #80	; 0x50
 8000e2a:	4810      	ldr	r0, [pc, #64]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e2c:	f003 fc30 	bl	8004690 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000e30:	bf00      	nop
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e34:	f003 ff2a 	bl	8004c8c <HAL_I2C_GetState>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b20      	cmp	r3, #32
 8000e3c:	d1f9      	bne.n	8000e32 <bno055_lecture_16bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	2, 1);
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	2301      	movs	r3, #1
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	2150      	movs	r1, #80	; 0x50
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e4c:	f003 fd14 	bl	8004878 <HAL_I2C_Master_Receive>
	return ((uint16_t)(donnees_Rx_i2c[1]<<8) + donnees_Rx_i2c[0]);
 8000e50:	7a7b      	ldrb	r3, [r7, #9]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	7a3b      	ldrb	r3, [r7, #8]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b21b      	sxth	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000174 	.word	0x20000174

08000e70 <buzzer_start_frequency_Hz>:


#include "CoVAPSy_buzzer.h"

//Periode max 65 535 µs => Frequence entre 15 et 1 MHz
void buzzer_start_frequency_Hz(float frequency_Hz){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t periode_buzzer;
	periode_buzzer = FREQ_TIMER_6/frequency_Hz;
 8000e7a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000ed4 <buzzer_start_frequency_Hz+0x64>
 8000e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8a:	ee17 3a90 	vmov	r3, s15
 8000e8e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e92:	f006 f87f 	bl	8006f94 <HAL_TIM_Base_Stop_IT>
	htim6.Instance = TIM6;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <buzzer_start_frequency_Hz+0x6c>)
 8000e9a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e9e:	221f      	movs	r2, #31
 8000ea0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = periode_buzzer;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eb6:	f005 ff75 	bl	8006da4 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <buzzer_start_frequency_Hz+0x54>
	{
	    Error_Handler();
 8000ec0:	f000 ff40 	bl	8001d44 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000ec6:	f006 f811 	bl	8006eec <HAL_TIM_Base_Start_IT>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	49742400 	.word	0x49742400
 8000ed8:	20000420 	.word	0x20000420
 8000edc:	40001000 	.word	0x40001000

08000ee0 <buzzer_start>:

void buzzer_start(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <buzzer_start+0x10>)
 8000ee6:	f006 f801 	bl	8006eec <HAL_TIM_Base_Start_IT>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000420 	.word	0x20000420

08000ef4 <buzzer_stop>:

void buzzer_stop(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <buzzer_stop+0x10>)
 8000efa:	f006 f84b 	bl	8006f94 <HAL_TIM_Base_Stop_IT>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000420 	.word	0x20000420

08000f08 <buzzer_gamme>:

void buzzer_gamme(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	//HAL_Delay(110);
	//buzzer_start_frequency_Hz(1046);
	//HAL_Delay(370);
	//buzzer_start_frequency_Hz(659);
	//HAL_Delay(220);
	buzzer_start_frequency_Hz(1187);
 8000f0c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000f24 <buzzer_gamme+0x1c>
 8000f10:	f7ff ffae 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(160);
 8000f14:	20a0      	movs	r0, #160	; 0xa0
 8000f16:	f001 fc3b 	bl	8002790 <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim6);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <buzzer_gamme+0x20>)
 8000f1c:	f006 f83a 	bl	8006f94 <HAL_TIM_Base_Stop_IT>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	44946000 	.word	0x44946000
 8000f28:	20000420 	.word	0x20000420

08000f2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f44:	4a37      	ldr	r2, [pc, #220]	; (8001024 <MX_ADC1_Init+0xf8>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f62:	2208      	movs	r2, #8
 8000f64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f66:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000fa6:	f001 fddf 	bl	8002b68 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000fb0:	f000 fec8 	bl	8001d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_ADC1_Init+0xfc>)
 8000fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc0:	237f      	movs	r3, #127	; 0x7f
 8000fc2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000fd2:	f002 f843 	bl	800305c <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000fdc:	f000 feb2 	bl	8001d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_ADC1_Init+0x100>)
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_ADC1_Init+0xf4>)
 8000fee:	f002 f835 	bl	800305c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000ff8:	f000 fea4 	bl	8001d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_ADC1_Init+0x104>)
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001000:	2312      	movs	r3, #18
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0xf4>)
 800100a:	f002 f827 	bl	800305c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001014:	f000 fe96 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000a4 	.word	0x200000a4
 8001024:	50040000 	.word	0x50040000
 8001028:	19200040 	.word	0x19200040
 800102c:	21800100 	.word	0x21800100
 8001030:	25b00200 	.word	0x25b00200

08001034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09e      	sub	sp, #120	; 0x78
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2254      	movs	r2, #84	; 0x54
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f009 f969 	bl	800a32c <memset>
  if(adcHandle->Instance==ADC1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a3b      	ldr	r2, [pc, #236]	; (800114c <HAL_ADC_MspInit+0x118>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d16e      	bne.n	8001142 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001068:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800106a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800106e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001078:	2310      	movs	r3, #16
 800107a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800107c:	2307      	movs	r3, #7
 800107e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4618      	mov	r0, r3
 8001094:	f005 f818 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800109e:	f000 fe51 	bl	8001d44 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80010d2:	231a      	movs	r3, #26
 80010d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d6:	230b      	movs	r3, #11
 80010d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f003 f8a6 	bl	8004238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_ADC_MspInit+0x124>)
 80010f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001118:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800111c:	2220      	movs	r2, #32
 800111e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001128:	f002 fe8e 	bl	8003e48 <HAL_DMA_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001132:	f000 fe07 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800113a:	64da      	str	r2, [r3, #76]	; 0x4c
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3778      	adds	r7, #120	; 0x78
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	50040000 	.word	0x50040000
 8001150:	40021000 	.word	0x40021000
 8001154:	20000108 	.word	0x20000108
 8001158:	40020008 	.word	0x40020008

0800115c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_CRC_Init+0x3c>)
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <MX_CRC_Init+0x40>)
 8001164:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_CRC_Init+0x3c>)
 8001168:	2200      	movs	r2, #0
 800116a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_CRC_Init+0x3c>)
 800116e:	2200      	movs	r2, #0
 8001170:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_CRC_Init+0x3c>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_CRC_Init+0x3c>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_CRC_Init+0x3c>)
 8001180:	2201      	movs	r2, #1
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_CRC_Init+0x3c>)
 8001186:	f002 fd75 	bl	8003c74 <HAL_CRC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001190:	f000 fdd8 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000150 	.word	0x20000150
 800119c:	40023000 	.word	0x40023000

080011a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_CRC_MspInit+0x38>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10b      	bne.n	80011ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_CRC_MspInit+0x3c>)
 80011b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_CRC_MspInit+0x3c>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011bc:	6493      	str	r3, [r2, #72]	; 0x48
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_CRC_MspInit+0x3c>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023000 	.word	0x40023000
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_DMA_Init+0x70>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	4a19      	ldr	r2, [pc, #100]	; (8001250 <MX_DMA_Init+0x70>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6493      	str	r3, [r2, #72]	; 0x48
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_DMA_Init+0x70>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_DMA_Init+0x70>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_DMA_Init+0x70>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6493      	str	r3, [r2, #72]	; 0x48
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_DMA_Init+0x70>)
 800120c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200b      	movs	r0, #11
 800121c:	f002 fcf3 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001220:	200b      	movs	r0, #11
 8001222:	f002 fd0c 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2038      	movs	r0, #56	; 0x38
 800122c:	f002 fceb 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001230:	2038      	movs	r0, #56	; 0x38
 8001232:	f002 fd04 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2039      	movs	r0, #57	; 0x39
 800123c:	f002 fce3 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001240:	2039      	movs	r0, #57	; 0x39
 8001242:	f002 fcfc 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b3e      	ldr	r3, [pc, #248]	; (8001364 <MX_GPIO_Init+0x110>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <MX_GPIO_Init+0x110>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <MX_GPIO_Init+0x110>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <MX_GPIO_Init+0x110>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a37      	ldr	r2, [pc, #220]	; (8001364 <MX_GPIO_Init+0x110>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <MX_GPIO_Init+0x110>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <MX_GPIO_Init+0x110>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a31      	ldr	r2, [pc, #196]	; (8001364 <MX_GPIO_Init+0x110>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <MX_GPIO_Init+0x110>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2184      	movs	r1, #132	; 0x84
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f003 f927 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2102      	movs	r1, #2
 80012c2:	4829      	ldr	r0, [pc, #164]	; (8001368 <MX_GPIO_Init+0x114>)
 80012c4:	f003 f922 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80012c8:	2384      	movs	r3, #132	; 0x84
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f002 ffa9 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <MX_GPIO_Init+0x114>)
 80012fa:	f002 ff9d 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80012fe:	2302      	movs	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4814      	ldr	r0, [pc, #80]	; (8001368 <MX_GPIO_Init+0x114>)
 8001316:	f002 ff8f 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP1_Pin;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f002 ff81 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001348:	2303      	movs	r3, #3
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f002 ff6f 	bl	8004238 <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400

0800136c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_I2C1_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_I2C1_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_I2C1_Init+0x74>)
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <MX_I2C1_Init+0x7c>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_I2C1_Init+0x74>)
 8001384:	2201      	movs	r2, #1
 8001386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_I2C1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_I2C1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_I2C1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_I2C1_Init+0x74>)
 80013a8:	f003 f8e2 	bl	8004570 <HAL_I2C_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013b2:	f000 fcc7 	bl	8001d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <MX_I2C1_Init+0x74>)
 80013ba:	f003 ff41 	bl	8005240 <HAL_I2CEx_ConfigAnalogFilter>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 fcbe 	bl	8001d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_I2C1_Init+0x74>)
 80013cc:	f003 ff83 	bl	80052d6 <HAL_I2CEx_ConfigDigitalFilter>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f000 fcb5 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000174 	.word	0x20000174
 80013e4:	40005400 	.word	0x40005400
 80013e8:	00707cbb 	.word	0x00707cbb

080013ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09e      	sub	sp, #120	; 0x78
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f008 ff8d 	bl	800a32c <memset>
  if(i2cHandle->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_I2C_MspInit+0xa4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d135      	bne.n	8001488 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fe4d 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f000 fc86 	bl	8001d44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a15      	ldr	r2, [pc, #84]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001450:	23c0      	movs	r3, #192	; 0xc0
 8001452:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001460:	2304      	movs	r3, #4
 8001462:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001468:	4619      	mov	r1, r3
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0xac>)
 800146c:	f002 fee4 	bl	8004238 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 8001476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_I2C_MspInit+0xa8>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3778      	adds	r7, #120	; 0x78
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <CRC_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void CRC_Init(void) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0

	//Enable CRC clock, then reset CRC buffer.
    __HAL_RCC_CRC_CLK_ENABLE();
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <CRC_Init+0x38>)
 80014a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <CRC_Init+0x38>)
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ac:	6493      	str	r3, [r2, #72]	; 0x48
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <CRC_Init+0x38>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
    CRC->CR |= CRC_CR_RESET;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <CRC_Init+0x3c>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <CRC_Init+0x3c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6093      	str	r3, [r2, #8]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40023000 	.word	0x40023000

080014dc <SRF10_Init>:


void SRF10_Init(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af02      	add	r7, sp, #8
	//Set correct ranges.
	uint8_t donnees_Tx_i2c[2];
	donnees_Tx_i2c[0]=0x02;
 80014e2:	2302      	movs	r3, #2
 80014e4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0xB;
 80014e6:	230b      	movs	r3, #11
 80014e8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80014ea:	bf00      	nop
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <SRF10_Init+0x60>)
 80014ee:	f003 fbcd 	bl	8004c8c <HAL_I2C_GetState>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d1f9      	bne.n	80014ec <SRF10_Init+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 80014f8:	1d3a      	adds	r2, r7, #4
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2302      	movs	r3, #2
 8001502:	21e0      	movs	r1, #224	; 0xe0
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <SRF10_Init+0x60>)
 8001506:	f003 f8c3 	bl	8004690 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

	donnees_Tx_i2c[0]=0x01;
 800150a:	2301      	movs	r3, #1
 800150c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0x09;
 800150e:	2309      	movs	r3, #9
 8001510:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001512:	bf00      	nop
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <SRF10_Init+0x60>)
 8001516:	f003 fbb9 	bl	8004c8c <HAL_I2C_GetState>
 800151a:	4603      	mov	r3, r0
 800151c:	2b20      	cmp	r3, #32
 800151e:	d1f9      	bne.n	8001514 <SRF10_Init+0x38>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 8001520:	1d3a      	adds	r2, r7, #4
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2302      	movs	r3, #2
 800152a:	21e0      	movs	r1, #224	; 0xe0
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <SRF10_Init+0x60>)
 800152e:	f003 f8af 	bl	8004690 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000174 	.word	0x20000174

08001540 <u8g_Delay>:




uint8_t control =0;
void u8g_Delay(uint16_t val) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(val);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 f91f 	bl	8002790 <HAL_Delay>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
    static uint32_t i, j;
    static uint32_t freq;
    freq = HAL_RCC_GetSysClockFreq() / 1000000;
 8001566:	f004 fc8b 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 800156a:	4603      	mov	r3, r0
 800156c:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <u8g_xMicroDelay+0x6c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	4a15      	ldr	r2, [pc, #84]	; (80015cc <u8g_xMicroDelay+0x70>)
 8001576:	6013      	str	r3, [r2, #0]

    for (i = 0; i < val;) {
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <u8g_xMicroDelay+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e018      	b.n	80015b2 <u8g_xMicroDelay+0x56>
        for (j = 0; j < freq; ++j) {
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <u8g_xMicroDelay+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e009      	b.n	800159c <u8g_xMicroDelay+0x40>
            ++j;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <u8g_xMicroDelay+0x78>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <u8g_xMicroDelay+0x78>)
 8001590:	6013      	str	r3, [r2, #0]
        for (j = 0; j < freq; ++j) {
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <u8g_xMicroDelay+0x78>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <u8g_xMicroDelay+0x78>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <u8g_xMicroDelay+0x78>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <u8g_xMicroDelay+0x70>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3ef      	bcc.n	8001588 <u8g_xMicroDelay+0x2c>
        }
        ++i;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <u8g_xMicroDelay+0x74>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <u8g_xMicroDelay+0x74>)
 80015b0:	6013      	str	r3, [r2, #0]
    for (i = 0; i < val;) {
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <u8g_xMicroDelay+0x74>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8e1      	bhi.n	8001580 <u8g_xMicroDelay+0x24>
    }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	20000230 	.word	0x20000230
 80015d0:	20000234 	.word	0x20000234
 80015d4:	20000238 	.word	0x20000238

080015d8 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff ffbd 	bl	800155c <u8g_xMicroDelay>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f7ff ffb6 	bl	800155c <u8g_xMicroDelay>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <u8g_com_arm_stm32_sh_i2c_fn>:

uint8_t u8g_com_arm_stm32_sh_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	4613      	mov	r3, r2
 8001604:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d845      	bhi.n	8001698 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <u8g_com_arm_stm32_sh_i2c_fn+0x20>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	08001699 	.word	0x08001699
 8001618:	08001635 	.word	0x08001635
 800161c:	0800163b 	.word	0x0800163b
 8001620:	08001699 	.word	0x08001699
 8001624:	08001699 	.word	0x08001699
 8001628:	08001655 	.word	0x08001655
 800162c:	08001677 	.word	0x08001677
 8001630:	08001677 	.word	0x08001677
    case U8G_COM_MSG_STOP:
        break;

    case U8G_COM_MSG_INIT:
        u8g_MicroDelay();
 8001634:	f7ff ffd0 	bl	80015d8 <u8g_MicroDelay>
        break;
 8001638:	e02e      	b.n	8001698 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_ADDRESS:
        if (arg_val == 0) {
 800163a:	7abb      	ldrb	r3, [r7, #10]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <u8g_com_arm_stm32_sh_i2c_fn+0x54>
            control = 0;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e002      	b.n	800164e <u8g_com_arm_stm32_sh_i2c_fn+0x5a>
        } else {
            control = 0x40;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	701a      	strb	r2, [r3, #0]
        }
        u8g_10MicroDelay();
 800164e:	f7ff ffca 	bl	80015e6 <u8g_10MicroDelay>
        break;
 8001652:	e021      	b.n	8001698 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_BYTE: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, &arg_val, 1, 10000);
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b29a      	uxth	r2, r3
 800165a:	f242 7310 	movw	r3, #10000	; 0x2710
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2301      	movs	r3, #1
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f107 030a 	add.w	r3, r7, #10
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	2178      	movs	r1, #120	; 0x78
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8001670:	f003 f9f8 	bl	8004a64 <HAL_I2C_Mem_Write>
    }
        break;
 8001674:	e010      	b.n	8001698 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, arg_ptr, arg_val, 10000);
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b29a      	uxth	r2, r3
 800167c:	7abb      	ldrb	r3, [r7, #10]
 800167e:	b29b      	uxth	r3, r3
 8001680:	f242 7110 	movw	r1, #10000	; 0x2710
 8001684:	9102      	str	r1, [sp, #8]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2178      	movs	r1, #120	; 0x78
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8001692:	f003 f9e7 	bl	8004a64 <HAL_I2C_Mem_Write>
    }

        break;
 8001696:	bf00      	nop
    }
    return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000022c 	.word	0x2000022c
 80016a8:	20000174 	.word	0x20000174
 80016ac:	00000000 	.word	0x00000000

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b09e      	sub	sp, #120	; 0x78
 80016b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f000 fff6 	bl	80026a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 fa2b 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f7ff fdc9 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c2:	f7ff fd8d 	bl	80011e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80016c6:	f7ff fc31 	bl	8000f2c <MX_ADC1_Init>
  MX_SPI3_Init();
 80016ca:	f000 fb41 	bl	8001d50 <MX_SPI3_Init>
  MX_TIM1_Init();
 80016ce:	f000 fcdf 	bl	8002090 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016d2:	f000 ff37 	bl	8002544 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016d6:	f000 fd95 	bl	8002204 <MX_TIM2_Init>
  MX_I2C1_Init();
 80016da:	f7ff fe47 	bl	800136c <MX_I2C1_Init>
  MX_TIM6_Init();
 80016de:	f000 fe01 	bl	80022e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80016e2:	f000 fe35 	bl	8002350 <MX_TIM7_Init>
  MX_CRC_Init();
 80016e6:	f7ff fd39 	bl	800115c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80016ea:	48b9      	ldr	r0, [pc, #740]	; (80019d0 <main+0x320>)
 80016ec:	f005 fbfe 	bl	8006eec <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016f0:	2100      	movs	r1, #0
 80016f2:	48b7      	ldr	r0, [pc, #732]	; (80019d0 <main+0x320>)
 80016f4:	f005 fd40 	bl	8007178 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 80016f8:	48b6      	ldr	r0, [pc, #728]	; (80019d4 <main+0x324>)
 80016fa:	f005 fbab 	bl	8006e54 <HAL_TIM_Base_Start>

  buzzer_start();
 80016fe:	f7ff fbef 	bl	8000ee0 <buzzer_start>
  buzzer_gamme();
 8001702:	f7ff fc01 	bl	8000f08 <buzzer_gamme>

  CRC_Init();
 8001706:	f7ff fec9 	bl	800149c <CRC_Init>

  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f002 ff14 	bl	800453c <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001714:	2104      	movs	r1, #4
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f002 ff0f 	bl	800453c <HAL_GPIO_TogglePin>
  HAL_Delay(10);
 800171e:	200a      	movs	r0, #10
 8001720:	f001 f836 	bl	8002790 <HAL_Delay>
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f002 ff07 	bl	800453c <HAL_GPIO_TogglePin>


  bno055_init();
 800172e:	f7ff fa23 	bl	8000b78 <bno055_init>
  SRF10_Init();
 8001732:	f7ff fed3 	bl	80014dc <SRF10_Init>

  u8g_InitComFn(&u8g, &u8g_dev_sh1106_128x64_i2c, u8g_com_arm_stm32_sh_i2c_fn);
 8001736:	4aa8      	ldr	r2, [pc, #672]	; (80019d8 <main+0x328>)
 8001738:	49a8      	ldr	r1, [pc, #672]	; (80019dc <main+0x32c>)
 800173a:	48a9      	ldr	r0, [pc, #676]	; (80019e0 <main+0x330>)
 800173c:	f008 fad7 	bl	8009cee <u8g_InitComFn>
  u8g_Begin(&u8g);
 8001740:	48a7      	ldr	r0, [pc, #668]	; (80019e0 <main+0x330>)
 8001742:	f008 fabd 	bl	8009cc0 <u8g_Begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  u8g_FirstPage(&u8g);
 8001746:	48a6      	ldr	r0, [pc, #664]	; (80019e0 <main+0x330>)
 8001748:	f008 fae9 	bl	8009d1e <u8g_FirstPage>
	do {
		u8g_SetFont(&u8g, u8g_font_profont12);
 800174c:	49a5      	ldr	r1, [pc, #660]	; (80019e4 <main+0x334>)
 800174e:	48a4      	ldr	r0, [pc, #656]	; (80019e0 <main+0x330>)
 8001750:	f008 f962 	bl	8009a18 <u8g_SetFont>
		sprintf(text,"----------------------");
 8001754:	463b      	mov	r3, r7
 8001756:	49a4      	ldr	r1, [pc, #656]	; (80019e8 <main+0x338>)
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fdc7 	bl	800a2ec <siprintf>
		u8g_DrawStr(&u8g, 0, 12,  text);
 800175e:	463b      	mov	r3, r7
 8001760:	220c      	movs	r2, #12
 8001762:	2100      	movs	r1, #0
 8001764:	489e      	ldr	r0, [pc, #632]	; (80019e0 <main+0x330>)
 8001766:	f008 f891 	bl	800988c <u8g_DrawStr>
		sprintf(text,"   Quand je pense a   ");
 800176a:	463b      	mov	r3, r7
 800176c:	499f      	ldr	r1, [pc, #636]	; (80019ec <main+0x33c>)
 800176e:	4618      	mov	r0, r3
 8001770:	f008 fdbc 	bl	800a2ec <siprintf>
		u8g_DrawStr(&u8g, 0, 24,  text);
 8001774:	463b      	mov	r3, r7
 8001776:	2218      	movs	r2, #24
 8001778:	2100      	movs	r1, #0
 800177a:	4899      	ldr	r0, [pc, #612]	; (80019e0 <main+0x330>)
 800177c:	f008 f886 	bl	800988c <u8g_DrawStr>
		sprintf(text,"     toi, je suis     ");
 8001780:	463b      	mov	r3, r7
 8001782:	499b      	ldr	r1, [pc, #620]	; (80019f0 <main+0x340>)
 8001784:	4618      	mov	r0, r3
 8001786:	f008 fdb1 	bl	800a2ec <siprintf>
		u8g_DrawStr(&u8g, 0, 36,  text);
 800178a:	463b      	mov	r3, r7
 800178c:	2224      	movs	r2, #36	; 0x24
 800178e:	2100      	movs	r1, #0
 8001790:	4893      	ldr	r0, [pc, #588]	; (80019e0 <main+0x330>)
 8001792:	f008 f87b 	bl	800988c <u8g_DrawStr>
		sprintf(text,"        patate        ");
 8001796:	463b      	mov	r3, r7
 8001798:	4996      	ldr	r1, [pc, #600]	; (80019f4 <main+0x344>)
 800179a:	4618      	mov	r0, r3
 800179c:	f008 fda6 	bl	800a2ec <siprintf>
		u8g_DrawStr(&u8g, 0, 48,  text);
 80017a0:	463b      	mov	r3, r7
 80017a2:	2230      	movs	r2, #48	; 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	488e      	ldr	r0, [pc, #568]	; (80019e0 <main+0x330>)
 80017a8:	f008 f870 	bl	800988c <u8g_DrawStr>
		sprintf(text,"----------------------");
 80017ac:	463b      	mov	r3, r7
 80017ae:	498e      	ldr	r1, [pc, #568]	; (80019e8 <main+0x338>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f008 fd9b 	bl	800a2ec <siprintf>
		u8g_DrawStr(&u8g, 0, 60,  text);
 80017b6:	463b      	mov	r3, r7
 80017b8:	223c      	movs	r2, #60	; 0x3c
 80017ba:	2100      	movs	r1, #0
 80017bc:	4888      	ldr	r0, [pc, #544]	; (80019e0 <main+0x330>)
 80017be:	f008 f865 	bl	800988c <u8g_DrawStr>
	} while (u8g_NextPage(&u8g));
 80017c2:	4887      	ldr	r0, [pc, #540]	; (80019e0 <main+0x330>)
 80017c4:	f008 fab9 	bl	8009d3a <u8g_NextPage>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1be      	bne.n	800174c <main+0x9c>

  buzzer_stop();
 80017ce:	f7ff fb91 	bl	8000ef4 <buzzer_stop>
  while (1)
  {
	  //démarrage de la conversion ADC des 3 canaux
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 80017d2:	2203      	movs	r2, #3
 80017d4:	4988      	ldr	r1, [pc, #544]	; (80019f8 <main+0x348>)
 80017d6:	4889      	ldr	r0, [pc, #548]	; (80019fc <main+0x34c>)
 80017d8:	f001 fb9e 	bl	8002f18 <HAL_ADC_Start_DMA>

	  //lecture ultrason
	  elapsed_time_us_ms = HAL_GetTick() - mesure_US_ticks;
 80017dc:	f000 ffcc 	bl	8002778 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b87      	ldr	r3, [pc, #540]	; (8001a00 <main+0x350>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a86      	ldr	r2, [pc, #536]	; (8001a04 <main+0x354>)
 80017ea:	6013      	str	r3, [r2, #0]
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 80017ec:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <main+0x354>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d960      	bls.n	80018b6 <main+0x206>
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f002 fe9f 	bl	800453c <HAL_GPIO_TogglePin>
		  donnees_Tx_i2c[0]=0x02;
 80017fe:	2302      	movs	r3, #2
 8001800:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001804:	bf00      	nop
 8001806:	4880      	ldr	r0, [pc, #512]	; (8001a08 <main+0x358>)
 8001808:	f003 fa40 	bl	8004c8c <HAL_I2C_GetState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b20      	cmp	r3, #32
 8001810:	d1f9      	bne.n	8001806 <main+0x156>
		  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 1, 1000); // HAL should really be replaced by direct register access.
 8001812:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	21e0      	movs	r1, #224	; 0xe0
 8001820:	4879      	ldr	r0, [pc, #484]	; (8001a08 <main+0x358>)
 8001822:	f002 ff35 	bl	8004690 <HAL_I2C_Master_Transmit>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001826:	bf00      	nop
 8001828:	4877      	ldr	r0, [pc, #476]	; (8001a08 <main+0x358>)
 800182a:	f003 fa2f 	bl	8004c8c <HAL_I2C_GetState>
 800182e:	4603      	mov	r3, r0
 8001830:	2b20      	cmp	r3, #32
 8001832:	d1f9      	bne.n	8001828 <main+0x178>
		  HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 2, 1);
 8001834:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001838:	2301      	movs	r3, #1
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	21e0      	movs	r1, #224	; 0xe0
 8001840:	4871      	ldr	r0, [pc, #452]	; (8001a08 <main+0x358>)
 8001842:	f003 f819 	bl	8004878 <HAL_I2C_Master_Receive>
		  if (donnees_Rx_i2c[0] != 0x06) {
 8001846:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800184a:	2b06      	cmp	r3, #6
 800184c:	d033      	beq.n	80018b6 <main+0x206>
			  US_value = (uint16_t)(donnees_Rx_i2c[0]<<8) + donnees_Rx_i2c[1];
 800184e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001852:	b29b      	uxth	r3, r3
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <main+0x35c>)
 8001864:	801a      	strh	r2, [r3, #0]
			  distance_US_cm = US_value * US_SMOOTHING + (1 - US_SMOOTHING) * distance_US_cm;
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <main+0x35c>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe ff7c 	bl	8000768 <__aeabi_i2d>
 8001870:	a353      	add	r3, pc, #332	; (adr r3, 80019c0 <main+0x310>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fcfb 	bl	8000270 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	461d      	mov	r5, r3
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <main+0x360>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe ff6e 	bl	8000768 <__aeabi_i2d>
 800188c:	a34e      	add	r3, pc, #312	; (adr r3, 80019c8 <main+0x318>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fced 	bl	8000270 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fe17 	bl	80004d0 <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7fe ffc7 	bl	800083c <__aeabi_d2uiz>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <main+0x360>)
 80018b4:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  yaw = bno055_lecture_16bits(EULER_HEADING_16bits);
 80018b6:	201a      	movs	r0, #26
 80018b8:	f7ff faa2 	bl	8000e00 <bno055_lecture_16bits>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <main+0x364>)
 80018c2:	801a      	strh	r2, [r3, #0]

	  elapsed_time_speed_ms = HAL_GetTick() - mesure_vitesse_ms;
 80018c4:	f000 ff58 	bl	8002778 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <main+0x368>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <main+0x36c>)
 80018d2:	6013      	str	r3, [r2, #0]
	  if(elapsed_time_speed_ms > SPEED_DELTAT_THRESHOLD_MS)
 80018d4:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <main+0x36c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b1a      	cmp	r3, #26
 80018da:	d902      	bls.n	80018e2 <main+0x232>
	  {
		  vitesse_mesuree_mm_s = 0;
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <main+0x370>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	  }

	  //Demande de lecture ultrason
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <main+0x354>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d91b      	bls.n	8001922 <main+0x272>
		  	  donnees_Tx_i2c[0]=0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		  	  donnees_Tx_i2c[1]=0x51;
 80018f0:	2351      	movs	r3, #81	; 0x51
 80018f2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		  	  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80018f6:	bf00      	nop
 80018f8:	4843      	ldr	r0, [pc, #268]	; (8001a08 <main+0x358>)
 80018fa:	f003 f9c7 	bl	8004c8c <HAL_I2C_GetState>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b20      	cmp	r3, #32
 8001902:	d1f9      	bne.n	80018f8 <main+0x248>
		  	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000);
 8001904:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2302      	movs	r3, #2
 8001910:	21e0      	movs	r1, #224	; 0xe0
 8001912:	483d      	ldr	r0, [pc, #244]	; (8001a08 <main+0x358>)
 8001914:	f002 febc 	bl	8004690 <HAL_I2C_Master_Transmit>
		  	  mesure_US_ticks = HAL_GetTick();
 8001918:	f000 ff2e 	bl	8002778 <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
 800191e:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <main+0x350>)
 8001920:	6013      	str	r3, [r2, #0]
	  }

	  //attente de la fin de la conversion ADC, si jamais ce n'est pas encore fini
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8001922:	2101      	movs	r1, #1
 8001924:	4835      	ldr	r0, [pc, #212]	; (80019fc <main+0x34c>)
 8001926:	f001 fa67 	bl	8002df8 <HAL_ADC_PollForConversion>

	  //Reset CRC;
	  CRC->CR = 1;
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <main+0x374>)
 800192c:	2201      	movs	r2, #1
 800192e:	609a      	str	r2, [r3, #8]

	  SPI_TxBuffer[0] = (uint8_t)((lectures_ADC[2] >> 8) & 0xFF);
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <main+0x348>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <main+0x378>)
 800193a:	701a      	strb	r2, [r3, #0]
	  SPI_TxBuffer[1] = (uint8_t)(lectures_ADC[2] & 0xFF); //battery_voltage (unit ?)
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <main+0x348>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <main+0x378>)
 8001944:	705a      	strb	r2, [r3, #1]
	  SPI_TxBuffer[2] = (uint8_t)((yaw >> 8) & 0xFF);
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <main+0x364>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <main+0x378>)
 8001952:	709a      	strb	r2, [r3, #2]
	  SPI_TxBuffer[3] = (uint8_t)(yaw & 0xFF);
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <main+0x364>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <main+0x378>)
 800195c:	70da      	strb	r2, [r3, #3]

	  CRC->DR = (uint32_t)((((uint16_t) lectures_ADC[2] << 16)) | ((uint16_t) yaw));
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <main+0x348>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	b29b      	uxth	r3, r3
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <main+0x364>)
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <main+0x374>)
 800196e:	601a      	str	r2, [r3, #0]


	  SPI_TxBuffer[4] = (uint8_t)((((uint16_t)(lectures_ADC[0])) >> 8) & 0xFF);
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <main+0x348>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <main+0x378>)
 800197e:	711a      	strb	r2, [r3, #4]
	  SPI_TxBuffer[5] = (uint8_t)(((uint16_t)(lectures_ADC[0])) & 0xFF);    // Octet de poids faible de l'IR gauche
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <main+0x348>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <main+0x378>)
 8001988:	715a      	strb	r2, [r3, #5]
	  SPI_TxBuffer[6] = (uint8_t)((((uint16_t)(lectures_ADC[1])) >> 8) & 0xFF);
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <main+0x348>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <main+0x378>)
 8001998:	719a      	strb	r2, [r3, #6]
	  SPI_TxBuffer[7] = (uint8_t)(((uint16_t)(lectures_ADC[1])) & 0xFF);    // Octet de poids faible de l'IR droit
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <main+0x348>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <main+0x378>)
 80019a2:	71da      	strb	r2, [r3, #7]

	  CRC->DR = (uint32_t)(((uint16_t) lectures_ADC[0] << 16) | ((uint16_t) lectures_ADC[1])); //Put 4 next bytes in the CRC register
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <main+0x348>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <main+0x348>)
 80019ae:	6852      	ldr	r2, [r2, #4]
 80019b0:	b292      	uxth	r2, r2
 80019b2:	431a      	orrs	r2, r3
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <main+0x374>)
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e038      	b.n	8001a2c <main+0x37c>
 80019ba:	bf00      	nop
 80019bc:	f3af 8000 	nop.w
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fb99999 	.word	0x3fb99999
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	3feccccc 	.word	0x3feccccc
 80019d0:	200003d4 	.word	0x200003d4
 80019d4:	2000046c 	.word	0x2000046c
 80019d8:	080015f5 	.word	0x080015f5
 80019dc:	2000002c 	.word	0x2000002c
 80019e0:	200001f0 	.word	0x200001f0
 80019e4:	0800ad3c 	.word	0x0800ad3c
 80019e8:	0800ac4c 	.word	0x0800ac4c
 80019ec:	0800ac64 	.word	0x0800ac64
 80019f0:	0800ac7c 	.word	0x0800ac7c
 80019f4:	0800ac94 	.word	0x0800ac94
 80019f8:	200001cc 	.word	0x200001cc
 80019fc:	200000a4 	.word	0x200000a4
 8001a00:	200001e4 	.word	0x200001e4
 8001a04:	200001ec 	.word	0x200001ec
 8001a08:	20000174 	.word	0x20000174
 8001a0c:	200001dc 	.word	0x200001dc
 8001a10:	200001da 	.word	0x200001da
 8001a14:	200001d8 	.word	0x200001d8
 8001a18:	200001e0 	.word	0x200001e0
 8001a1c:	200001e8 	.word	0x200001e8
 8001a20:	200001c8 	.word	0x200001c8
 8001a24:	40023000 	.word	0x40023000
 8001a28:	20000000 	.word	0x20000000

	  SPI_TxBuffer[8] = (uint8_t)(vitesse_mesuree_mm_s/100);
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <main+0x448>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a32      	ldr	r2, [pc, #200]	; (8001afc <main+0x44c>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <main+0x450>)
 8001a3c:	721a      	strb	r2, [r3, #8]
	  SPI_TxBuffer[9] = (uint8_t)(vitesse_mesuree_mm_s - (vitesse_mesuree_mm_s/100)*100);
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <main+0x448>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <main+0x448>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	492c      	ldr	r1, [pc, #176]	; (8001afc <main+0x44c>)
 8001a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	0089      	lsls	r1, r1, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	0088      	lsls	r0, r1, #2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	440b      	add	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <main+0x450>)
 8001a6c:	725a      	strb	r2, [r3, #9]
	  //SPI_TxBuffer[8] = (uint8_t)((vitesse_mesuree_mm_s >> 8) & 0xFF); // Octet de poids fort de vitesse_mesuree_mm_s
	  //SPI_TxBuffer[9] = (uint8_t)(vitesse_mesuree_mm_s & 0xFF);    // Octet de poids faible de vitesse_mesuree_mm_s
	  SPI_TxBuffer[10] = (uint8_t)((distance_US_cm >> 8) & 0xFF);
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <main+0x454>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <main+0x450>)
 8001a7a:	729a      	strb	r2, [r3, #10]
	  SPI_TxBuffer[11] = (uint8_t)((distance_US_cm &0xFF));
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <main+0x454>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <main+0x450>)
 8001a84:	72da      	strb	r2, [r3, #11]

	  CRC->DR = (uint32_t)(((uint16_t) vitesse_mesuree_mm_s << 16) | ((uint16_t) distance_US_cm));
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <main+0x448>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <main+0x454>)
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <main+0x458>)
 8001a96:	601a      	str	r2, [r3, #0]

	  uint32_t checksum = CRC->DR; //Read from register to get computer value
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <main+0x458>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	66fb      	str	r3, [r7, #108]	; 0x6c

	  //Send the checksum over SPI.
	  SPI_TxBuffer[15] = (uint8_t)(checksum & 0xFF);
 8001a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <main+0x450>)
 8001aa4:	73da      	strb	r2, [r3, #15]
	  SPI_TxBuffer[14] = (uint8_t)((checksum >> 8) & 0xFF);
 8001aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <main+0x450>)
 8001aae:	739a      	strb	r2, [r3, #14]
	  SPI_TxBuffer[13] = (uint8_t)((checksum >> 16) & 0xFF);
 8001ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <main+0x450>)
 8001ab8:	735a      	strb	r2, [r3, #13]
	  SPI_TxBuffer[12] = (uint8_t)((checksum >> 24) & 0xFF);
 8001aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001abc:	0e1b      	lsrs	r3, r3, #24
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <main+0x450>)
 8001ac2:	731a      	strb	r2, [r3, #12]

	  HAL_SPI_Transmit(&hspi3, (uint8_t *)SPI_TxBuffer, 16,10);
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	490d      	ldr	r1, [pc, #52]	; (8001b00 <main+0x450>)
 8001aca:	4810      	ldr	r0, [pc, #64]	; (8001b0c <main+0x45c>)
 8001acc:	f004 fe97 	bl	80067fe <HAL_SPI_Transmit>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f002 fd31 	bl	800453c <HAL_GPIO_TogglePin>

	  __HAL_RCC_SPI3_FORCE_RESET();
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <main+0x460>)
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <main+0x460>)
 8001ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae4:	6393      	str	r3, [r2, #56]	; 0x38
	  __HAL_RCC_SPI3_RELEASE_RESET();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <main+0x460>)
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <main+0x460>)
 8001aec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001af0:	6393      	str	r3, [r2, #56]	; 0x38
	  MX_SPI3_Init();
 8001af2:	f000 f92d 	bl	8001d50 <MX_SPI3_Init>
  {
 8001af6:	e66c      	b.n	80017d2 <main+0x122>
 8001af8:	200001c8 	.word	0x200001c8
 8001afc:	51eb851f 	.word	0x51eb851f
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200001da 	.word	0x200001da
 8001b08:	40023000 	.word	0x40023000
 8001b0c:	20000290 	.word	0x20000290
 8001b10:	40021000 	.word	0x40021000

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b096      	sub	sp, #88	; 0x58
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	2244      	movs	r2, #68	; 0x44
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f008 fc02 	bl	800a32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b3a:	f003 fc37 	bl	80053ac <HAL_PWREx_ControlVoltageScaling>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b44:	f000 f8fe 	bl	8001d44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b48:	f003 fc12 	bl	8005370 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <SystemClock_Config+0xc0>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <SystemClock_Config+0xc0>)
 8001b54:	f023 0318 	bic.w	r3, r3, #24
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b70:	2302      	movs	r3, #2
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b74:	2301      	movs	r3, #1
 8001b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b80:	2307      	movs	r3, #7
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fc61 	bl	8005458 <HAL_RCC_OscConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b9c:	f000 f8d2 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f861 	bl	8005c80 <HAL_RCC_ClockConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bc4:	f000 f8be 	bl	8001d44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001bc8:	f004 fc74 	bl	80064b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bcc:	bf00      	nop
 8001bce:	3758      	adds	r7, #88	; 0x58
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	static uint32_t mesure_precedente_us=0, mesure_us, indice=0, i;
	static uint32_t tableau_intervalles_us[16]={};
	static float coefficient_distance_par_intervalle_um = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0;
	static uint32_t somme_intervalles_us = 0;
	uint32_t nb_intervalles=0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
	//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	mesure_us = TIM2->CCR1; // ou TIM2->CCR1
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bec:	6013      	str	r3, [r2, #0]
	mesure_vitesse_ms = HAL_GetTick();
 8001bee:	f000 fdc3 	bl	8002778 <HAL_GetTick>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bf6:	6013      	str	r3, [r2, #0]
	uint32_t delta_us = mesure_us-mesure_precedente_us;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	60bb      	str	r3, [r7, #8]

	if((delta_us) >= 300) //si mesure cohérente (pas un glitch):
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c0a:	d374      	bcc.n	8001cf6 <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if((mesure_us > (mesure_precedente_us+100000)) || ((mesure_us-100000) > mesure_precedente_us)) //cas d'un nouveau départ (the second term is for overflow)
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001c14:	33a0      	adds	r3, #160	; 0xa0
 8001c16:	4a3a      	ldr	r2, [pc, #232]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d308      	bcc.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x58>
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001c26:	3ba0      	subs	r3, #160	; 0xa0
 8001c28:	4a37      	ldr	r2, [pc, #220]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d908      	bls.n	8001c42 <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			memset(tableau_intervalles_us, 0, sizeof(tableau_intervalles_us));
 8001c30:	2240      	movs	r2, #64	; 0x40
 8001c32:	2100      	movs	r1, #0
 8001c34:	4835      	ldr	r0, [pc, #212]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c36:	f008 fb79 	bl	800a32c <memset>
			indice=0;
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e055      	b.n	8001cee <HAL_TIM_IC_CaptureCallback+0x116>
		}
		else //cas où on tourne depuis plus d'un intervalle
		{
			tableau_intervalles_us[indice] = delta_us; //on sauvegarde la nouvelle mesure dans le tableau
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4931      	ldr	r1, [pc, #196]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//On fait une moyenne sur 10 ms au plus ou 16 valeurs.
			somme_intervalles_us = 0;
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
			i= indice;
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c5a:	6013      	str	r3, [r2, #0]

			do{
				if(!tableau_intervalles_us[i])
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01d      	beq.n	8001ca6 <HAL_TIM_IC_CaptureCallback+0xce>
						break;
				somme_intervalles_us += tableau_intervalles_us[i];
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a27      	ldr	r2, [pc, #156]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c7c:	6013      	str	r3, [r2, #0]

				i = (i - 1)%16;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c8a:	6013      	str	r3, [r2, #0]
				
				nb_intervalles++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]

			}while ((somme_intervalles_us<10000) && (nb_intervalles < 16));
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d804      	bhi.n	8001ca8 <HAL_TIM_IC_CaptureCallback+0xd0>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d9db      	bls.n	8001c5c <HAL_TIM_IC_CaptureCallback+0x84>
 8001ca4:	e000      	b.n	8001ca8 <HAL_TIM_IC_CaptureCallback+0xd0>
						break;
 8001ca6:	bf00      	nop

			indice = (indice+1)%16; // on incrémente l'indice avec retour à 0 pour indice = 16
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001cb4:	6013      	str	r3, [r2, #0]

			vitesse_mesuree_mm_s = 1000 * coefficient_distance_par_intervalle_um * nb_intervalles / somme_intervalles_us;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d20 <HAL_TIM_IC_CaptureCallback+0x148>
 8001cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce6:	ee17 2a90 	vmov	r2, s15
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001cec:	601a      	str	r2, [r3, #0]
		}
		mesure_precedente_us = mesure_us;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cf4:	6013      	str	r3, [r2, #0]
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000023c 	.word	0x2000023c
 8001d04:	200001e0 	.word	0x200001e0
 8001d08:	20000240 	.word	0x20000240
 8001d0c:	20000244 	.word	0x20000244
 8001d10:	20000284 	.word	0x20000284
 8001d14:	20000288 	.word	0x20000288
 8001d18:	2000028c 	.word	0x2000028c
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	447a0000 	.word	0x447a0000
 8001d24:	200001c8 	.word	0x200001c8

08001d28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001d30:	2102      	movs	r1, #2
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001d34:	f002 fc02 	bl	800453c <HAL_GPIO_TogglePin>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	48000400 	.word	0x48000400

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <MX_SPI3_Init+0x70>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d96:	2207      	movs	r2, #7
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_SPI3_Init+0x6c>)
 8001da8:	f004 fc86 	bl	80066b8 <HAL_SPI_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001db2:	f7ff ffc7 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000290 	.word	0x20000290
 8001dc0:	40003c00 	.word	0x40003c00

08001dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <HAL_SPI_MspInit+0x120>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d179      	bne.n	8001eda <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a3f      	ldr	r2, [pc, #252]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a39      	ldr	r2, [pc, #228]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_SPI_MspInit+0x124>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e16:	2338      	movs	r3, #56	; 0x38
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e26:	2306      	movs	r3, #6
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	482e      	ldr	r0, [pc, #184]	; (8001eec <HAL_SPI_MspInit+0x128>)
 8001e32:	f002 fa01 	bl	8004238 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e38:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_SPI_MspInit+0x130>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e3e:	2203      	movs	r2, #3
 8001e40:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e44:	2210      	movs	r2, #16
 8001e46:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e6c:	4820      	ldr	r0, [pc, #128]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e6e:	f001 ffeb 	bl	8003e48 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8001e78:	f7ff ff64 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_SPI_MspInit+0x12c>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_SPI_MspInit+0x138>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_3;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001e90:	2203      	movs	r2, #3
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001ec0:	f001 ffc2 	bl	8003e48 <HAL_DMA_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001eca:	f7ff ff3b 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_SPI_MspInit+0x134>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40003c00 	.word	0x40003c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	200002f4 	.word	0x200002f4
 8001ef4:	4002041c 	.word	0x4002041c
 8001ef8:	2000033c 	.word	0x2000033c
 8001efc:	40020408 	.word	0x40020408

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_MspInit+0x44>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_MspInit+0x44>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_MspInit+0x44>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x44>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x44>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x44>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 fbdc 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Channel1_IRQHandler+0x10>)
 8001fa2:	f002 f869 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000108 	.word	0x20000108

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f005 fa0d 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003d4 	.word	0x200003d4

08001fc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM6_DAC_IRQHandler+0x10>)
 8001fca:	f005 fa03 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000420 	.word	0x20000420

08001fd8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA2_Channel1_IRQHandler+0x10>)
 8001fde:	f002 f84b 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000033c 	.word	0x2000033c

08001fec <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA2_Channel2_IRQHandler+0x10>)
 8001ff2:	f002 f841 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002f4 	.word	0x200002f4

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f008 f984 	bl	800a33c <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20010000 	.word	0x20010000
 8002060:	00000400 	.word	0x00000400
 8002064:	20000384 	.word	0x20000384
 8002068:	20000708 	.word	0x20000708

0800206c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b09a      	sub	sp, #104	; 0x68
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	615a      	str	r2, [r3, #20]
 80020c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	222c      	movs	r2, #44	; 0x2c
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 f92e 	bl	800a32c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020d2:	4a4b      	ldr	r2, [pc, #300]	; (8002200 <MX_TIM1_Init+0x170>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020d8:	221f      	movs	r2, #31
 80020da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020fc:	483f      	ldr	r0, [pc, #252]	; (80021fc <MX_TIM1_Init+0x16c>)
 80020fe:	f004 fe51 	bl	8006da4 <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002108:	f7ff fe1c 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002116:	4619      	mov	r1, r3
 8002118:	4838      	ldr	r0, [pc, #224]	; (80021fc <MX_TIM1_Init+0x16c>)
 800211a:	f005 fc2b 	bl	8007974 <HAL_TIM_ConfigClockSource>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002124:	f7ff fe0e 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002128:	4834      	ldr	r0, [pc, #208]	; (80021fc <MX_TIM1_Init+0x16c>)
 800212a:	f004 ff62 	bl	8006ff2 <HAL_TIM_PWM_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002134:	f7ff fe06 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002144:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002148:	4619      	mov	r1, r3
 800214a:	482c      	ldr	r0, [pc, #176]	; (80021fc <MX_TIM1_Init+0x16c>)
 800214c:	f006 f9a8 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002156:	f7ff fdf5 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800215a:	2360      	movs	r3, #96	; 0x60
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800215e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	481e      	ldr	r0, [pc, #120]	; (80021fc <MX_TIM1_Init+0x16c>)
 8002182:	f005 fae3 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800218c:	f7ff fdda 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	220c      	movs	r2, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <MX_TIM1_Init+0x16c>)
 800219a:	f005 fad7 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80021a4:	f7ff fdce 	bl	8001d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4807      	ldr	r0, [pc, #28]	; (80021fc <MX_TIM1_Init+0x16c>)
 80021de:	f006 f9c5 	bl	800856c <HAL_TIMEx_ConfigBreakDeadTime>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80021e8:	f7ff fdac 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_TIM1_Init+0x16c>)
 80021ee:	f000 f971 	bl	80024d4 <HAL_TIM_MspPostInit>

}
 80021f2:	bf00      	nop
 80021f4:	3768      	adds	r7, #104	; 0x68
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000388 	.word	0x20000388
 8002200:	40012c00 	.word	0x40012c00

08002204 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0320 	add.w	r3, r7, #32
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <MX_TIM2_Init+0xdc>)
 800223a:	220f      	movs	r2, #15
 800223c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002246:	f04f 32ff 	mov.w	r2, #4294967295
 800224a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MX_TIM2_Init+0xdc>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002258:	4821      	ldr	r0, [pc, #132]	; (80022e0 <MX_TIM2_Init+0xdc>)
 800225a:	f004 fda3 	bl	8006da4 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002264:	f7ff fd6e 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	4619      	mov	r1, r3
 8002274:	481a      	ldr	r0, [pc, #104]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002276:	f005 fb7d 	bl	8007974 <HAL_TIM_ConfigClockSource>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002280:	f7ff fd60 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002284:	4816      	ldr	r0, [pc, #88]	; (80022e0 <MX_TIM2_Init+0xdc>)
 8002286:	f004 ff15 	bl	80070b4 <HAL_TIM_IC_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002290:	f7ff fd58 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480f      	ldr	r0, [pc, #60]	; (80022e0 <MX_TIM2_Init+0xdc>)
 80022a4:	f006 f8fc 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80022ae:	f7ff fd49 	bl	8001d44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022b2:	2302      	movs	r3, #2
 80022b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022b6:	2301      	movs	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_TIM2_Init+0xdc>)
 80022ca:	f005 f9a2 	bl	8007612 <HAL_TIM_IC_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80022d4:	f7ff fd36 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	3730      	adds	r7, #48	; 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200003d4 	.word	0x200003d4

080022e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_TIM6_Init+0x64>)
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <MX_TIM6_Init+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <MX_TIM6_Init+0x64>)
 80022fc:	221f      	movs	r2, #31
 80022fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_TIM6_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2272;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_TIM6_Init+0x64>)
 8002308:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 800230c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_TIM6_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <MX_TIM6_Init+0x64>)
 8002316:	f004 fd45 	bl	8006da4 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002320:	f7ff fd10 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_TIM6_Init+0x64>)
 8002332:	f006 f8b5 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800233c:	f7ff fd02 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000420 	.word	0x20000420
 800234c:	40001000 	.word	0x40001000

08002350 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_TIM7_Init+0x64>)
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <MX_TIM7_Init+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <MX_TIM7_Init+0x64>)
 8002368:	221f      	movs	r2, #31
 800236a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_TIM7_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <MX_TIM7_Init+0x64>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_TIM7_Init+0x64>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <MX_TIM7_Init+0x64>)
 8002382:	f004 fd0f 	bl	8006da4 <HAL_TIM_Base_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800238c:	f7ff fcda 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_TIM7_Init+0x64>)
 800239e:	f006 f87f 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023a8:	f7ff fccc 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000046c 	.word	0x2000046c
 80023b8:	40001400 	.word	0x40001400

080023bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_TIM_Base_MspInit+0x108>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10c      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80023e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023f6:	e061      	b.n	80024bc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d131      	bne.n	8002466 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 8002432:	2301      	movs	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002442:	2301      	movs	r3, #1
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002450:	f001 fef2 	bl	8004238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201c      	movs	r0, #28
 800245a:	f001 fbd4 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800245e:	201c      	movs	r0, #28
 8002460:	f001 fbed 	bl	8003c3e <HAL_NVIC_EnableIRQ>
}
 8002464:	e02a      	b.n	80024bc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM6)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_MspInit+0x110>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d114      	bne.n	800249a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2036      	movs	r0, #54	; 0x36
 800248e:	f001 fbba 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002492:	2036      	movs	r0, #54	; 0x36
 8002494:	f001 fbd3 	bl	8003c3e <HAL_NVIC_EnableIRQ>
}
 8002498:	e010      	b.n	80024bc <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM7)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HAL_TIM_Base_MspInit+0x114>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10b      	bne.n	80024bc <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80024aa:	f043 0320 	orr.w	r3, r3, #32
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_TIM_Base_MspInit+0x10c>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40001000 	.word	0x40001000
 80024d0:	40001400 	.word	0x40001400

080024d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_TIM_MspPostInit+0x68>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d11d      	bne.n	8002532 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_TIM_MspPostInit+0x6c>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_TIM_MspPostInit+0x6c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_TIM_MspPostInit+0x6c>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin|PWM_DIRECTION_Pin;
 800250e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002520:	2301      	movs	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f001 fe83 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40021000 	.word	0x40021000

08002544 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <MX_USART1_UART_Init+0x58>)
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <MX_USART1_UART_Init+0x5c>)
 800254c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <MX_USART1_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_USART1_UART_Init+0x58>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <MX_USART1_UART_Init+0x58>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <MX_USART1_UART_Init+0x58>)
 8002588:	f006 f886 	bl	8008698 <HAL_UART_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002592:	f7ff fbd7 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200004b8 	.word	0x200004b8
 80025a0:	40013800 	.word	0x40013800

080025a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b09e      	sub	sp, #120	; 0x78
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	2254      	movs	r2, #84	; 0x54
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f007 feb1 	bl	800a32c <memset>
  if(uartHandle->Instance==USART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_UART_MspInit+0xa8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d137      	bne.n	8002644 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fd71 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025ec:	f7ff fbaa 	bl	8001d44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_UART_MspInit+0xac>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_UART_MspInit+0xac>)
 80025f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fa:	6613      	str	r3, [r2, #96]	; 0x60
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_UART_MspInit+0xac>)
 80025fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_UART_MspInit+0xac>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_UART_MspInit+0xac>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_UART_MspInit+0xac>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002620:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002624:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002632:	2307      	movs	r3, #7
 8002634:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f001 fdfa 	bl	8004238 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002644:	bf00      	nop
 8002646:	3778      	adds	r7, #120	; 0x78
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40013800 	.word	0x40013800
 8002650:	40021000 	.word	0x40021000

08002654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002658:	f7ff fd08 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <LoopForever+0x6>)
  ldr r1, =_edata
 800265e:	490d      	ldr	r1, [pc, #52]	; (8002694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <LoopForever+0xe>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <LoopForever+0x16>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002682:	f007 fe61 	bl	800a348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002686:	f7ff f813 	bl	80016b0 <main>

0800268a <LoopForever>:

LoopForever:
    b LoopForever
 800268a:	e7fe      	b.n	800268a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800268c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002698:	0800b8dc 	.word	0x0800b8dc
  ldr r2, =_sbss
 800269c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80026a0:	20000708 	.word	0x20000708

080026a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC1_IRQHandler>

080026a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f001 fa9d 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b6:	2000      	movs	r0, #0
 80026b8:	f000 f80e 	bl	80026d8 <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	e001      	b.n	80026cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026c8:	f7ff fc1a 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_InitTick+0x6c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d023      	beq.n	8002734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_InitTick+0x70>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_InitTick+0x6c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f001 faa9 	bl	8003c5a <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d809      	bhi.n	8002728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f001 fa73 	bl	8003c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_InitTick+0x74>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e007      	b.n	8002738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e004      	b.n	8002738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e001      	b.n	8002738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000001c 	.word	0x2000001c
 8002748:	20000014 	.word	0x20000014
 800274c:	20000018 	.word	0x20000018

08002750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_IncTick+0x20>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_IncTick+0x24>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_IncTick+0x24>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	2000001c 	.word	0x2000001c
 8002774:	2000053c 	.word	0x2000053c

08002778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return uwTick;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_GetTick+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	2000053c 	.word	0x2000053c

08002790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff ffee 	bl	8002778 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d005      	beq.n	80027b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_Delay+0x44>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027b6:	bf00      	nop
 80027b8:	f7ff ffde 	bl	8002778 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d8f7      	bhi.n	80027b8 <HAL_Delay+0x28>
  {
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000001c 	.word	0x2000001c

080027d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <LL_ADC_SetOffset+0x44>)
 8002862:	4013      	ands	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	4313      	orrs	r3, r2
 8002870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	03fff000 	.word	0x03fff000

08002888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3360      	adds	r3, #96	; 0x60
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3330      	adds	r3, #48	; 0x30
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	4413      	add	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	211f      	movs	r1, #31
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 011f 	and.w	r1, r3, #31
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3314      	adds	r3, #20
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	0e5b      	lsrs	r3, r3, #25
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0d1b      	lsrs	r3, r3, #20
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2107      	movs	r1, #7
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	401a      	ands	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0d1b      	lsrs	r3, r3, #20
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0318 	and.w	r3, r3, #24
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029e4:	40d9      	lsrs	r1, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	400b      	ands	r3, r1
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	0007ffff 	.word	0x0007ffff

08002a08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6093      	str	r3, [r2, #8]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a40:	d101      	bne.n	8002a46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_IsEnabled+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_IsEnabled+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e12c      	b.n	8002ddc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fe fa4f 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff3f 	bl	8002a2c <LL_ADC_IsDeepPowerDownEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff25 	bl	8002a08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff5a 	bl	8002a7c <LL_ADC_IsInternalRegulatorEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff3e 	bl	8002a54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd8:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_ADC_Init+0x27c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	4a82      	ldr	r2, [pc, #520]	; (8002de8 <HAL_ADC_Init+0x280>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff3c 	bl	8002a7c <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff75 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002c30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80c5 	bne.w	8002dca <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80c1 	bne.w	8002dca <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c50:	f043 0202 	orr.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff35 	bl	8002acc <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	4860      	ldr	r0, [pc, #384]	; (8002dec <HAL_ADC_Init+0x284>)
 8002c6a:	f7ff ff2f 	bl	8002acc <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	485d      	ldr	r0, [pc, #372]	; (8002df0 <HAL_ADC_Init+0x288>)
 8002c7c:	f7ff fdac 	bl	80027d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7e5b      	ldrb	r3, [r3, #25]
 8002c84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	045b      	lsls	r3, r3, #17
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <HAL_ADC_Init+0x28c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff12 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff1f 	bl	8002b40 <LL_ADC_INJ_IsConversionOngoing>
 8002d02:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d13d      	bne.n	8002d86 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13a      	bne.n	8002d86 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d14:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	69b9      	ldr	r1, [r7, #24]
 8002d36:	430b      	orrs	r3, r1
 8002d38:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d118      	bne.n	8002d76 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d66:	430a      	orrs	r2, r1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	e007      	b.n	8002d86 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d10c      	bne.n	8002da8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f023 010f 	bic.w	r1, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
 8002da6:	e007      	b.n	8002db8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 020f 	bic.w	r2, r2, #15
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f023 0303 	bic.w	r3, r3, #3
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
 8002dc8:	e007      	b.n	8002dda <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0210 	orr.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000014 	.word	0x20000014
 8002de8:	053e2d63 	.word	0x053e2d63
 8002dec:	50040000 	.word	0x50040000
 8002df0:	50040300 	.word	0x50040300
 8002df4:	fff0c007 	.word	0xfff0c007

08002df8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d102      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e010      	b.n	8002e32 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e06f      	b.n	8002f0e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002e2e:	2304      	movs	r3, #4
 8002e30:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e32:	f7ff fca1 	bl	8002778 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e38:	e021      	b.n	8002e7e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d01d      	beq.n	8002e7e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e42:	f7ff fc99 	bl	8002778 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <HAL_ADC_PollForConversion+0x60>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e047      	b.n	8002f0e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0d6      	beq.n	8002e3a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd24 	bl	80028ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01c      	beq.n	8002ee2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e5b      	ldrb	r3, [r3, #25]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d118      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d111      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d104      	bne.n	8002efa <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e008      	b.n	8002f0c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	220c      	movs	r2, #12
 8002f0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fdf6 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d167      	bne.n	8003004 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x2a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e063      	b.n	800300a <HAL_ADC_Start_DMA+0xf2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fc66 	bl	800381c <ADC_Enable>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d14f      	bne.n	8002ffa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f023 0206 	bic.w	r2, r3, #6
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <HAL_ADC_Start_DMA+0xfc>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_ADC_Start_DMA+0x100>)
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_ADC_Start_DMA+0x104>)
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	221c      	movs	r2, #28
 8002fac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0210 	orr.w	r2, r2, #16
 8002fc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3340      	adds	r3, #64	; 0x40
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f000 ffe7 	bl	8003fb8 <HAL_DMA_Start_IT>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd7d 	bl	8002af2 <LL_ADC_REG_StartConversion>
 8002ff8:	e006      	b.n	8003008 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003002:	e001      	b.n	8003008 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08003929 	.word	0x08003929
 8003018:	08003a01 	.word	0x08003a01
 800301c:	08003a1d 	.word	0x08003a1d

08003020 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0b6      	sub	sp, #216	; 0xd8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x22>
 800307a:	2302      	movs	r3, #2
 800307c:	e3b9      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x796>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fd45 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 839e 	bne.w	80037d4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d824      	bhi.n	80030ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	3b02      	subs	r3, #2
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d81b      	bhi.n	80030e2 <HAL_ADC_ConfigChannel+0x86>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_ADC_ConfigChannel+0x54>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030c9 	.word	0x080030c9
 80030b8:	080030d1 	.word	0x080030d1
 80030bc:	080030d9 	.word	0x080030d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	220c      	movs	r2, #12
 80030c4:	605a      	str	r2, [r3, #4]
          break;
 80030c6:	e010      	b.n	80030ea <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2212      	movs	r2, #18
 80030cc:	605a      	str	r2, [r3, #4]
          break;
 80030ce:	e00c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2218      	movs	r2, #24
 80030d4:	605a      	str	r2, [r3, #4]
          break;
 80030d6:	e008      	b.n	80030ea <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030de:	605a      	str	r2, [r3, #4]
          break;
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2206      	movs	r2, #6
 80030e6:	605a      	str	r2, [r3, #4]
          break;
 80030e8:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff fc0a 	bl	8002910 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd0a 	bl	8002b1a <LL_ADC_REG_IsConversionOngoing>
 8003106:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd16 	bl	8002b40 <LL_ADC_INJ_IsConversionOngoing>
 8003114:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003118:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 81a6 	bne.w	800346e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 81a1 	bne.w	800346e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff fc15 	bl	8002968 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00a      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6919      	ldr	r1, [r3, #16]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003170:	f7ff fb66 	bl	8002840 <LL_ADC_SetOffset>
 8003174:	e17b      	b.n	800346e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fb83 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x146>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fb78 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	e01e      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x184>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fb6d 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80031d0:	2320      	movs	r3, #32
 80031d2:	e004      	b.n	80031de <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80031d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x19c>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	e018      	b.n	800322a <HAL_ADC_ConfigChannel+0x1ce>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800320c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e004      	b.n	800322a <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8003220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800322a:	429a      	cmp	r2, r3
 800322c:	d106      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fb3c 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb20 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x20c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fb15 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	e01e      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x24a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fb0a 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800328a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800328e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e004      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800329a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_ADC_ConfigChannel+0x262>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	e018      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x294>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e004      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80032e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2101      	movs	r1, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fad9 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fabd 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_ADC_ConfigChannel+0x2d2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fab2 	bl	8002888 <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	e01e      	b.n	800336c <HAL_ADC_ConfigChannel+0x310>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff faa7 	bl	8002888 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800334c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e004      	b.n	800336a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x328>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	e016      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x356>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003396:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800339c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e004      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80033a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d106      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa78 	bl	80028b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2103      	movs	r1, #3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fa5c 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x394>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2103      	movs	r1, #3
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fa51 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	e017      	b.n	8003420 <HAL_ADC_ConfigChannel+0x3c4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2103      	movs	r1, #3
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fa46 	bl	8002888 <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800340c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e003      	b.n	800341e <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8003416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x3dc>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	e011      	b.n	800345c <HAL_ADC_ConfigChannel+0x400>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003448:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800345c:	429a      	cmp	r2, r3
 800345e:	d106      	bne.n	800346e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	2103      	movs	r1, #3
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fa23 	bl	80028b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fb2a 	bl	8002acc <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 8140 	bne.w	8003700 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	461a      	mov	r2, r3
 800348e:	f7ff fa97 	bl	80029c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a8f      	ldr	r2, [pc, #572]	; (80036d4 <HAL_ADC_ConfigChannel+0x678>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 8131 	bne.w	8003700 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x46a>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	bf94      	ite	ls
 80034be:	2301      	movls	r3, #1
 80034c0:	2300      	movhi	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e019      	b.n	80034fa <HAL_ADC_ConfigChannel+0x49e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e003      	b.n	80034ea <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d079      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_ADC_ConfigChannel+0x4be>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	069b      	lsls	r3, r3, #26
 8003514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003518:	e015      	b.n	8003546 <HAL_ADC_ConfigChannel+0x4ea>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	069b      	lsls	r3, r3, #26
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x50a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0e9b      	lsrs	r3, r3, #26
 8003558:	3301      	adds	r3, #1
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	e017      	b.n	8003596 <HAL_ADC_ConfigChannel+0x53a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e003      	b.n	800358a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	ea42 0103 	orr.w	r1, r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x560>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	3301      	adds	r3, #1
 80035ae:	f003 021f 	and.w	r2, r3, #31
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	e018      	b.n	80035ee <HAL_ADC_ConfigChannel+0x592>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e003      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f003 021f 	and.w	r2, r3, #31
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ee:	430b      	orrs	r3, r1
 80035f0:	e081      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_ADC_ConfigChannel+0x5b2>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	3301      	adds	r3, #1
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360c:	e015      	b.n	800363a <HAL_ADC_ConfigChannel+0x5de>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	069b      	lsls	r3, r3, #26
 8003636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_ADC_ConfigChannel+0x5fe>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	3301      	adds	r3, #1
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	e017      	b.n	800368a <HAL_ADC_ConfigChannel+0x62e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	61fb      	str	r3, [r7, #28]
  return result;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e003      	b.n	800367e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	ea42 0103 	orr.w	r1, r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x65a>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	0e9b      	lsrs	r3, r3, #26
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 021f 	and.w	r2, r3, #31
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	3b1e      	subs	r3, #30
 80036ae:	051b      	lsls	r3, r3, #20
 80036b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b4:	e01e      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x698>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	613b      	str	r3, [r7, #16]
  return result;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e006      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x684>
 80036d2:	bf00      	nop
 80036d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 021f 	and.w	r2, r3, #31
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f4:	430b      	orrs	r3, r1
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	6892      	ldr	r2, [r2, #8]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7ff f934 	bl	8002968 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_ADC_ConfigChannel+0x7a0>)
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06c      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370c:	483c      	ldr	r0, [pc, #240]	; (8003800 <HAL_ADC_ConfigChannel+0x7a4>)
 800370e:	f7ff f889 	bl	8002824 <LL_ADC_GetCommonPathInternalCh>
 8003712:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_ADC_ConfigChannel+0x7a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d127      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d121      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	; (8003808 <HAL_ADC_ConfigChannel+0x7ac>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d157      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800373e:	4619      	mov	r1, r3
 8003740:	482f      	ldr	r0, [pc, #188]	; (8003800 <HAL_ADC_ConfigChannel+0x7a4>)
 8003742:	f7ff f85c 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_ADC_ConfigChannel+0x7b0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	4a30      	ldr	r2, [pc, #192]	; (8003810 <HAL_ADC_ConfigChannel+0x7b4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003760:	e002      	b.n	8003768 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b01      	subs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800376e:	e03a      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_ADC_ConfigChannel+0x7b8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d113      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x746>
 800377a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_ADC_ConfigChannel+0x7ac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d12a      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003798:	4619      	mov	r1, r3
 800379a:	4819      	ldr	r0, [pc, #100]	; (8003800 <HAL_ADC_ConfigChannel+0x7a4>)
 800379c:	f7ff f82f 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a0:	e021      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_ADC_ConfigChannel+0x7bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d11c      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_ADC_ConfigChannel+0x7ac>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d111      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ca:	4619      	mov	r1, r3
 80037cc:	480c      	ldr	r0, [pc, #48]	; (8003800 <HAL_ADC_ConfigChannel+0x7a4>)
 80037ce:	f7ff f816 	bl	80027fe <LL_ADC_SetCommonPathInternalCh>
 80037d2:	e008      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	37d8      	adds	r7, #216	; 0xd8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	80080000 	.word	0x80080000
 8003800:	50040300 	.word	0x50040300
 8003804:	c7520000 	.word	0xc7520000
 8003808:	50040000 	.word	0x50040000
 800380c:	20000014 	.word	0x20000014
 8003810:	053e2d63 	.word	0x053e2d63
 8003814:	cb840000 	.word	0xcb840000
 8003818:	80000001 	.word	0x80000001

0800381c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f94d 	bl	8002acc <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d169      	bne.n	800390c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <ADC_Enable+0xfc>)
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e055      	b.n	800390e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f91c 	bl	8002aa4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800386c:	482b      	ldr	r0, [pc, #172]	; (800391c <ADC_Enable+0x100>)
 800386e:	f7fe ffd9 	bl	8002824 <LL_ADC_GetCommonPathInternalCh>
 8003872:	4603      	mov	r3, r0
 8003874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <ADC_Enable+0x104>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <ADC_Enable+0x108>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003896:	e002      	b.n	800389e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3b01      	subs	r3, #1
 800389c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038a4:	f7fe ff68 	bl	8002778 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038aa:	e028      	b.n	80038fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f90b 	bl	8002acc <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f8ef 	bl	8002aa4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038c6:	f7fe ff57 	bl	8002778 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d914      	bls.n	80038fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d00d      	beq.n	80038fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0210 	orr.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d1cf      	bne.n	80038ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	8000003f 	.word	0x8000003f
 800391c:	50040300 	.word	0x50040300
 8003920:	20000014 	.word	0x20000014
 8003924:	053e2d63 	.word	0x053e2d63

08003928 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d14b      	bne.n	80039da <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d021      	beq.n	80039a0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe ffc2 	bl	80028ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d12b      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11f      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
 800399e:	e018      	b.n	80039d2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d111      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fb24 	bl	8003020 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039d8:	e00e      	b.n	80039f8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff fb2e 	bl	8003048 <HAL_ADC_ErrorCallback>
}
 80039ec:	e004      	b.n	80039f8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff fb10 	bl	8003034 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fb00 	bl	8003048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	db0a      	blt.n	8003b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	490c      	ldr	r1, [pc, #48]	; (8003b3c <__NVIC_SetPriority+0x4c>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	440b      	add	r3, r1
 8003b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b18:	e00a      	b.n	8003b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4908      	ldr	r1, [pc, #32]	; (8003b40 <__NVIC_SetPriority+0x50>)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	3b04      	subs	r3, #4
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	761a      	strb	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e100 	.word	0xe000e100
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f1c3 0307 	rsb	r3, r3, #7
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	bf28      	it	cs
 8003b62:	2304      	movcs	r3, #4
 8003b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d902      	bls.n	8003b74 <NVIC_EncodePriority+0x30>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3b03      	subs	r3, #3
 8003b72:	e000      	b.n	8003b76 <NVIC_EncodePriority+0x32>
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	401a      	ands	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9c:	4313      	orrs	r3, r2
         );
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f7ff ff8e 	bl	8003af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff29 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff3e 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff8e 	bl	8003b44 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5d 	bl	8003af0 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff31 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e054      	b.n	8003d30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7f5b      	ldrb	r3, [r3, #29]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fa82 	bl	80011a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	791b      	ldrb	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_CRC_Init+0xc4>)
 8003cb0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0218 	bic.w	r2, r2, #24
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	e00c      	b.n	8003cde <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f834 	bl	8003d3c <HAL_CRCEx_Polynomial_Set>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e028      	b.n	8003d30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	795b      	ldrb	r3, [r3, #5]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	611a      	str	r2, [r3, #16]
 8003cf0:	e004      	b.n	8003cfc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6912      	ldr	r2, [r2, #16]
 8003cfa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	04c11db7 	.word	0x04c11db7

08003d3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d4c:	231f      	movs	r3, #31
 8003d4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d50:	bf00      	nop
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	613a      	str	r2, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b18      	cmp	r3, #24
 8003d74:	d846      	bhi.n	8003e04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003e0b 	.word	0x08003e0b
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e05 	.word	0x08003e05
 8003d88:	08003e05 	.word	0x08003e05
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	08003e05 	.word	0x08003e05
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003e05 	.word	0x08003e05
 8003d9c:	08003df9 	.word	0x08003df9
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003e05 	.word	0x08003e05
 8003da8:	08003e05 	.word	0x08003e05
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003e05 	.word	0x08003e05
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e05 	.word	0x08003e05
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003de1 	.word	0x08003de1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d913      	bls.n	8003e0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dea:	e010      	b.n	8003e0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	d90f      	bls.n	8003e12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003df6:	e00c      	b.n	8003e12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b0f      	cmp	r3, #15
 8003dfc:	d90b      	bls.n	8003e16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e02:	e008      	b.n	8003e16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	e006      	b.n	8003e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e16:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 0118 	bic.w	r1, r3, #24
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e098      	b.n	8003f8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <HAL_DMA_Init+0x150>)
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d80f      	bhi.n	8003e86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_DMA_Init+0x154>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_DMA_Init+0x158>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	009a      	lsls	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_DMA_Init+0x15c>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
 8003e84:	e00e      	b.n	8003ea4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_DMA_Init+0x160>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	4a43      	ldr	r2, [pc, #268]	; (8003fa0 <HAL_DMA_Init+0x158>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	009a      	lsls	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_DMA_Init+0x164>)
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efe:	d039      	beq.n	8003f74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <HAL_DMA_Init+0x15c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d11a      	bne.n	8003f40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f0a:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <HAL_DMA_Init+0x168>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f003 031c 	and.w	r3, r3, #28
 8003f16:	210f      	movs	r1, #15
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	4924      	ldr	r1, [pc, #144]	; (8003fb0 <HAL_DMA_Init+0x168>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_DMA_Init+0x168>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f003 031c 	and.w	r3, r3, #28
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	491d      	ldr	r1, [pc, #116]	; (8003fb0 <HAL_DMA_Init+0x168>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
 8003f3e:	e019      	b.n	8003f74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_DMA_Init+0x16c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	f003 031c 	and.w	r3, r3, #28
 8003f4c:	210f      	movs	r1, #15
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <HAL_DMA_Init+0x16c>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_DMA_Init+0x16c>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f003 031c 	and.w	r3, r3, #28
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	4911      	ldr	r1, [pc, #68]	; (8003fb4 <HAL_DMA_Init+0x16c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40020407 	.word	0x40020407
 8003f9c:	bffdfff8 	.word	0xbffdfff8
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	bffdfbf8 	.word	0xbffdfbf8
 8003fac:	40020400 	.word	0x40020400
 8003fb0:	400200a8 	.word	0x400200a8
 8003fb4:	400204a8 	.word	0x400204a8

08003fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DMA_Start_IT+0x20>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e04b      	b.n	8004070 <HAL_DMA_Start_IT+0xb8>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d13a      	bne.n	8004062 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8e0 	bl	80041d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 020e 	orr.w	r2, r2, #14
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e00f      	b.n	8004050 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 020a 	orr.w	r2, r2, #10
 800404e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e005      	b.n	800406e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f003 031c 	and.w	r3, r3, #28
 8004098:	2204      	movs	r2, #4
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d026      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x7a>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 021c 	and.w	r2, r3, #28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2104      	movs	r1, #4
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d071      	beq.n	80041cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80040f0:	e06c      	b.n	80041cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f003 031c 	and.w	r3, r3, #28
 80040fa:	2202      	movs	r2, #2
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02e      	beq.n	8004164 <HAL_DMA_IRQHandler+0xec>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d029      	beq.n	8004164 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 020a 	bic.w	r2, r2, #10
 800412c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f003 021c 	and.w	r2, r3, #28
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2102      	movs	r1, #2
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d038      	beq.n	80041cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004162:	e033      	b.n	80041cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02a      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 020e 	bic.w	r2, r2, #14
 8004190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021c 	and.w	r2, r3, #28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
}
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f003 021c 	and.w	r2, r3, #28
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f202 	lsl.w	r2, r1, r2
 80041f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d108      	bne.n	800421a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004218:	e007      	b.n	800422a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004246:	e148      	b.n	80044da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 813a 	beq.w	80044d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d005      	beq.n	8004278 <HAL_GPIO_Init+0x40>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d130      	bne.n	80042da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ae:	2201      	movs	r2, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0201 	and.w	r2, r3, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d017      	beq.n	8004316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d123      	bne.n	800436a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	08da      	lsrs	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3208      	adds	r2, #8
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0203 	and.w	r2, r3, #3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8094 	beq.w	80044d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ac:	4b52      	ldr	r3, [pc, #328]	; (80044f8 <HAL_GPIO_Init+0x2c0>)
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	4a51      	ldr	r2, [pc, #324]	; (80044f8 <HAL_GPIO_Init+0x2c0>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6613      	str	r3, [r2, #96]	; 0x60
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <HAL_GPIO_Init+0x2c0>)
 80043ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043c4:	4a4d      	ldr	r2, [pc, #308]	; (80044fc <HAL_GPIO_Init+0x2c4>)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	3302      	adds	r3, #2
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	220f      	movs	r2, #15
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ee:	d00d      	beq.n	800440c <HAL_GPIO_Init+0x1d4>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a43      	ldr	r2, [pc, #268]	; (8004500 <HAL_GPIO_Init+0x2c8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d007      	beq.n	8004408 <HAL_GPIO_Init+0x1d0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_GPIO_Init+0x2cc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <HAL_GPIO_Init+0x1cc>
 8004400:	2302      	movs	r3, #2
 8004402:	e004      	b.n	800440e <HAL_GPIO_Init+0x1d6>
 8004404:	2307      	movs	r3, #7
 8004406:	e002      	b.n	800440e <HAL_GPIO_Init+0x1d6>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_GPIO_Init+0x1d6>
 800440c:	2300      	movs	r3, #0
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	f002 0203 	and.w	r2, r2, #3
 8004414:	0092      	lsls	r2, r2, #2
 8004416:	4093      	lsls	r3, r2
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800441e:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_GPIO_Init+0x2c4>)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	089b      	lsrs	r3, r3, #2
 8004424:	3302      	adds	r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	43db      	mvns	r3, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004456:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	43db      	mvns	r3, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43db      	mvns	r3, r3
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ce:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_GPIO_Init+0x2d0>)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3301      	adds	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f aeaf 	bne.w	8004248 <HAL_GPIO_Init+0x10>
  }
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40010000 	.word	0x40010000
 8004500:	48000400 	.word	0x48000400
 8004504:	48000800 	.word	0x48000800
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004528:	e002      	b.n	8004530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	43d9      	mvns	r1, r3
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	400b      	ands	r3, r1
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e081      	b.n	8004686 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fc ff28 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	e006      	b.n	80045f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d104      	bne.n	800460a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800462c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	460b      	mov	r3, r1
 800469e:	817b      	strh	r3, [r7, #10]
 80046a0:	4613      	mov	r3, r2
 80046a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	f040 80da 	bne.w	8004866 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2C_Master_Transmit+0x30>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0d3      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046c8:	f7fe f856 	bl	8002778 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2319      	movs	r3, #25
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fb5c 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0be      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2221      	movs	r2, #33	; 0x21
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2210      	movs	r2, #16
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	893a      	ldrh	r2, [r7, #8]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2bff      	cmp	r3, #255	; 0xff
 800471a:	d90e      	bls.n	800473a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	b2da      	uxtb	r2, r3
 8004728:	8979      	ldrh	r1, [r7, #10]
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <HAL_I2C_Master_Transmit+0x1e0>)
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fd52 	bl	80051dc <I2C_TransferConfig>
 8004738:	e06c      	b.n	8004814 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	b2da      	uxtb	r2, r3
 800474a:	8979      	ldrh	r1, [r7, #10]
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <HAL_I2C_Master_Transmit+0x1e0>)
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fd41 	bl	80051dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800475a:	e05b      	b.n	8004814 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	6a39      	ldr	r1, [r7, #32]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fb59 	bl	8004e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e07b      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d034      	beq.n	8004814 <HAL_I2C_Master_Transmit+0x184>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d130      	bne.n	8004814 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 faeb 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e04d      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2bff      	cmp	r3, #255	; 0xff
 80047d4:	d90e      	bls.n	80047f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fcf5 	bl	80051dc <I2C_TransferConfig>
 80047f2:	e00f      	b.n	8004814 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	b2da      	uxtb	r2, r3
 8004804:	8979      	ldrh	r1, [r7, #10]
 8004806:	2300      	movs	r3, #0
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fce4 	bl	80051dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d19e      	bne.n	800475c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fb38 	bl	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e01a      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2220      	movs	r2, #32
 8004838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_I2C_Master_Transmit+0x1e4>)
 8004846:	400b      	ands	r3, r1
 8004848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	80002000 	.word	0x80002000
 8004874:	fe00e800 	.word	0xfe00e800

08004878 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	461a      	mov	r2, r3
 8004884:	460b      	mov	r3, r1
 8004886:	817b      	strh	r3, [r7, #10]
 8004888:	4613      	mov	r3, r2
 800488a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	f040 80db 	bne.w	8004a50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_I2C_Master_Receive+0x30>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e0d4      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd ff62 	bl	8002778 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2319      	movs	r3, #25
 80048bc:	2201      	movs	r2, #1
 80048be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fa68 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0bf      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2222      	movs	r2, #34	; 0x22
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2210      	movs	r2, #16
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	893a      	ldrh	r2, [r7, #8]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2bff      	cmp	r3, #255	; 0xff
 8004902:	d90e      	bls.n	8004922 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	b2da      	uxtb	r2, r3
 8004910:	8979      	ldrh	r1, [r7, #10]
 8004912:	4b52      	ldr	r3, [pc, #328]	; (8004a5c <HAL_I2C_Master_Receive+0x1e4>)
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fc5e 	bl	80051dc <I2C_TransferConfig>
 8004920:	e06d      	b.n	80049fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	b2da      	uxtb	r2, r3
 8004932:	8979      	ldrh	r1, [r7, #10]
 8004934:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <HAL_I2C_Master_Receive+0x1e4>)
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fc4d 	bl	80051dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004942:	e05c      	b.n	80049fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6a39      	ldr	r1, [r7, #32]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fae1 	bl	8004f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e07c      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d034      	beq.n	80049fe <HAL_I2C_Master_Receive+0x186>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d130      	bne.n	80049fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f9f6 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04d      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2bff      	cmp	r3, #255	; 0xff
 80049be:	d90e      	bls.n	80049de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	8979      	ldrh	r1, [r7, #10]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fc00 	bl	80051dc <I2C_TransferConfig>
 80049dc:	e00f      	b.n	80049fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	8979      	ldrh	r1, [r7, #10]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fbef 	bl	80051dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d19d      	bne.n	8004944 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	6a39      	ldr	r1, [r7, #32]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fa43 	bl	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e01a      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2220      	movs	r2, #32
 8004a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_I2C_Master_Receive+0x1e8>)
 8004a30:	400b      	ands	r3, r1
 8004a32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	80002400 	.word	0x80002400
 8004a60:	fe00e800 	.word	0xfe00e800

08004a64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	f040 80f9 	bne.w	8004c7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x34>
 8004a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0ed      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2C_Mem_Write+0x4e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0e6      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aba:	f7fd fe5d 	bl	8002778 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2319      	movs	r3, #25
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f963 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0d1      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2221      	movs	r2, #33	; 0x21
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a3a      	ldr	r2, [r7, #32]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b04:	88f8      	ldrh	r0, [r7, #6]
 8004b06:	893a      	ldrh	r2, [r7, #8]
 8004b08:	8979      	ldrh	r1, [r7, #10]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4603      	mov	r3, r0
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f8c7 	bl	8004ca8 <I2C_RequestMemoryWrite>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0a9      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2bff      	cmp	r3, #255	; 0xff
 8004b34:	d90e      	bls.n	8004b54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	8979      	ldrh	r1, [r7, #10]
 8004b44:	2300      	movs	r3, #0
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fb45 	bl	80051dc <I2C_TransferConfig>
 8004b52:	e00f      	b.n	8004b74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	8979      	ldrh	r1, [r7, #10]
 8004b66:	2300      	movs	r3, #0
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb34 	bl	80051dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f94d 	bl	8004e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e07b      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d034      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x1c8>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d130      	bne.n	8004c2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2180      	movs	r1, #128	; 0x80
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f8df 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04d      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2bff      	cmp	r3, #255	; 0xff
 8004bec:	d90e      	bls.n	8004c0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	8979      	ldrh	r1, [r7, #10]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fae9 	bl	80051dc <I2C_TransferConfig>
 8004c0a:	e00f      	b.n	8004c2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	8979      	ldrh	r1, [r7, #10]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fad8 	bl	80051dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d19e      	bne.n	8004b74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f92c 	bl	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01a      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_I2C_Mem_Write+0x224>)
 8004c5e:	400b      	ands	r3, r1
 8004c60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	fe00e800 	.word	0xfe00e800

08004c8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9a:	b2db      	uxtb	r3, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	813b      	strh	r3, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	8979      	ldrh	r1, [r7, #10]
 8004cc8:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <I2C_RequestMemoryWrite+0xa4>)
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fa83 	bl	80051dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f89c 	bl	8004e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e02c      	b.n	8004d44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8004cfa:	e015      	b.n	8004d28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	69b9      	ldr	r1, [r7, #24]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f882 	bl	8004e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e012      	b.n	8004d44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f830 	bl	8004d98 <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	80002000 	.word	0x80002000

08004d50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d103      	bne.n	8004d6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d007      	beq.n	8004d8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	619a      	str	r2, [r3, #24]
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da8:	e022      	b.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d01e      	beq.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fd fce1 	bl	8002778 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e00f      	b.n	8004e10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d0cd      	beq.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e24:	e02c      	b.n	8004e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f8ea 	bl	8005004 <I2C_IsErrorOccurred>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e02a      	b.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d01e      	beq.n	8004e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fd fc99 	bl	8002778 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d113      	bne.n	8004e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e007      	b.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d1cb      	bne.n	8004e26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea4:	e028      	b.n	8004ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8aa 	bl	8005004 <I2C_IsErrorOccurred>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e026      	b.n	8004f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fd fc5d 	bl	8002778 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d113      	bne.n	8004ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e007      	b.n	8004f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d1cf      	bne.n	8004ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f1c:	e064      	b.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f86e 	bl	8005004 <I2C_IsErrorOccurred>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e062      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d138      	bne.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d105      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e04e      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d107      	bne.n	8004f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2204      	movs	r2, #4
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
 8004f76:	e002      	b.n	8004f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2220      	movs	r2, #32
 8004f84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fd fbe1 	bl	8002778 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10f      	bne.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d193      	bne.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d075      	beq.n	800511c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2210      	movs	r2, #16
 8005036:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005038:	e056      	b.n	80050e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d052      	beq.n	80050e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005042:	f7fd fb99 	bl	8002778 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <I2C_IsErrorOccurred+0x54>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d147      	bne.n	80050e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005062:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800506a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507a:	d12e      	bne.n	80050da <I2C_IsErrorOccurred+0xd6>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005082:	d02a      	beq.n	80050da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b20      	cmp	r3, #32
 8005088:	d027      	beq.n	80050da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005098:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800509a:	f7fd fb6d 	bl	8002778 <HAL_GetTick>
 800509e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a0:	e01b      	b.n	80050da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050a2:	f7fd fb69 	bl	8002778 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b19      	cmp	r3, #25
 80050ae:	d914      	bls.n	80050da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d1dc      	bne.n	80050a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d003      	beq.n	80050fe <I2C_IsErrorOccurred+0xfa>
 80050f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d09d      	beq.n	800503a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2220      	movs	r2, #32
 800510c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f043 0304 	orr.w	r3, r3, #4
 8005114:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800513e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f043 0302 	orr.w	r3, r3, #2
 8005178:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005182:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800518a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01c      	beq.n	80051cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fddc 	bl	8004d50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <I2C_IsErrorOccurred+0x1d4>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	fe00e800 	.word	0xfe00e800

080051dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	817b      	strh	r3, [r7, #10]
 80051ea:	4613      	mov	r3, r2
 80051ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051f4:	7a7b      	ldrb	r3, [r7, #9]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	4313      	orrs	r3, r2
 8005206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800520a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	0d5b      	lsrs	r3, r3, #21
 8005216:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <I2C_TransferConfig+0x60>)
 800521c:	430b      	orrs	r3, r1
 800521e:	43db      	mvns	r3, r3
 8005220:	ea02 0103 	and.w	r1, r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	03ff63ff 	.word	0x03ff63ff

08005240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b20      	cmp	r3, #32
 8005254:	d138      	bne.n	80052c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005260:	2302      	movs	r3, #2
 8005262:	e032      	b.n	80052ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2224      	movs	r2, #36	; 0x24
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005292:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d139      	bne.n	8005360 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e033      	b.n	8005362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2224      	movs	r2, #36	; 0x24
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005328:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40007000 	.word	0x40007000

08005390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40007000 	.word	0x40007000

080053ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ba:	d130      	bne.n	800541e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c8:	d038      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2232      	movs	r2, #50	; 0x32
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0c9b      	lsrs	r3, r3, #18
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f0:	e002      	b.n	80053f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d102      	bne.n	800540c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f2      	bne.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d110      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00f      	b.n	800543e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542a:	d007      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40007000 	.word	0x40007000
 8005450:	20000014 	.word	0x20000014
 8005454:	431bde83 	.word	0x431bde83

08005458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f000 bc02 	b.w	8005c70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546c:	4b96      	ldr	r3, [pc, #600]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005476:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80e4 	beq.w	8005656 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4c>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	f040 808b 	bne.w	80055b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	f040 8087 	bne.w	80055b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054a4:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_OscConfig+0x64>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e3d9      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	4b81      	ldr	r3, [pc, #516]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCC_OscConfig+0x7e>
 80054cc:	4b7e      	ldr	r3, [pc, #504]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d4:	e005      	b.n	80054e2 <HAL_RCC_OscConfig+0x8a>
 80054d6:	4b7c      	ldr	r3, [pc, #496]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d223      	bcs.n	800552e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd8c 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e3ba      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a72      	ldr	r2, [pc, #456]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005500:	f043 0308 	orr.w	r3, r3, #8
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b70      	ldr	r3, [pc, #448]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	496d      	ldr	r1, [pc, #436]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005518:	4b6b      	ldr	r3, [pc, #428]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	4968      	ldr	r1, [pc, #416]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005528:	4313      	orrs	r3, r2
 800552a:	604b      	str	r3, [r1, #4]
 800552c:	e025      	b.n	800557a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552e:	4b66      	ldr	r3, [pc, #408]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a65      	ldr	r2, [pc, #404]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005534:	f043 0308 	orr.w	r3, r3, #8
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b63      	ldr	r3, [pc, #396]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	4960      	ldr	r1, [pc, #384]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800554c:	4b5e      	ldr	r3, [pc, #376]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	495b      	ldr	r1, [pc, #364]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd4c 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e37a      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800557a:	f000 fc81 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 800557e:	4602      	mov	r2, r0
 8005580:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	4950      	ldr	r1, [pc, #320]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800558c:	5ccb      	ldrb	r3, [r1, r3]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	4a4e      	ldr	r2, [pc, #312]	; (80056d0 <HAL_RCC_OscConfig+0x278>)
 8005598:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800559a:	4b4e      	ldr	r3, [pc, #312]	; (80056d4 <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd f89a 	bl	80026d8 <HAL_InitTick>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d052      	beq.n	8005654 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	e35e      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d032      	beq.n	8005620 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055ba:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a42      	ldr	r2, [pc, #264]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055c6:	f7fd f8d7 	bl	8002778 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055ce:	f7fd f8d3 	bl	8002778 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e347      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055e0:	4b39      	ldr	r3, [pc, #228]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f0      	beq.n	80055ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055f2:	f043 0308 	orr.w	r3, r3, #8
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4930      	ldr	r1, [pc, #192]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	492b      	ldr	r1, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
 800561e:	e01a      	b.n	8005656 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a28      	ldr	r2, [pc, #160]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800562c:	f7fd f8a4 	bl	8002778 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005634:	f7fd f8a0 	bl	8002778 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e314      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005646:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1dc>
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d073      	beq.n	800574a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x21c>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b0c      	cmp	r3, #12
 800566c:	d10e      	bne.n	800568c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d10b      	bne.n	800568c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d063      	beq.n	8005748 <HAL_RCC_OscConfig+0x2f0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d15f      	bne.n	8005748 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e2f1      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x24c>
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e025      	b.n	80056f0 <HAL_RCC_OscConfig+0x298>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ac:	d114      	bne.n	80056d8 <HAL_RCC_OscConfig+0x280>
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80056b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <HAL_RCC_OscConfig+0x270>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e013      	b.n	80056f0 <HAL_RCC_OscConfig+0x298>
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800acac 	.word	0x0800acac
 80056d0:	20000014 	.word	0x20000014
 80056d4:	20000018 	.word	0x20000018
 80056d8:	4ba0      	ldr	r3, [pc, #640]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a9f      	ldr	r2, [pc, #636]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b9d      	ldr	r3, [pc, #628]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a9c      	ldr	r2, [pc, #624]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fd f83e 	bl	8002778 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fd f83a 	bl	8002778 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e2ae      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005712:	4b92      	ldr	r3, [pc, #584]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x2a8>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fd f82a 	bl	8002778 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005728:	f7fd f826 	bl	8002778 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e29a      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800573a:	4b88      	ldr	r3, [pc, #544]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x2d0>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d060      	beq.n	8005818 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d005      	beq.n	8005768 <HAL_RCC_OscConfig+0x310>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	d119      	bne.n	8005796 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d116      	bne.n	8005796 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005768:	4b7c      	ldr	r3, [pc, #496]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_OscConfig+0x328>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e277      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005780:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	4973      	ldr	r1, [pc, #460]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005794:	e040      	b.n	8005818 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d023      	beq.n	80057e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579e:	4b6f      	ldr	r3, [pc, #444]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a6e      	ldr	r2, [pc, #440]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fc ffe5 	bl	8002778 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b2:	f7fc ffe1 	bl	8002778 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e255      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c4:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b62      	ldr	r3, [pc, #392]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	495f      	ldr	r1, [pc, #380]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
 80057e4:	e018      	b.n	8005818 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e6:	4b5d      	ldr	r3, [pc, #372]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5c      	ldr	r2, [pc, #368]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80057ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f2:	f7fc ffc1 	bl	8002778 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fa:	f7fc ffbd 	bl	8002778 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e231      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800580c:	4b53      	ldr	r3, [pc, #332]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d03c      	beq.n	800589e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01c      	beq.n	8005866 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582c:	4b4b      	ldr	r3, [pc, #300]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800582e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005832:	4a4a      	ldr	r2, [pc, #296]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fc ff9c 	bl	8002778 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005844:	f7fc ff98 	bl	8002778 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e20c      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005856:	4b41      	ldr	r3, [pc, #260]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <HAL_RCC_OscConfig+0x3ec>
 8005864:	e01b      	b.n	800589e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005866:	4b3d      	ldr	r3, [pc, #244]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586c:	4a3b      	ldr	r2, [pc, #236]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc ff7f 	bl	8002778 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800587e:	f7fc ff7b 	bl	8002778 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e1ef      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ef      	bne.n	800587e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80a6 	beq.w	80059f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058b0:	4b2a      	ldr	r3, [pc, #168]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	4a26      	ldr	r2, [pc, #152]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6593      	str	r3, [r2, #88]	; 0x58
 80058c8:	4b24      	ldr	r3, [pc, #144]	; (800595c <HAL_RCC_OscConfig+0x504>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d4:	2301      	movs	r3, #1
 80058d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d8:	4b21      	ldr	r3, [pc, #132]	; (8005960 <HAL_RCC_OscConfig+0x508>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d118      	bne.n	8005916 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e4:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <HAL_RCC_OscConfig+0x508>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <HAL_RCC_OscConfig+0x508>)
 80058ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f0:	f7fc ff42 	bl	8002778 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fc ff3e 	bl	8002778 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1b2      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <HAL_RCC_OscConfig+0x508>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d108      	bne.n	8005930 <HAL_RCC_OscConfig+0x4d8>
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	4a0d      	ldr	r2, [pc, #52]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800592e:	e029      	b.n	8005984 <HAL_RCC_OscConfig+0x52c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b05      	cmp	r3, #5
 8005936:	d115      	bne.n	8005964 <HAL_RCC_OscConfig+0x50c>
 8005938:	4b08      	ldr	r3, [pc, #32]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	4a07      	ldr	r2, [pc, #28]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005940:	f043 0304 	orr.w	r3, r3, #4
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <HAL_RCC_OscConfig+0x504>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	4a03      	ldr	r2, [pc, #12]	; (800595c <HAL_RCC_OscConfig+0x504>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005958:	e014      	b.n	8005984 <HAL_RCC_OscConfig+0x52c>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	40007000 	.word	0x40007000
 8005964:	4b9a      	ldr	r3, [pc, #616]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	4a99      	ldr	r2, [pc, #612]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005974:	4b96      	ldr	r3, [pc, #600]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	4a95      	ldr	r2, [pc, #596]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fc fef4 	bl	8002778 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fc fef0 	bl	8002778 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e162      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	4b89      	ldr	r3, [pc, #548]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ed      	beq.n	8005994 <HAL_RCC_OscConfig+0x53c>
 80059b8:	e015      	b.n	80059e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fc fedd 	bl	8002778 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc fed9 	bl	8002778 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e14b      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d8:	4b7d      	ldr	r3, [pc, #500]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ed      	bne.n	80059c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	4a77      	ldr	r2, [pc, #476]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d03c      	beq.n	8005a7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a0c:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a12:	4a6f      	ldr	r2, [pc, #444]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fc feac 	bl	8002778 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a24:	f7fc fea8 	bl	8002778 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e11c      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a36:	4b66      	ldr	r3, [pc, #408]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ef      	beq.n	8005a24 <HAL_RCC_OscConfig+0x5cc>
 8005a44:	e01b      	b.n	8005a7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a46:	4b62      	ldr	r3, [pc, #392]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a4c:	4a60      	ldr	r2, [pc, #384]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fc fe8f 	bl	8002778 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a5e:	f7fc fe8b 	bl	8002778 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0ff      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a70:	4b57      	ldr	r3, [pc, #348]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ef      	bne.n	8005a5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80f3 	beq.w	8005c6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f040 80c9 	bne.w	8005c24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a92:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f003 0203 	and.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d12c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d123      	bne.n	8005b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d11b      	bne.n	8005b00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d113      	bne.n	8005b00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d109      	bne.n	8005b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d06b      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d062      	beq.n	8005bcc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b06:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0ac      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2d      	ldr	r2, [pc, #180]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b22:	f7fc fe29 	bl	8002778 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fc fe25 	bl	8002778 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e099      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <HAL_RCC_OscConfig+0x77c>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b62:	0212      	lsls	r2, r2, #8
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b6a:	0852      	lsrs	r2, r2, #1
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0552      	lsls	r2, r2, #21
 8005b70:	4311      	orrs	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b76:	0852      	lsrs	r2, r2, #1
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	0652      	lsls	r2, r2, #25
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b82:	06d2      	lsls	r2, r2, #27
 8005b84:	430a      	orrs	r2, r1
 8005b86:	4912      	ldr	r1, [pc, #72]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ba4:	f7fc fde8 	bl	8002778 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc fde4 	bl	8002778 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e058      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <HAL_RCC_OscConfig+0x778>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bca:	e050      	b.n	8005c6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04f      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d144      	bne.n	8005c6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a23      	ldr	r2, [pc, #140]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bfc:	f7fc fdbc 	bl	8002778 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fc fdb8 	bl	8002778 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e02c      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x7ac>
 8005c22:	e024      	b.n	8005c6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	d01f      	beq.n	8005c6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fc fd9f 	bl	8002778 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3e:	f7fc fd9b 	bl	8002778 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	4905      	ldr	r1, [pc, #20]	; (8005c78 <HAL_RCC_OscConfig+0x820>)
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCC_OscConfig+0x824>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
 8005c68:	e001      	b.n	8005c6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	feeefffc 	.word	0xfeeefffc

08005c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0e7      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	4970      	ldr	r1, [pc, #448]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cf      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d908      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4960      	ldr	r1, [pc, #384]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d04c      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d121      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0a6      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d1e:	4b54      	ldr	r3, [pc, #336]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e09a      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d36:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e08e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e086      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4943      	ldr	r1, [pc, #268]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fc fd06 	bl	8002778 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fc fd02 	bl	8002778 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e06e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	492b      	ldr	r1, [pc, #172]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d210      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd4:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 0207 	bic.w	r2, r3, #7
 8005ddc:	4923      	ldr	r1, [pc, #140]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e036      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4918      	ldr	r1, [pc, #96]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4910      	ldr	r1, [pc, #64]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e34:	f000 f824 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	490b      	ldr	r1, [pc, #44]	; (8005e74 <HAL_RCC_ClockConfig+0x1f4>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_ClockConfig+0x1fc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fc fc3d 	bl	80026d8 <HAL_InitTick>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e62:	7afb      	ldrb	r3, [r7, #11]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0800acac 	.word	0x0800acac
 8005e78:	20000014 	.word	0x20000014
 8005e7c:	20000018 	.word	0x20000018

08005e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e98:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d121      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d11e      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb4:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e005      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005edc:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e004      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f04:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d134      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d003      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0xac>
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f28:	617b      	str	r3, [r7, #20]
      break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2e:	617b      	str	r3, [r7, #20]
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	617b      	str	r3, [r7, #20]
      break;
 8005f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0e5b      	lsrs	r3, r3, #25
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f78:	69bb      	ldr	r3, [r7, #24]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	; 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800acc4 	.word	0x0800acc4
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000014 	.word	0x20000014

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800acbc 	.word	0x0800acbc

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe0:	f7ff ffda 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	0800acbc 	.word	0x0800acbc

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006020:	f7ff f9b6 	bl	8005390 <HAL_PWREx_GetVoltageRange>
 8006024:	6178      	str	r0, [r7, #20]
 8006026:	e014      	b.n	8006052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006040:	f7ff f9a6 	bl	8005390 <HAL_PWREx_GetVoltageRange>
 8006044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006058:	d10b      	bne.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d919      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2ba0      	cmp	r3, #160	; 0xa0
 8006064:	d902      	bls.n	800606c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e013      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d902      	bls.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006078:	2303      	movs	r3, #3
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d102      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0207 	bic.w	r2, r3, #7
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d031      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060ec:	d01a      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80060ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f2:	d814      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fc:	d10f      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80060fe:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4a5c      	ldr	r2, [pc, #368]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800610a:	e00c      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f9de 	bl	80064d4 <RCCEx_PLLSAI1_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	74fb      	strb	r3, [r7, #19]
      break;
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800612c:	4b51      	ldr	r3, [pc, #324]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	494e      	ldr	r1, [pc, #312]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006142:	e001      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	7cfb      	ldrb	r3, [r7, #19]
 8006146:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 809e 	beq.w	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800615a:	4b46      	ldr	r3, [pc, #280]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00d      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006170:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	4a3f      	ldr	r2, [pc, #252]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	6593      	str	r3, [r2, #88]	; 0x58
 800617c:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006188:	2301      	movs	r3, #1
 800618a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a39      	ldr	r2, [pc, #228]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006198:	f7fc faee 	bl	8002778 <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800619e:	e009      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fc faea 	bl	8002778 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d902      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	74fb      	strb	r3, [r7, #19]
        break;
 80061b2:	e005      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ef      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d15a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d019      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061e2:	4b24      	ldr	r3, [pc, #144]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ee:	4b21      	ldr	r3, [pc, #132]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800620e:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d016      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fc faaa 	bl	8002778 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006226:	e00b      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006228:	f7fc faa6 	bl	8002778 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d902      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	74fb      	strb	r3, [r7, #19]
            break;
 800623e:	e006      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006240:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ec      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006254:	4b07      	ldr	r3, [pc, #28]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	4904      	ldr	r1, [pc, #16]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800626a:	e009      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	74bb      	strb	r3, [r7, #18]
 8006270:	e006      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
 8006278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006280:	7c7b      	ldrb	r3, [r7, #17]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d105      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006286:	4b8a      	ldr	r3, [pc, #552]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	4a89      	ldr	r2, [pc, #548]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800628c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006290:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800629e:	4b84      	ldr	r3, [pc, #528]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	f023 0203 	bic.w	r2, r3, #3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	4980      	ldr	r1, [pc, #512]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062c0:	4b7b      	ldr	r3, [pc, #492]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 020c 	bic.w	r2, r3, #12
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4978      	ldr	r1, [pc, #480]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e2:	4b73      	ldr	r3, [pc, #460]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	496f      	ldr	r1, [pc, #444]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006304:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	4967      	ldr	r1, [pc, #412]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006326:	4b62      	ldr	r3, [pc, #392]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	495e      	ldr	r1, [pc, #376]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006348:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4956      	ldr	r1, [pc, #344]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800636a:	4b51      	ldr	r3, [pc, #324]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	494d      	ldr	r1, [pc, #308]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d028      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800638c:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4945      	ldr	r1, [pc, #276]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063aa:	d106      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ac:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a3f      	ldr	r2, [pc, #252]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b6:	60d3      	str	r3, [r2, #12]
 80063b8:	e011      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c2:	d10c      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f882 	bl	80064d4 <RCCEx_PLLSAI1_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063d4:	7cfb      	ldrb	r3, [r7, #19]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80063da:	7cfb      	ldrb	r3, [r7, #19]
 80063dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d028      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063ea:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	492d      	ldr	r1, [pc, #180]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006408:	d106      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800640a:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006414:	60d3      	str	r3, [r2, #12]
 8006416:	e011      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006420:	d10c      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f853 	bl	80064d4 <RCCEx_PLLSAI1_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01c      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006448:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	4916      	ldr	r1, [pc, #88]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006466:	d10c      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	2102      	movs	r1, #2
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f830 	bl	80064d4 <RCCEx_PLLSAI1_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800648e:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006494:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000

080064b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064be:	f043 0304 	orr.w	r3, r3, #4
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000

080064d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064e2:	4b74      	ldr	r3, [pc, #464]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064ee:	4b71      	ldr	r3, [pc, #452]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f003 0203 	and.w	r2, r3, #3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d10d      	bne.n	800651a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
       ||
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006506:	4b6b      	ldr	r3, [pc, #428]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
       ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d047      	beq.n	80065aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
 800651e:	e044      	b.n	80065aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d018      	beq.n	800655a <RCCEx_PLLSAI1_Config+0x86>
 8006528:	2b03      	cmp	r3, #3
 800652a:	d825      	bhi.n	8006578 <RCCEx_PLLSAI1_Config+0xa4>
 800652c:	2b01      	cmp	r3, #1
 800652e:	d002      	beq.n	8006536 <RCCEx_PLLSAI1_Config+0x62>
 8006530:	2b02      	cmp	r3, #2
 8006532:	d009      	beq.n	8006548 <RCCEx_PLLSAI1_Config+0x74>
 8006534:	e020      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006536:	4b5f      	ldr	r3, [pc, #380]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11d      	bne.n	800657e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006546:	e01a      	b.n	800657e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006548:	4b5a      	ldr	r3, [pc, #360]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	2b00      	cmp	r3, #0
 8006552:	d116      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006558:	e013      	b.n	8006582 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10f      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006566:	4b53      	ldr	r3, [pc, #332]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006576:	e006      	b.n	8006586 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
      break;
 800657c:	e004      	b.n	8006588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800657e:	bf00      	nop
 8006580:	e002      	b.n	8006588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006582:	bf00      	nop
 8006584:	e000      	b.n	8006588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006586:	bf00      	nop
    }

    if(status == HAL_OK)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800658e:	4b49      	ldr	r3, [pc, #292]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	3b01      	subs	r3, #1
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	430b      	orrs	r3, r1
 80065a4:	4943      	ldr	r1, [pc, #268]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d17c      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065b0:	4b40      	ldr	r3, [pc, #256]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3f      	ldr	r2, [pc, #252]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065bc:	f7fc f8dc 	bl	8002778 <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065c2:	e009      	b.n	80065d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065c4:	f7fc f8d8 	bl	8002778 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d902      	bls.n	80065d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	73fb      	strb	r3, [r7, #15]
        break;
 80065d6:	e005      	b.n	80065e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ef      	bne.n	80065c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d15f      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d110      	bne.n	8006612 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f0:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6892      	ldr	r2, [r2, #8]
 8006600:	0211      	lsls	r1, r2, #8
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68d2      	ldr	r2, [r2, #12]
 8006606:	06d2      	lsls	r2, r2, #27
 8006608:	430a      	orrs	r2, r1
 800660a:	492a      	ldr	r1, [pc, #168]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	610b      	str	r3, [r1, #16]
 8006610:	e027      	b.n	8006662 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d112      	bne.n	800663e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006618:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6912      	ldr	r2, [r2, #16]
 800662e:	0852      	lsrs	r2, r2, #1
 8006630:	3a01      	subs	r2, #1
 8006632:	0552      	lsls	r2, r2, #21
 8006634:	430a      	orrs	r2, r1
 8006636:	491f      	ldr	r1, [pc, #124]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006638:	4313      	orrs	r3, r2
 800663a:	610b      	str	r3, [r1, #16]
 800663c:	e011      	b.n	8006662 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800663e:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006646:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6892      	ldr	r2, [r2, #8]
 800664e:	0211      	lsls	r1, r2, #8
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6952      	ldr	r2, [r2, #20]
 8006654:	0852      	lsrs	r2, r2, #1
 8006656:	3a01      	subs	r2, #1
 8006658:	0652      	lsls	r2, r2, #25
 800665a:	430a      	orrs	r2, r1
 800665c:	4915      	ldr	r1, [pc, #84]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006662:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800666c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666e:	f7fc f883 	bl	8002778 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006674:	e009      	b.n	800668a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006676:	f7fc f87f 	bl	8002778 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d902      	bls.n	800668a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	73fb      	strb	r3, [r7, #15]
          break;
 8006688:	e005      	b.n	8006696 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0ef      	beq.n	8006676 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	4903      	ldr	r1, [pc, #12]	; (80066b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40021000 	.word	0x40021000

080066b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e095      	b.n	80067f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d108      	bne.n	80066e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066da:	d009      	beq.n	80066f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	61da      	str	r2, [r3, #28]
 80066e2:	e005      	b.n	80066f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fb fb5a 	bl	8001dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006730:	d902      	bls.n	8006738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e002      	b.n	800673e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800673c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006746:	d007      	beq.n	8006758 <HAL_SPI_Init+0xa0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006750:	d002      	beq.n	8006758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	ea42 0103 	orr.w	r1, r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	f003 0204 	and.w	r2, r3, #4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b088      	sub	sp, #32
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_SPI_Transmit+0x22>
 800681c:	2302      	movs	r3, #2
 800681e:	e158      	b.n	8006ad2 <HAL_SPI_Transmit+0x2d4>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006828:	f7fb ffa6 	bl	8002778 <HAL_GetTick>
 800682c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d002      	beq.n	8006844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006842:	e13d      	b.n	8006ac0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_SPI_Transmit+0x52>
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006854:	e134      	b.n	8006ac0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2203      	movs	r2, #3
 800685a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a0:	d10f      	bne.n	80068c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d007      	beq.n	80068e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e8:	d94b      	bls.n	8006982 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Transmit+0xfa>
 80068f2:	8afb      	ldrh	r3, [r7, #22]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d13e      	bne.n	8006976 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800691c:	e02b      	b.n	8006976 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b02      	cmp	r3, #2
 800692a:	d112      	bne.n	8006952 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	1c9a      	adds	r2, r3, #2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006950:	e011      	b.n	8006976 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006952:	f7fb ff11 	bl	8002778 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d803      	bhi.n	800696a <HAL_SPI_Transmit+0x16c>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d102      	bne.n	8006970 <HAL_SPI_Transmit+0x172>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006974:	e0a4      	b.n	8006ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ce      	bne.n	800691e <HAL_SPI_Transmit+0x120>
 8006980:	e07c      	b.n	8006a7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x192>
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d170      	bne.n	8006a72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	d912      	bls.n	80069c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b02      	subs	r3, #2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069be:	e058      	b.n	8006a72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069e6:	e044      	b.n	8006a72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d12b      	bne.n	8006a4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d912      	bls.n	8006a26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b02      	subs	r3, #2
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a24:	e025      	b.n	8006a72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4c:	e011      	b.n	8006a72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4e:	f7fb fe93 	bl	8002778 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d803      	bhi.n	8006a66 <HAL_SPI_Transmit+0x268>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d102      	bne.n	8006a6c <HAL_SPI_Transmit+0x26e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a70:	e026      	b.n	8006ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1b5      	bne.n	80069e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f949 	bl	8006d18 <SPI_EndRxTxTransaction>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e000      	b.n	8006ac0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006aec:	f7fb fe44 	bl	8002778 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4413      	add	r3, r2
 8006afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006afc:	f7fb fe3c 	bl	8002778 <HAL_GetTick>
 8006b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b02:	4b39      	ldr	r3, [pc, #228]	; (8006be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	015b      	lsls	r3, r3, #5
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b12:	e054      	b.n	8006bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d050      	beq.n	8006bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b1c:	f7fb fe2c 	bl	8002778 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d902      	bls.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d13d      	bne.n	8006bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4a:	d111      	bne.n	8006b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b54:	d004      	beq.n	8006b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5e:	d107      	bne.n	8006b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	d10f      	bne.n	8006b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e017      	b.n	8006bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	bf0c      	ite	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d19b      	bne.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000014 	.word	0x20000014

08006bec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bfe:	f7fb fdbb 	bl	8002778 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c0e:	f7fb fdb3 	bl	8002778 <HAL_GetTick>
 8006c12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c1c:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00da      	lsls	r2, r3, #3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	0d1b      	lsrs	r3, r3, #20
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c34:	e060      	b.n	8006cf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c3c:	d107      	bne.n	8006c4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d050      	beq.n	8006cf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c56:	f7fb fd8f 	bl	8002778 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d902      	bls.n	8006c6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d13d      	bne.n	8006ce8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c84:	d111      	bne.n	8006caa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8e:	d004      	beq.n	8006c9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c98:	d107      	bne.n	8006caa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d10f      	bne.n	8006cd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e010      	b.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d196      	bne.n	8006c36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3728      	adds	r7, #40	; 0x28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000014 	.word	0x20000014

08006d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff ff5b 	bl	8006bec <SPI_WaitFifoStateUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d40:	f043 0220 	orr.w	r2, r3, #32
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e027      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fec0 	bl	8006adc <SPI_WaitFlagStateUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e014      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff ff34 	bl	8006bec <SPI_WaitFifoStateUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e000      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e049      	b.n	8006e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fb faf6 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f000 feae 	bl	8007b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e033      	b.n	8006ed4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_TIM_Base_Start+0x8c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIM_Base_Start+0x3e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e86:	d004      	beq.n	8006e92 <HAL_TIM_Base_Start+0x3e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <HAL_TIM_Base_Start+0x90>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d115      	bne.n	8006ebe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <HAL_TIM_Base_Start+0x94>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	d015      	beq.n	8006ed0 <HAL_TIM_Base_Start+0x7c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eaa:	d011      	beq.n	8006ed0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	e008      	b.n	8006ed0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e000      	b.n	8006ed2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	00010007 	.word	0x00010007

08006eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e03b      	b.n	8006f7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIM_Base_Start_IT+0x4e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIM_Base_Start_IT+0x4e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d115      	bne.n	8006f66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <HAL_TIM_Base_Start_IT+0xa4>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	d015      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x8c>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f52:	d011      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f64:	e008      	b.n	8006f78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e000      	b.n	8006f7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	00010007 	.word	0x00010007

08006f94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10f      	bne.n	8006fdc <HAL_TIM_Base_Stop_IT+0x48>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6a1a      	ldr	r2, [r3, #32]
 8006fc2:	f240 4344 	movw	r3, #1092	; 0x444
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_Base_Stop_IT+0x48>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e049      	b.n	8007098 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f841 	bl	80070a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f000 fd87 	bl	8007b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e049      	b.n	800715a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f841 	bl	8007162 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f000 fd26 	bl	8007b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <HAL_TIM_IC_Start_IT+0x1e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e023      	b.n	80071de <HAL_TIM_IC_Start_IT+0x66>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_IC_Start_IT+0x2e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	e01b      	b.n	80071de <HAL_TIM_IC_Start_IT+0x66>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_IC_Start_IT+0x3e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	e013      	b.n	80071de <HAL_TIM_IC_Start_IT+0x66>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_IC_Start_IT+0x4e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e00b      	b.n	80071de <HAL_TIM_IC_Start_IT+0x66>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_IC_Start_IT+0x5e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e003      	b.n	80071de <HAL_TIM_IC_Start_IT+0x66>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <HAL_TIM_IC_Start_IT+0x78>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	e013      	b.n	8007218 <HAL_TIM_IC_Start_IT+0xa0>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d104      	bne.n	8007200 <HAL_TIM_IC_Start_IT+0x88>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	e00b      	b.n	8007218 <HAL_TIM_IC_Start_IT+0xa0>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b08      	cmp	r3, #8
 8007204:	d104      	bne.n	8007210 <HAL_TIM_IC_Start_IT+0x98>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e003      	b.n	8007218 <HAL_TIM_IC_Start_IT+0xa0>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007216:	b2db      	uxtb	r3, r3
 8007218:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007220:	7b7b      	ldrb	r3, [r7, #13]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0c9      	b.n	80073be <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <HAL_TIM_IC_Start_IT+0xc2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007238:	e023      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x10a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d104      	bne.n	800724a <HAL_TIM_IC_Start_IT+0xd2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007248:	e01b      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x10a>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d104      	bne.n	800725a <HAL_TIM_IC_Start_IT+0xe2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007258:	e013      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x10a>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	d104      	bne.n	800726a <HAL_TIM_IC_Start_IT+0xf2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007268:	e00b      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x10a>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b10      	cmp	r3, #16
 800726e:	d104      	bne.n	800727a <HAL_TIM_IC_Start_IT+0x102>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007278:	e003      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x10a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IC_Start_IT+0x11a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007290:	e013      	b.n	80072ba <HAL_TIM_IC_Start_IT+0x142>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_IC_Start_IT+0x12a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a0:	e00b      	b.n	80072ba <HAL_TIM_IC_Start_IT+0x142>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0x13a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072b0:	e003      	b.n	80072ba <HAL_TIM_IC_Start_IT+0x142>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b0c      	cmp	r3, #12
 80072be:	d841      	bhi.n	8007344 <HAL_TIM_IC_Start_IT+0x1cc>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_TIM_IC_Start_IT+0x150>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072fd 	.word	0x080072fd
 80072cc:	08007345 	.word	0x08007345
 80072d0:	08007345 	.word	0x08007345
 80072d4:	08007345 	.word	0x08007345
 80072d8:	0800730f 	.word	0x0800730f
 80072dc:	08007345 	.word	0x08007345
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007345 	.word	0x08007345
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007345 	.word	0x08007345
 80072f4:	08007345 	.word	0x08007345
 80072f8:	08007333 	.word	0x08007333
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0202 	orr.w	r2, r2, #2
 800730a:	60da      	str	r2, [r3, #12]
      break;
 800730c:	e01d      	b.n	800734a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0204 	orr.w	r2, r2, #4
 800731c:	60da      	str	r2, [r3, #12]
      break;
 800731e:	e014      	b.n	800734a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0208 	orr.w	r2, r2, #8
 800732e:	60da      	str	r2, [r3, #12]
      break;
 8007330:	e00b      	b.n	800734a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0210 	orr.w	r2, r2, #16
 8007340:	60da      	str	r2, [r3, #12]
      break;
 8007342:	e002      	b.n	800734a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	bf00      	nop
  }

  if (status == HAL_OK)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d135      	bne.n	80073bc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2201      	movs	r2, #1
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f87b 	bl	8008454 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <HAL_TIM_IC_Start_IT+0x250>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_TIM_IC_Start_IT+0x204>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d004      	beq.n	800737c <HAL_TIM_IC_Start_IT+0x204>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a15      	ldr	r2, [pc, #84]	; (80073cc <HAL_TIM_IC_Start_IT+0x254>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d115      	bne.n	80073a8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <HAL_TIM_IC_Start_IT+0x258>)
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b06      	cmp	r3, #6
 800738c:	d015      	beq.n	80073ba <HAL_TIM_IC_Start_IT+0x242>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007394:	d011      	beq.n	80073ba <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a6:	e008      	b.n	80073ba <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e000      	b.n	80073bc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40014000 	.word	0x40014000
 80073d0:	00010007 	.word	0x00010007

080073d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d122      	bne.n	8007430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d11b      	bne.n	8007430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0202 	mvn.w	r2, #2
 8007400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa fbde 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb71 	bl	8007b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb78 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d122      	bne.n	8007484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b04      	cmp	r3, #4
 800744a:	d11b      	bne.n	8007484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0204 	mvn.w	r2, #4
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fa fbb4 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb47 	bl	8007b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb4e 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b08      	cmp	r3, #8
 8007490:	d122      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d11b      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0208 	mvn.w	r2, #8
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fa fb8a 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fb1d 	bl	8007b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb24 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d122      	bne.n	800752c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d11b      	bne.n	800752c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0210 	mvn.w	r2, #16
 80074fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2208      	movs	r2, #8
 8007502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fa fb60 	bl	8001bd8 <HAL_TIM_IC_CaptureCallback>
 8007518:	e005      	b.n	8007526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 faf3 	bl	8007b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fafa 	bl	8007b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10e      	bne.n	8007558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0201 	mvn.w	r2, #1
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fa fbe8 	bl	8001d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d10e      	bne.n	8007584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d107      	bne.n	8007584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800757c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f876 	bl	8008670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	d10e      	bne.n	80075b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d107      	bne.n	80075b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f869 	bl	8008684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d10e      	bne.n	80075de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d107      	bne.n	80075de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 faa8 	bl	8007b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d10e      	bne.n	800760a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d107      	bne.n	800760a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0220 	mvn.w	r2, #32
 8007602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f829 	bl	800865c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_TIM_IC_ConfigChannel+0x1e>
 800762c:	2302      	movs	r3, #2
 800762e:	e088      	b.n	8007742 <HAL_TIM_IC_ConfigChannel+0x130>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11b      	bne.n	8007676 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800764e:	f000 fd5b 	bl	8008108 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 020c 	bic.w	r2, r2, #12
 8007660:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6999      	ldr	r1, [r3, #24]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	619a      	str	r2, [r3, #24]
 8007674:	e060      	b.n	8007738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d11c      	bne.n	80076b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800768c:	f000 fdc1 	bl	8008212 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800769e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6999      	ldr	r1, [r3, #24]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	021a      	lsls	r2, r3, #8
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	619a      	str	r2, [r3, #24]
 80076b4:	e040      	b.n	8007738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d11b      	bne.n	80076f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076cc:	f000 fe0e 	bl	80082ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 020c 	bic.w	r2, r2, #12
 80076de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69d9      	ldr	r1, [r3, #28]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	61da      	str	r2, [r3, #28]
 80076f2:	e021      	b.n	8007738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b0c      	cmp	r3, #12
 80076f8:	d11c      	bne.n	8007734 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800770a:	f000 fe2b 	bl	8008364 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800771c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69d9      	ldr	r1, [r3, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	021a      	lsls	r2, r3, #8
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	61da      	str	r2, [r3, #28]
 8007732:	e001      	b.n	8007738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007766:	2302      	movs	r3, #2
 8007768:	e0ff      	b.n	800796a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b14      	cmp	r3, #20
 8007776:	f200 80f0 	bhi.w	800795a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077d5 	.word	0x080077d5
 8007784:	0800795b 	.word	0x0800795b
 8007788:	0800795b 	.word	0x0800795b
 800778c:	0800795b 	.word	0x0800795b
 8007790:	08007815 	.word	0x08007815
 8007794:	0800795b 	.word	0x0800795b
 8007798:	0800795b 	.word	0x0800795b
 800779c:	0800795b 	.word	0x0800795b
 80077a0:	08007857 	.word	0x08007857
 80077a4:	0800795b 	.word	0x0800795b
 80077a8:	0800795b 	.word	0x0800795b
 80077ac:	0800795b 	.word	0x0800795b
 80077b0:	08007897 	.word	0x08007897
 80077b4:	0800795b 	.word	0x0800795b
 80077b8:	0800795b 	.word	0x0800795b
 80077bc:	0800795b 	.word	0x0800795b
 80077c0:	080078d9 	.word	0x080078d9
 80077c4:	0800795b 	.word	0x0800795b
 80077c8:	0800795b 	.word	0x0800795b
 80077cc:	0800795b 	.word	0x0800795b
 80077d0:	08007919 	.word	0x08007919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fa16 	bl	8007c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0208 	orr.w	r2, r2, #8
 80077ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0204 	bic.w	r2, r2, #4
 80077fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6999      	ldr	r1, [r3, #24]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	619a      	str	r2, [r3, #24]
      break;
 8007812:	e0a5      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fa72 	bl	8007d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6999      	ldr	r1, [r3, #24]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	619a      	str	r2, [r3, #24]
      break;
 8007854:	e084      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 facb 	bl	8007df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0208 	orr.w	r2, r2, #8
 8007870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69da      	ldr	r2, [r3, #28]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0204 	bic.w	r2, r2, #4
 8007880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69d9      	ldr	r1, [r3, #28]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	61da      	str	r2, [r3, #28]
      break;
 8007894:	e064      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fb23 	bl	8007ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69da      	ldr	r2, [r3, #28]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69d9      	ldr	r1, [r3, #28]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	021a      	lsls	r2, r3, #8
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	61da      	str	r2, [r3, #28]
      break;
 80078d6:	e043      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fb60 	bl	8007fa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0208 	orr.w	r2, r2, #8
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0204 	bic.w	r2, r2, #4
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007916:	e023      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fb98 	bl	8008054 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	021a      	lsls	r2, r3, #8
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007958:	e002      	b.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
      break;
 800795e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop

08007974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_TIM_ConfigClockSource+0x1c>
 800798c:	2302      	movs	r3, #2
 800798e:	e0b6      	b.n	8007afe <HAL_TIM_ConfigClockSource+0x18a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d03e      	beq.n	8007a4c <HAL_TIM_ConfigClockSource+0xd8>
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	f200 8087 	bhi.w	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	f000 8086 	beq.w	8007aea <HAL_TIM_ConfigClockSource+0x176>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d87f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 80079e4:	2b70      	cmp	r3, #112	; 0x70
 80079e6:	d01a      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0xaa>
 80079e8:	2b70      	cmp	r3, #112	; 0x70
 80079ea:	d87b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 80079ec:	2b60      	cmp	r3, #96	; 0x60
 80079ee:	d050      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0x11e>
 80079f0:	2b60      	cmp	r3, #96	; 0x60
 80079f2:	d877      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 80079f4:	2b50      	cmp	r3, #80	; 0x50
 80079f6:	d03c      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0xfe>
 80079f8:	2b50      	cmp	r3, #80	; 0x50
 80079fa:	d873      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d058      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x13e>
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d86f      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d064      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d86b      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d060      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d867      	bhi.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05c      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d05a      	beq.n	8007ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a1c:	e062      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a2e:	f000 fcf1 	bl	8008414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	609a      	str	r2, [r3, #8]
      break;
 8007a4a:	e04f      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a5c:	f000 fcda 	bl	8008414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a6e:	609a      	str	r2, [r3, #8]
      break;
 8007a70:	e03c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f000 fb98 	bl	80081b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2150      	movs	r1, #80	; 0x50
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fca7 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007a90:	e02c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 fbf4 	bl	800828c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2160      	movs	r1, #96	; 0x60
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fc97 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007ab0:	e01c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f000 fb78 	bl	80081b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2140      	movs	r1, #64	; 0x40
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fc87 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007ad0:	e00c      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f000 fc7e 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007ae2:	e003      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a2a      	ldr	r2, [pc, #168]	; (8007c00 <TIM_Base_SetConfig+0xbc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_Base_SetConfig+0x20>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b62:	d108      	bne.n	8007b76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <TIM_Base_SetConfig+0xbc>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0x52>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0x52>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1e      	ldr	r2, [pc, #120]	; (8007c04 <TIM_Base_SetConfig+0xc0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0x52>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <TIM_Base_SetConfig+0xc4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <TIM_Base_SetConfig+0xbc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0xa0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <TIM_Base_SetConfig+0xc0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0xa0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <TIM_Base_SetConfig+0xc4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d103      	bne.n	8007bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	615a      	str	r2, [r3, #20]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400

08007c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f023 0302 	bic.w	r3, r3, #2
 8007c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a24      	ldr	r2, [pc, #144]	; (8007cf8 <TIM_OC1_SetConfig+0xec>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_OC1_SetConfig+0x70>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a23      	ldr	r2, [pc, #140]	; (8007cfc <TIM_OC1_SetConfig+0xf0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_OC1_SetConfig+0x70>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <TIM_OC1_SetConfig+0xf4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10c      	bne.n	8007c96 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0308 	bic.w	r3, r3, #8
 8007c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f023 0304 	bic.w	r3, r3, #4
 8007c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <TIM_OC1_SetConfig+0xec>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <TIM_OC1_SetConfig+0xa2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a16      	ldr	r2, [pc, #88]	; (8007cfc <TIM_OC1_SetConfig+0xf0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_OC1_SetConfig+0xa2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a15      	ldr	r2, [pc, #84]	; (8007d00 <TIM_OC1_SetConfig+0xf4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d111      	bne.n	8007cd2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40014400 	.word	0x40014400

08007d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0210 	bic.w	r2, r3, #16
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0320 	bic.w	r3, r3, #32
 8007d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a22      	ldr	r2, [pc, #136]	; (8007dec <TIM_OC2_SetConfig+0xe8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10d      	bne.n	8007d84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a19      	ldr	r2, [pc, #100]	; (8007dec <TIM_OC2_SetConfig+0xe8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_OC2_SetConfig+0x98>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <TIM_OC2_SetConfig+0xec>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC2_SetConfig+0x98>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <TIM_OC2_SetConfig+0xf0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40014400 	.word	0x40014400

08007df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0303 	bic.w	r3, r3, #3
 8007e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a21      	ldr	r2, [pc, #132]	; (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d10d      	bne.n	8007e76 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a18      	ldr	r2, [pc, #96]	; (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d007      	beq.n	8007e8e <TIM_OC3_SetConfig+0x96>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC3_SetConfig+0xe8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_OC3_SetConfig+0x96>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <TIM_OC3_SetConfig+0xec>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d113      	bne.n	8007eb6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	621a      	str	r2, [r3, #32]
}
 8007ed0:	bf00      	nop
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40014000 	.word	0x40014000
 8007ee4:	40014400 	.word	0x40014400

08007ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	031b      	lsls	r3, r3, #12
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <TIM_OC4_SetConfig+0xb0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d007      	beq.n	8007f5c <TIM_OC4_SetConfig+0x74>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a13      	ldr	r2, [pc, #76]	; (8007f9c <TIM_OC4_SetConfig+0xb4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC4_SetConfig+0x74>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a12      	ldr	r2, [pc, #72]	; (8007fa0 <TIM_OC4_SetConfig+0xb8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d109      	bne.n	8007f70 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	019b      	lsls	r3, r3, #6
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40012c00 	.word	0x40012c00
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400

08007fa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	041b      	lsls	r3, r3, #16
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a13      	ldr	r2, [pc, #76]	; (8008048 <TIM_OC5_SetConfig+0xa4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d007      	beq.n	800800e <TIM_OC5_SetConfig+0x6a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a12      	ldr	r2, [pc, #72]	; (800804c <TIM_OC5_SetConfig+0xa8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <TIM_OC5_SetConfig+0x6a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a11      	ldr	r2, [pc, #68]	; (8008050 <TIM_OC5_SetConfig+0xac>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d109      	bne.n	8008022 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400

08008054 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800809a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	051b      	lsls	r3, r3, #20
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a14      	ldr	r2, [pc, #80]	; (80080fc <TIM_OC6_SetConfig+0xa8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d007      	beq.n	80080c0 <TIM_OC6_SetConfig+0x6c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a13      	ldr	r2, [pc, #76]	; (8008100 <TIM_OC6_SetConfig+0xac>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d003      	beq.n	80080c0 <TIM_OC6_SetConfig+0x6c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a12      	ldr	r2, [pc, #72]	; (8008104 <TIM_OC6_SetConfig+0xb0>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d109      	bne.n	80080d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	029b      	lsls	r3, r3, #10
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400

08008108 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f023 0201 	bic.w	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a1e      	ldr	r2, [pc, #120]	; (80081ac <TIM_TI1_SetConfig+0xa4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_TI1_SetConfig+0x3e>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813c:	d003      	beq.n	8008146 <TIM_TI1_SetConfig+0x3e>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <TIM_TI1_SetConfig+0xa8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d101      	bne.n	800814a <TIM_TI1_SetConfig+0x42>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <TIM_TI1_SetConfig+0x44>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0303 	bic.w	r3, r3, #3
 8008156:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e003      	b.n	800816a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	b2db      	uxtb	r3, r3
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f023 030a 	bic.w	r3, r3, #10
 8008184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f003 030a 	and.w	r3, r3, #10
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40014000 	.word	0x40014000

080081b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f023 0201 	bic.w	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f023 030a 	bic.w	r3, r3, #10
 80081f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008212:	b480      	push	{r7}
 8008214:	b087      	sub	sp, #28
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	f023 0210 	bic.w	r2, r3, #16
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	b29b      	uxth	r3, r3
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008264:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	621a      	str	r2, [r3, #32]
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	f023 0210 	bic.w	r2, r3, #16
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	031b      	lsls	r3, r3, #12
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	621a      	str	r2, [r3, #32]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	b2db      	uxtb	r3, r3
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800833c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008390:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	031b      	lsls	r3, r3, #12
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80083b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	031b      	lsls	r3, r3, #12
 80083bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f043 0307 	orr.w	r3, r3, #7
 8008400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	609a      	str	r2, [r3, #8]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800842e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	021a      	lsls	r2, r3, #8
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	431a      	orrs	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4313      	orrs	r3, r2
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	609a      	str	r2, [r3, #8]
}
 8008448:	bf00      	nop
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	2201      	movs	r2, #1
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1a      	ldr	r2, [r3, #32]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	43db      	mvns	r3, r3
 8008476:	401a      	ands	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1a      	ldr	r2, [r3, #32]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	fa01 f303 	lsl.w	r3, r1, r3
 800848c:	431a      	orrs	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e04f      	b.n	8008558 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a21      	ldr	r2, [pc, #132]	; (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d108      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a14      	ldr	r2, [pc, #80]	; (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d009      	beq.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d004      	beq.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a10      	ldr	r2, [pc, #64]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d10c      	bne.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	4313      	orrs	r3, r2
 800853c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	40012c00 	.word	0x40012c00
 8008568:	40014000 	.word	0x40014000

0800856c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008584:	2302      	movs	r3, #2
 8008586:	e060      	b.n	800864a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	4313      	orrs	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	041b      	lsls	r3, r3, #16
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a14      	ldr	r2, [pc, #80]	; (8008658 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d115      	bne.n	8008638 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	051b      	lsls	r3, r3, #20
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40012c00 	.word	0x40012c00

0800865c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e040      	b.n	800872c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7f9 ff72 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2224      	movs	r2, #36	; 0x24
 80086c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f82c 	bl	8008734 <UART_SetConfig>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e022      	b.n	800872c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa4c 	bl	8008b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fad3 	bl	8008cd0 <UART_CheckIdleState>
 800872a:	4603      	mov	r3, r0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008738:	b08a      	sub	sp, #40	; 0x28
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	431a      	orrs	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	4313      	orrs	r3, r2
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4bb4      	ldr	r3, [pc, #720]	; (8008a34 <UART_SetConfig+0x300>)
 8008764:	4013      	ands	r3, r2
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800876c:	430b      	orrs	r3, r1
 800876e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4aa9      	ldr	r2, [pc, #676]	; (8008a38 <UART_SetConfig+0x304>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d004      	beq.n	80087a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879c:	4313      	orrs	r3, r2
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4aa0      	ldr	r2, [pc, #640]	; (8008a3c <UART_SetConfig+0x308>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d126      	bne.n	800880c <UART_SetConfig+0xd8>
 80087be:	4ba0      	ldr	r3, [pc, #640]	; (8008a40 <UART_SetConfig+0x30c>)
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d81b      	bhi.n	8008804 <UART_SetConfig+0xd0>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <UART_SetConfig+0xa0>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	080087fd 	.word	0x080087fd
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e080      	b.n	80088ee <UART_SetConfig+0x1ba>
 80087ec:	2302      	movs	r3, #2
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e07c      	b.n	80088ee <UART_SetConfig+0x1ba>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fa:	e078      	b.n	80088ee <UART_SetConfig+0x1ba>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008802:	e074      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880a:	e070      	b.n	80088ee <UART_SetConfig+0x1ba>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a8c      	ldr	r2, [pc, #560]	; (8008a44 <UART_SetConfig+0x310>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d138      	bne.n	8008888 <UART_SetConfig+0x154>
 8008816:	4b8a      	ldr	r3, [pc, #552]	; (8008a40 <UART_SetConfig+0x30c>)
 8008818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881c:	f003 030c 	and.w	r3, r3, #12
 8008820:	2b0c      	cmp	r3, #12
 8008822:	d82d      	bhi.n	8008880 <UART_SetConfig+0x14c>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0xf8>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008861 	.word	0x08008861
 8008830:	08008881 	.word	0x08008881
 8008834:	08008881 	.word	0x08008881
 8008838:	08008881 	.word	0x08008881
 800883c:	08008871 	.word	0x08008871
 8008840:	08008881 	.word	0x08008881
 8008844:	08008881 	.word	0x08008881
 8008848:	08008881 	.word	0x08008881
 800884c:	08008869 	.word	0x08008869
 8008850:	08008881 	.word	0x08008881
 8008854:	08008881 	.word	0x08008881
 8008858:	08008881 	.word	0x08008881
 800885c:	08008879 	.word	0x08008879
 8008860:	2300      	movs	r3, #0
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e042      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e03e      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008876:	e03a      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e036      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e032      	b.n	80088ee <UART_SetConfig+0x1ba>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a6a      	ldr	r2, [pc, #424]	; (8008a38 <UART_SetConfig+0x304>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d12a      	bne.n	80088e8 <UART_SetConfig+0x1b4>
 8008892:	4b6b      	ldr	r3, [pc, #428]	; (8008a40 <UART_SetConfig+0x30c>)
 8008894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800889c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088a0:	d01a      	beq.n	80088d8 <UART_SetConfig+0x1a4>
 80088a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088a6:	d81b      	bhi.n	80088e0 <UART_SetConfig+0x1ac>
 80088a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ac:	d00c      	beq.n	80088c8 <UART_SetConfig+0x194>
 80088ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b2:	d815      	bhi.n	80088e0 <UART_SetConfig+0x1ac>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <UART_SetConfig+0x18c>
 80088b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088bc:	d008      	beq.n	80088d0 <UART_SetConfig+0x19c>
 80088be:	e00f      	b.n	80088e0 <UART_SetConfig+0x1ac>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c6:	e012      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ce:	e00e      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d6:	e00a      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088de:	e006      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e6:	e002      	b.n	80088ee <UART_SetConfig+0x1ba>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a51      	ldr	r2, [pc, #324]	; (8008a38 <UART_SetConfig+0x304>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d17a      	bne.n	80089ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d824      	bhi.n	800894a <UART_SetConfig+0x216>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x1d4>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	0800892d 	.word	0x0800892d
 800890c:	0800894b 	.word	0x0800894b
 8008910:	08008935 	.word	0x08008935
 8008914:	0800894b 	.word	0x0800894b
 8008918:	0800893b 	.word	0x0800893b
 800891c:	0800894b 	.word	0x0800894b
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800894b 	.word	0x0800894b
 8008928:	08008943 	.word	0x08008943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800892c:	f7fd fb40 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008930:	61f8      	str	r0, [r7, #28]
        break;
 8008932:	e010      	b.n	8008956 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008934:	4b44      	ldr	r3, [pc, #272]	; (8008a48 <UART_SetConfig+0x314>)
 8008936:	61fb      	str	r3, [r7, #28]
        break;
 8008938:	e00d      	b.n	8008956 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800893a:	f7fd faa1 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 800893e:	61f8      	str	r0, [r7, #28]
        break;
 8008940:	e009      	b.n	8008956 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008946:	61fb      	str	r3, [r7, #28]
        break;
 8008948:	e005      	b.n	8008956 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8107 	beq.w	8008b6c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	429a      	cmp	r2, r3
 800896c:	d305      	bcc.n	800897a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008980:	e0f4      	b.n	8008b6c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	2200      	movs	r2, #0
 8008986:	461c      	mov	r4, r3
 8008988:	4615      	mov	r5, r2
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	022b      	lsls	r3, r5, #8
 8008994:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008998:	0222      	lsls	r2, r4, #8
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	6849      	ldr	r1, [r1, #4]
 800899e:	0849      	lsrs	r1, r1, #1
 80089a0:	2000      	movs	r0, #0
 80089a2:	4688      	mov	r8, r1
 80089a4:	4681      	mov	r9, r0
 80089a6:	eb12 0a08 	adds.w	sl, r2, r8
 80089aa:	eb43 0b09 	adc.w	fp, r3, r9
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	4650      	mov	r0, sl
 80089be:	4659      	mov	r1, fp
 80089c0:	f7f7 ff5c 	bl	800087c <__aeabi_uldivmod>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4613      	mov	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d2:	d308      	bcc.n	80089e6 <UART_SetConfig+0x2b2>
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089da:	d204      	bcs.n	80089e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	60da      	str	r2, [r3, #12]
 80089e4:	e0c2      	b.n	8008b6c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089ec:	e0be      	b.n	8008b6c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f6:	d16a      	bne.n	8008ace <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80089f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d834      	bhi.n	8008a6a <UART_SetConfig+0x336>
 8008a00:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <UART_SetConfig+0x2d4>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a4d 	.word	0x08008a4d
 8008a10:	08008a55 	.word	0x08008a55
 8008a14:	08008a6b 	.word	0x08008a6b
 8008a18:	08008a5b 	.word	0x08008a5b
 8008a1c:	08008a6b 	.word	0x08008a6b
 8008a20:	08008a6b 	.word	0x08008a6b
 8008a24:	08008a6b 	.word	0x08008a6b
 8008a28:	08008a63 	.word	0x08008a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a2c:	f7fd fac0 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008a30:	61f8      	str	r0, [r7, #28]
        break;
 8008a32:	e020      	b.n	8008a76 <UART_SetConfig+0x342>
 8008a34:	efff69f3 	.word	0xefff69f3
 8008a38:	40008000 	.word	0x40008000
 8008a3c:	40013800 	.word	0x40013800
 8008a40:	40021000 	.word	0x40021000
 8008a44:	40004400 	.word	0x40004400
 8008a48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a4c:	f7fd fac6 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8008a50:	61f8      	str	r0, [r7, #28]
        break;
 8008a52:	e010      	b.n	8008a76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a54:	4b4c      	ldr	r3, [pc, #304]	; (8008b88 <UART_SetConfig+0x454>)
 8008a56:	61fb      	str	r3, [r7, #28]
        break;
 8008a58:	e00d      	b.n	8008a76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5a:	f7fd fa11 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8008a5e:	61f8      	str	r0, [r7, #28]
        break;
 8008a60:	e009      	b.n	8008a76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a66:	61fb      	str	r3, [r7, #28]
        break;
 8008a68:	e005      	b.n	8008a76 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d077      	beq.n	8008b6c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	005a      	lsls	r2, r3, #1
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	441a      	add	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b0f      	cmp	r3, #15
 8008a96:	d916      	bls.n	8008ac6 <UART_SetConfig+0x392>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a9e:	d212      	bcs.n	8008ac6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f023 030f 	bic.w	r3, r3, #15
 8008aa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	8afb      	ldrh	r3, [r7, #22]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	8afa      	ldrh	r2, [r7, #22]
 8008ac2:	60da      	str	r2, [r3, #12]
 8008ac4:	e052      	b.n	8008b6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008acc:	e04e      	b.n	8008b6c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d827      	bhi.n	8008b26 <UART_SetConfig+0x3f2>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <UART_SetConfig+0x3a8>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	08008b27 	.word	0x08008b27
 8008aec:	08008b17 	.word	0x08008b17
 8008af0:	08008b27 	.word	0x08008b27
 8008af4:	08008b27 	.word	0x08008b27
 8008af8:	08008b27 	.word	0x08008b27
 8008afc:	08008b1f 	.word	0x08008b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7fd fa56 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8008b04:	61f8      	str	r0, [r7, #28]
        break;
 8008b06:	e014      	b.n	8008b32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b08:	f7fd fa68 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8008b0c:	61f8      	str	r0, [r7, #28]
        break;
 8008b0e:	e010      	b.n	8008b32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b10:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <UART_SetConfig+0x454>)
 8008b12:	61fb      	str	r3, [r7, #28]
        break;
 8008b14:	e00d      	b.n	8008b32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b16:	f7fd f9b3 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8008b1a:	61f8      	str	r0, [r7, #28]
        break;
 8008b1c:	e009      	b.n	8008b32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b22:	61fb      	str	r3, [r7, #28]
        break;
 8008b24:	e005      	b.n	8008b32 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b30:	bf00      	nop
    }

    if (pclk != 0U)
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d019      	beq.n	8008b6c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	085a      	lsrs	r2, r3, #1
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b0f      	cmp	r3, #15
 8008b50:	d909      	bls.n	8008b66 <UART_SetConfig+0x432>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b58:	d205      	bcs.n	8008b66 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	e002      	b.n	8008b6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3728      	adds	r7, #40	; 0x28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b86:	bf00      	nop
 8008b88:	00f42400 	.word	0x00f42400

08008b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01a      	beq.n	8008ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c8a:	d10a      	bne.n	8008ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	605a      	str	r2, [r3, #4]
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ce0:	f7f9 fd4a 	bl	8002778 <HAL_GetTick>
 8008ce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d10e      	bne.n	8008d12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f82d 	bl	8008d62 <UART_WaitOnFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e023      	b.n	8008d5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d10e      	bne.n	8008d3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f817 	bl	8008d62 <UART_WaitOnFlagUntilTimeout>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e00d      	b.n	8008d5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2220      	movs	r2, #32
 8008d48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b09c      	sub	sp, #112	; 0x70
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d72:	e0a5      	b.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	f000 80a1 	beq.w	8008ec0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7e:	f7f9 fcfb 	bl	8002778 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d13e      	bne.n	8008e12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008db8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008de6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008de8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2220      	movs	r2, #32
 8008e04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e067      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d04f      	beq.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2e:	d147      	bne.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8c:	623a      	str	r2, [r7, #32]
 8008e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	69f9      	ldr	r1, [r7, #28]
 8008e92:	6a3a      	ldr	r2, [r7, #32]
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e5      	bne.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e010      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69da      	ldr	r2, [r3, #28]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	bf0c      	ite	eq
 8008ed0:	2301      	moveq	r3, #1
 8008ed2:	2300      	movne	r3, #0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	f43f af4a 	beq.w	8008d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3770      	adds	r7, #112	; 0x70
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8008eea:	b490      	push	{r4, r7}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	4608      	mov	r0, r1
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	4603      	mov	r3, r0
 8008efa:	70fb      	strb	r3, [r7, #3]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70bb      	strb	r3, [r7, #2]
 8008f00:	4613      	mov	r3, r2
 8008f02:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 8008f04:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 8008f06:	7e3b      	ldrb	r3, [r7, #24]
 8008f08:	4423      	add	r3, r4
 8008f0a:	b2dc      	uxtb	r4, r3
  tmp--;
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008f1e:	73fa      	strb	r2, [r7, #15]
 8008f20:	73bb      	strb	r3, [r7, #14]
 8008f22:	78bb      	ldrb	r3, [r7, #2]
 8008f24:	737b      	strb	r3, [r7, #13]
 8008f26:	4623      	mov	r3, r4
 8008f28:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8008f2a:	7bba      	ldrb	r2, [r7, #14]
 8008f2c:	7b7b      	ldrb	r3, [r7, #13]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d30d      	bcc.n	8008f4e <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8008f32:	7bfa      	ldrb	r2, [r7, #15]
 8008f34:	7b3b      	ldrb	r3, [r7, #12]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d801      	bhi.n	8008f3e <u8g_IsBBXIntersection+0x54>
      return 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e014      	b.n	8008f68 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8008f3e:	7b7a      	ldrb	r2, [r7, #13]
 8008f40:	7b3b      	ldrb	r3, [r7, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d901      	bls.n	8008f4a <u8g_IsBBXIntersection+0x60>
	return 1;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e00e      	b.n	8008f68 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e00c      	b.n	8008f68 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	7b3b      	ldrb	r3, [r7, #12]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d807      	bhi.n	8008f66 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8008f56:	7b7a      	ldrb	r2, [r7, #13]
 8008f58:	7b3b      	ldrb	r3, [r7, #12]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d901      	bls.n	8008f62 <u8g_IsBBXIntersection+0x78>
	return 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e002      	b.n	8008f68 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8008f66:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	e032      	b.n	8008fd6 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8008f70:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8008f72:	787b      	ldrb	r3, [r7, #1]
 8008f74:	4423      	add	r3, r4
 8008f76:	b2dc      	uxtb	r4, r3
  tmp--;
 8008f78:	4623      	mov	r3, r4
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f8a:	72fa      	strb	r2, [r7, #11]
 8008f8c:	72bb      	strb	r3, [r7, #10]
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	727b      	strb	r3, [r7, #9]
 8008f92:	4623      	mov	r3, r4
 8008f94:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8008f96:	7aba      	ldrb	r2, [r7, #10]
 8008f98:	7a7b      	ldrb	r3, [r7, #9]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d30d      	bcc.n	8008fba <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8008f9e:	7afa      	ldrb	r2, [r7, #11]
 8008fa0:	7a3b      	ldrb	r3, [r7, #8]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d801      	bhi.n	8008faa <u8g_IsBBXIntersection+0xc0>
      return 1;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e014      	b.n	8008fd4 <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8008faa:	7a7a      	ldrb	r2, [r7, #9]
 8008fac:	7a3b      	ldrb	r3, [r7, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d901      	bls.n	8008fb6 <u8g_IsBBXIntersection+0xcc>
	return 1;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e00e      	b.n	8008fd4 <u8g_IsBBXIntersection+0xea>
	return 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e00c      	b.n	8008fd4 <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8008fba:	7afa      	ldrb	r2, [r7, #11]
 8008fbc:	7a3b      	ldrb	r3, [r7, #8]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d807      	bhi.n	8008fd2 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8008fc2:	7a7a      	ldrb	r2, [r7, #9]
 8008fc4:	7a3b      	ldrb	r3, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d901      	bls.n	8008fce <u8g_IsBBXIntersection+0xe4>
	return 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e002      	b.n	8008fd4 <u8g_IsBBXIntersection+0xea>
	return 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e000      	b.n	8008fd4 <u8g_IsBBXIntersection+0xea>
      return 0;
 8008fd2:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008fd4:	bf00      	nop
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc90      	pop	{r4, r7}
 8008fde:	4770      	bx	lr

08008fe0 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	689c      	ldr	r4, [r3, #8]
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	47a0      	blx	r4
 8008ffc:	4603      	mov	r3, r0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	bd90      	pop	{r4, r7, pc}

08009006 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	689c      	ldr	r4, [r3, #8]
 8009018:	79fa      	ldrb	r2, [r7, #7]
 800901a:	2300      	movs	r3, #0
 800901c:	2103      	movs	r1, #3
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	47a0      	blx	r4
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}

0800902a <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 800902a:	b590      	push	{r4, r7, lr}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689c      	ldr	r4, [r3, #8]
 8009038:	2300      	movs	r3, #0
 800903a:	2200      	movs	r2, #0
 800903c:	2104      	movs	r1, #4
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	47a0      	blx	r4
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}

0800904a <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 800904a:	b590      	push	{r4, r7, lr}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	689c      	ldr	r4, [r3, #8]
 8009058:	2300      	movs	r3, #0
 800905a:	2201      	movs	r2, #1
 800905c:	2104      	movs	r1, #4
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	47a0      	blx	r4
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bd90      	pop	{r4, r7, pc}

0800906a <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 800906a:	b590      	push	{r4, r7, lr}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	4613      	mov	r3, r2
 8009076:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	689c      	ldr	r4, [r3, #8]
 800907c:	79fa      	ldrb	r2, [r7, #7]
 800907e:	2300      	movs	r3, #0
 8009080:	2102      	movs	r1, #2
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	47a0      	blx	r4
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	bd90      	pop	{r4, r7, pc}

0800908e <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 800908e:	b590      	push	{r4, r7, lr}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	4613      	mov	r3, r2
 800909a:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	689c      	ldr	r4, [r3, #8]
 80090a0:	79fa      	ldrb	r2, [r7, #7]
 80090a2:	2300      	movs	r3, #0
 80090a4:	2105      	movs	r1, #5
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	47a0      	blx	r4
 80090aa:	4603      	mov	r3, r0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}

080090b4 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	689c      	ldr	r4, [r3, #8]
 80090c8:	79fa      	ldrb	r2, [r7, #7]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2106      	movs	r1, #6
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	47a0      	blx	r4
 80090d2:	4603      	mov	r3, r0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d110      	bne.n	800911a <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 80090f8:	7dbb      	ldrb	r3, [r7, #22]
 80090fa:	2bff      	cmp	r3, #255	; 0xff
 80090fc:	d00a      	beq.n	8009114 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 80090fe:	7dbb      	ldrb	r3, [r7, #22]
 8009100:	461a      	mov	r2, r3
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff ffc2 	bl	800908e <u8g_WriteByte>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d160      	bne.n	80091d2 <u8g_WriteEscSeqP+0xf6>
          return 0;
 8009110:	2300      	movs	r3, #0
 8009112:	e064      	b.n	80091de <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
 8009118:	e05b      	b.n	80091d2 <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 800911a:	7dbb      	ldrb	r3, [r7, #22]
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	d10a      	bne.n	8009136 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8009120:	7dbb      	ldrb	r3, [r7, #22]
 8009122:	461a      	mov	r2, r3
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff ffb1 	bl	800908e <u8g_WriteByte>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d14d      	bne.n	80091ce <u8g_WriteEscSeqP+0xf2>
          return 0;
 8009132:	2300      	movs	r3, #0
 8009134:	e053      	b.n	80091de <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 8009136:	7dbb      	ldrb	r3, [r7, #22]
 8009138:	2bfe      	cmp	r3, #254	; 0xfe
 800913a:	d04e      	beq.n	80091da <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 800913c:	7dbb      	ldrb	r3, [r7, #22]
 800913e:	2bef      	cmp	r3, #239	; 0xef
 8009140:	d845      	bhi.n	80091ce <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8009142:	7dbb      	ldrb	r3, [r7, #22]
 8009144:	2bdf      	cmp	r3, #223	; 0xdf
 8009146:	d909      	bls.n	800915c <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8009148:	7dbb      	ldrb	r3, [r7, #22]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	b2db      	uxtb	r3, r3
 8009150:	461a      	mov	r2, r3
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff ff88 	bl	800906a <u8g_SetAddress>
 800915a:	e038      	b.n	80091ce <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 800915c:	7dbb      	ldrb	r3, [r7, #22]
 800915e:	2bcf      	cmp	r3, #207	; 0xcf
 8009160:	d909      	bls.n	8009176 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8009162:	7dbb      	ldrb	r3, [r7, #22]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	b2db      	uxtb	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff ff49 	bl	8009006 <u8g_SetChipSelect>
 8009174:	e02b      	b.n	80091ce <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8009176:	7dbb      	ldrb	r3, [r7, #22]
 8009178:	2bbf      	cmp	r3, #191	; 0xbf
 800917a:	d91c      	bls.n	80091b6 <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff ff53 	bl	800902a <u8g_SetResetLow>
        value &= 0x0f;
 8009184:	7dbb      	ldrb	r3, [r7, #22]
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 800918c:	7dbb      	ldrb	r3, [r7, #22]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8009192:	7dbb      	ldrb	r3, [r7, #22]
 8009194:	3302      	adds	r3, #2
 8009196:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8009198:	7dbb      	ldrb	r3, [r7, #22]
 800919a:	b29b      	uxth	r3, r3
 800919c:	4618      	mov	r0, r3
 800919e:	f7f8 f9cf 	bl	8001540 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff ff50 	bl	800904a <u8g_SetResetHigh>
        u8g_Delay(value);
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f8 f9c6 	bl	8001540 <u8g_Delay>
 80091b4:	e00b      	b.n	80091ce <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 80091b6:	7dbb      	ldrb	r3, [r7, #22]
 80091b8:	2bbd      	cmp	r3, #189	; 0xbd
 80091ba:	d808      	bhi.n	80091ce <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 80091bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	db04      	blt.n	80091ce <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 80091c4:	7dbb      	ldrb	r3, [r7, #22]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f8 f9b9 	bl	8001540 <u8g_Delay>
      }
      is_escape = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3301      	adds	r3, #1
 80091d6:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 80091d8:	e788      	b.n	80090ec <u8g_WriteEscSeqP+0x10>
        break;
 80091da:	bf00      	nop
  }
  return 1;
 80091dc:	2301      	movs	r3, #1
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	72fb      	strb	r3, [r7, #11]
 80091f6:	4613      	mov	r3, r2
 80091f8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	2b06      	cmp	r3, #6
 80091fe:	d811      	bhi.n	8009224 <u8g_com_null_fn+0x3c>
 8009200:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <u8g_com_null_fn+0x20>)
 8009202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009206:	bf00      	nop
 8009208:	08009225 	.word	0x08009225
 800920c:	08009225 	.word	0x08009225
 8009210:	08009225 	.word	0x08009225
 8009214:	08009225 	.word	0x08009225
 8009218:	08009225 	.word	0x08009225
 800921c:	08009225 	.word	0x08009225
 8009220:	08009225 	.word	0x08009225
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8009224:	2301      	movs	r3, #1
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop

08009234 <u8g_dev_sh1106_128x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	3b0a      	subs	r3, #10
 8009248:	2b0b      	cmp	r3, #11
 800924a:	d878      	bhi.n	800933e <u8g_dev_sh1106_128x64_fn+0x10a>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <u8g_dev_sh1106_128x64_fn+0x20>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009285 	.word	0x08009285
 8009258:	0800933f 	.word	0x0800933f
 800925c:	0800933f 	.word	0x0800933f
 8009260:	0800933f 	.word	0x0800933f
 8009264:	0800933f 	.word	0x0800933f
 8009268:	08009305 	.word	0x08009305
 800926c:	080092e9 	.word	0x080092e9
 8009270:	080092f7 	.word	0x080092f7
 8009274:	0800933f 	.word	0x0800933f
 8009278:	0800933f 	.word	0x0800933f
 800927c:	0800933f 	.word	0x0800933f
 8009280:	0800929b 	.word	0x0800929b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8009284:	2202      	movs	r2, #2
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff fea9 	bl	8008fe0 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800928e:	4a31      	ldr	r2, [pc, #196]	; (8009354 <u8g_dev_sh1106_128x64_fn+0x120>)
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff ff22 	bl	80090dc <u8g_WriteEscSeqP>
      break;
 8009298:	e051      	b.n	800933e <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 80092a0:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <u8g_dev_sh1106_128x64_fn+0x124>)
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ff19 	bl	80090dc <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff fee8 	bl	800908e <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80092be:	2201      	movs	r2, #1
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff fed1 	bl	800906a <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	6978      	ldr	r0, [r7, #20]
 80092ce:	f000 fe73 	bl	8009fb8 <u8g_pb_WriteBuffer>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <u8g_dev_sh1106_128x64_fn+0xa8>
          return 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	e037      	b.n	800934c <u8g_dev_sh1106_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 80092dc:	2200      	movs	r2, #0
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fe90 	bl	8009006 <u8g_SetChipSelect>
      }
      break;
 80092e6:	e02a      	b.n	800933e <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80092e8:	4a1c      	ldr	r2, [pc, #112]	; (800935c <u8g_dev_sh1106_128x64_fn+0x128>)
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff fef5 	bl	80090dc <u8g_WriteEscSeqP>
      return 1;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e02a      	b.n	800934c <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80092f6:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <u8g_dev_sh1106_128x64_fn+0x12c>)
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff feee 	bl	80090dc <u8g_WriteEscSeqP>
      return 1;
 8009300:	2301      	movs	r3, #1
 8009302:	e023      	b.n	800934c <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 8009304:	2201      	movs	r2, #1
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fe7c 	bl	8009006 <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 800930e:	2200      	movs	r2, #0
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fea9 	bl	800906a <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 8009318:	2281      	movs	r2, #129	; 0x81
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff feb6 	bl	800908e <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff feaf 	bl	800908e <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8009330:	2200      	movs	r2, #0
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fe66 	bl	8009006 <u8g_SetChipSelect>
	return 1;
 800933a:	2301      	movs	r3, #1
 800933c:	e006      	b.n	800934c <u8g_dev_sh1106_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800933e:	79fa      	ldrb	r2, [r7, #7]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fef5 	bl	800a134 <u8g_dev_pb8v1_base_fn>
 800934a:	4603      	mov	r3, r0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	0800acf4 	.word	0x0800acf4
 8009358:	0800ad1c 	.word	0x0800ad1c
 800935c:	0800ad24 	.word	0x0800ad24
 8009360:	0800ad30 	.word	0x0800ad30

08009364 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	4413      	add	r3, r2
 8009376:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	781b      	ldrb	r3, [r3, #0]
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	81fb      	strh	r3, [r7, #14]
    font++;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3301      	adds	r3, #1
 80093a6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80093a8:	89fb      	ldrh	r3, [r7, #14]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4413      	add	r3, r2
 80093b8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80093ba:	89fb      	ldrh	r3, [r7, #14]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 80093d0:	2100      	movs	r1, #0
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff ffc6 	bl	8009364 <u8g_font_get_byte>
 80093d8:	4603      	mov	r3, r0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff ffec 	bl	80093c8 <u8g_font_GetFormat>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d00a      	beq.n	800940c <u8g_font_GetFontGlyphStructureSize+0x2a>
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	dc0a      	bgt.n	8009410 <u8g_font_GetFontGlyphStructureSize+0x2e>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <u8g_font_GetFontGlyphStructureSize+0x22>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d002      	beq.n	8009408 <u8g_font_GetFontGlyphStructureSize+0x26>
 8009402:	e005      	b.n	8009410 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 8009404:	2306      	movs	r3, #6
 8009406:	e004      	b.n	8009412 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8009408:	2303      	movs	r3, #3
 800940a:	e002      	b.n	8009412 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 800940c:	2306      	movs	r3, #6
 800940e:	e000      	b.n	8009412 <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8009410:	2303      	movs	r3, #3
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8009422:	2105      	movs	r1, #5
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ff9d 	bl	8009364 <u8g_font_get_byte>
 800942a:	4603      	mov	r3, r0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 800943c:	2106      	movs	r1, #6
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffa2 	bl	8009388 <u8g_font_get_word>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8009456:	2108      	movs	r1, #8
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ff95 	bl	8009388 <u8g_font_get_word>
 800945e:	4603      	mov	r3, r0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8009470:	210a      	movs	r1, #10
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff ff76 	bl	8009364 <u8g_font_get_byte>
 8009478:	4603      	mov	r3, r0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 800948a:	210b      	movs	r1, #11
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff ff69 	bl	8009364 <u8g_font_get_byte>
 8009492:	4603      	mov	r3, r0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 80094a4:	210c      	movs	r1, #12
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff ff5c 	bl	8009364 <u8g_font_get_byte>
 80094ac:	4603      	mov	r3, r0
 80094ae:	b25b      	sxtb	r3, r3
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 80094c0:	210d      	movs	r1, #13
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ff4e 	bl	8009364 <u8g_font_get_byte>
 80094c8:	4603      	mov	r3, r0
 80094ca:	b25b      	sxtb	r3, r3
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 80094dc:	210e      	movs	r1, #14
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff ff40 	bl	8009364 <u8g_font_get_byte>
 80094e4:	4603      	mov	r3, r0
 80094e6:	b25b      	sxtb	r3, r3
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 80094f8:	210f      	movs	r1, #15
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff ff32 	bl	8009364 <u8g_font_get_byte>
 8009500:	4603      	mov	r3, r0
 8009502:	b25b      	sxtb	r3, r3
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8009514:	2110      	movs	r1, #16
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff ff24 	bl	8009364 <u8g_font_get_byte>
 800951c:	4603      	mov	r3, r0
 800951e:	b25b      	sxtb	r3, r3
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ff55 	bl	80093e2 <u8g_font_GetFontGlyphStructureSize>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	4413      	add	r3, r2
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff ff36 	bl	80093c8 <u8g_font_GetFormat>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <u8g_CopyGlyphDataToCache+0x1e>
 8009562:	2b02      	cmp	r3, #2
 8009564:	d11c      	bne.n	80095a0 <u8g_CopyGlyphDataToCache+0x58>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	781a      	ldrb	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3303      	adds	r3, #3
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b25a      	sxtb	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	3304      	adds	r3, #4
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	b25a      	sxtb	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	3305      	adds	r3, #5
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	b25a      	sxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	779a      	strb	r2, [r3, #30]
      break;
 800959e:	e036      	b.n	800960e <u8g_CopyGlyphDataToCache+0xc6>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 80095a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	b25a      	sxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	3b02      	subs	r3, #2
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	b25a      	sxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	091b      	lsrs	r3, r3, #4
 80095ca:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 80095cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	f003 030f 	and.w	r3, r3, #15
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	091b      	lsrs	r3, r3, #4
 80095ee:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7bfa      	ldrb	r2, [r7, #15]
 80095f4:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	3302      	adds	r3, #2
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 8009604:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	771a      	strb	r2, [r3, #28]
    
      
      break;
 800960c:	bf00      	nop
  }
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	779a      	strb	r2, [r3, #30]
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff feb1 	bl	80093c8 <u8g_font_GetFormat>
 8009666:	4603      	mov	r3, r0
 8009668:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff feb7 	bl	80093e2 <u8g_font_GetFontGlyphStructureSize>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8009678:	23ff      	movs	r3, #255	; 0xff
 800967a:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 800967c:	7c3b      	ldrb	r3, [r7, #16]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <u8g_GetGlyph+0x3c>
    mask = 15;
 8009682:	230f      	movs	r3, #15
 8009684:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff feec 	bl	8009468 <u8g_font_GetFontStartEncoding>
 8009690:	4603      	mov	r3, r0
 8009692:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff fef2 	bl	8009482 <u8g_font_GetFontEndEncoding>
 800969e:	4603      	mov	r3, r0
 80096a0:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fed1 	bl	800944e <u8g_font_GetEncoding97Pos>
 80096ac:	4603      	mov	r3, r0
 80096ae:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	2b60      	cmp	r3, #96	; 0x60
 80096b4:	d909      	bls.n	80096ca <u8g_GetGlyph+0x80>
 80096b6:	89bb      	ldrh	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d006      	beq.n	80096ca <u8g_GetGlyph+0x80>
  {
    p+= pos;
 80096bc:	89bb      	ldrh	r3, [r7, #12]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
    start = 97;
 80096c4:	2361      	movs	r3, #97	; 0x61
 80096c6:	74fb      	strb	r3, [r7, #19]
 80096c8:	e016      	b.n	80096f8 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff feb0 	bl	8009434 <u8g_font_GetEncoding65Pos>
 80096d4:	4603      	mov	r3, r0
 80096d6:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	2b40      	cmp	r3, #64	; 0x40
 80096dc:	d909      	bls.n	80096f2 <u8g_GetGlyph+0xa8>
 80096de:	89bb      	ldrh	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 80096e4:	89bb      	ldrh	r3, [r7, #12]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4413      	add	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]
      start = 65;
 80096ec:	2341      	movs	r3, #65	; 0x41
 80096ee:	74fb      	strb	r3, [r7, #19]
 80096f0:	e002      	b.n	80096f8 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	3311      	adds	r3, #17
 80096f6:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d904      	bls.n	800970a <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ff88 	bl	8009616 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8009706:	2300      	movs	r3, #0
 8009708:	e032      	b.n	8009770 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 800970a:	7cfb      	ldrb	r3, [r7, #19]
 800970c:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 800970e:	7cba      	ldrb	r2, [r7, #18]
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	429a      	cmp	r2, r3
 8009714:	d828      	bhi.n	8009768 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2bff      	cmp	r3, #255	; 0xff
 800971c:	d103      	bne.n	8009726 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	3301      	adds	r3, #1
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e017      	b.n	8009756 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8009726:	7cba      	ldrb	r2, [r7, #18]
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	429a      	cmp	r2, r3
 800972c:	d105      	bne.n	800973a <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff ff09 	bl	8009548 <u8g_CopyGlyphDataToCache>
          return p;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	e01a      	b.n	8009770 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	3302      	adds	r3, #2
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	7c7b      	ldrb	r3, [r7, #17]
 8009742:	4013      	ands	r3, r2
 8009744:	b2db      	uxtb	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	4413      	add	r3, r2
 800974c:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4413      	add	r3, r2
 8009754:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8009756:	7cba      	ldrb	r2, [r7, #18]
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	429a      	cmp	r2, r3
 800975c:	d003      	beq.n	8009766 <u8g_GetGlyph+0x11c>
        break;
      i++;
 800975e:	7cbb      	ldrb	r3, [r7, #18]
 8009760:	3301      	adds	r3, #1
 8009762:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8009764:	e7d7      	b.n	8009716 <u8g_GetGlyph+0xcc>
        break;
 8009766:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff54 	bl	8009616 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	461a      	mov	r2, r3
 8009786:	4603      	mov	r3, r0
 8009788:	70fb      	strb	r3, [r7, #3]
 800978a:	460b      	mov	r3, r1
 800978c:	70bb      	strb	r3, [r7, #2]
 800978e:	4613      	mov	r3, r2
 8009790:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8009792:	787b      	ldrb	r3, [r7, #1]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff ff57 	bl	800964a <u8g_GetGlyph>
 800979c:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <u8g_draw_glyph+0x30>
      return 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e06d      	b.n	8009884 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	68f9      	ldr	r1, [r7, #12]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff feba 	bl	8009528 <u8g_font_GetGlyphDataStart>
 80097b4:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7fdb      	ldrb	r3, [r3, #31]
 80097ba:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097c2:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	4413      	add	r3, r2
 80097d0:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	78ba      	ldrb	r2, [r7, #2]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	70bb      	strb	r3, [r7, #2]
  y--;
 80097e0:	78bb      	ldrb	r3, [r7, #2]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80097e6:	78ba      	ldrb	r2, [r7, #2]
 80097e8:	7abb      	ldrb	r3, [r7, #10]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	3301      	adds	r3, #1
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	7af8      	ldrb	r0, [r7, #11]
 80097f4:	78f9      	ldrb	r1, [r7, #3]
 80097f6:	7abb      	ldrb	r3, [r7, #10]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	4603      	mov	r3, r0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff fb74 	bl	8008eea <u8g_IsBBXIntersection>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800980e:	e039      	b.n	8009884 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3307      	adds	r3, #7
 8009814:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 800981c:	78bb      	ldrb	r3, [r7, #2]
 800981e:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8009820:	7c3a      	ldrb	r2, [r7, #16]
 8009822:	7abb      	ldrb	r3, [r7, #10]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	743b      	strb	r3, [r7, #16]
  iy++;
 8009828:	7c3b      	ldrb	r3, [r7, #16]
 800982a:	3301      	adds	r3, #1
 800982c:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 800982e:	2300      	movs	r3, #0
 8009830:	74bb      	strb	r3, [r7, #18]
 8009832:	e020      	b.n	8009876 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8009838:	2300      	movs	r3, #0
 800983a:	74fb      	strb	r3, [r7, #19]
 800983c:	e011      	b.n	8009862 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	7c3a      	ldrb	r2, [r7, #16]
 8009844:	7c79      	ldrb	r1, [r7, #17]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	2300      	movs	r3, #0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa8c 	bl	8009d68 <u8g_Draw8Pixel>
      data++;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	3301      	adds	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
      ix+=8;
 8009856:	7c7b      	ldrb	r3, [r7, #17]
 8009858:	3308      	adds	r3, #8
 800985a:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800985c:	7cfb      	ldrb	r3, [r7, #19]
 800985e:	3301      	adds	r3, #1
 8009860:	74fb      	strb	r3, [r7, #19]
 8009862:	7cfa      	ldrb	r2, [r7, #19]
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	429a      	cmp	r2, r3
 8009868:	d3e9      	bcc.n	800983e <u8g_draw_glyph+0xc6>
    }
    iy++;
 800986a:	7c3b      	ldrb	r3, [r7, #16]
 800986c:	3301      	adds	r3, #1
 800986e:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8009870:	7cbb      	ldrb	r3, [r7, #18]
 8009872:	3301      	adds	r3, #1
 8009874:	74bb      	strb	r3, [r7, #18]
 8009876:	7cba      	ldrb	r2, [r7, #18]
 8009878:	7abb      	ldrb	r3, [r7, #10]
 800987a:	429a      	cmp	r2, r3
 800987c:	d3da      	bcc.n	8009834 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	72fb      	strb	r3, [r7, #11]
 800989a:	4613      	mov	r3, r2
 800989c:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	4798      	blx	r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	461a      	mov	r2, r3
 80098ae:	7abb      	ldrb	r3, [r7, #10]
 80098b0:	4413      	add	r3, r2
 80098b2:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 80098b4:	e013      	b.n	80098de <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	7aba      	ldrb	r2, [r7, #10]
 80098bc:	7af9      	ldrb	r1, [r7, #11]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff ff5a 	bl	8009778 <u8g_draw_glyph>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75bb      	strb	r3, [r7, #22]
    x += d;
 80098c8:	7dba      	ldrb	r2, [r7, #22]
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	4413      	add	r3, r2
 80098ce:	72fb      	strb	r3, [r7, #11]
    t += d;
 80098d0:	7dba      	ldrb	r2, [r7, #22]
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	4413      	add	r3, r2
 80098d6:	75fb      	strb	r3, [r7, #23]
    s++;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3301      	adds	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e7      	bne.n	80098b6 <u8g_DrawStr+0x2a>
  }
  return t;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d06b      	beq.n	80099d8 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d114      	bne.n	8009934 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fd83 	bl	800941a <u8g_font_GetCapitalAHeight>
 8009914:	4603      	mov	r3, r0
 8009916:	b25a      	sxtb	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff fdba 	bl	800949c <u8g_font_GetLowerGDescent>
 8009928:	4603      	mov	r3, r0
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8009932:	e02d      	b.n	8009990 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800993a:	2b01      	cmp	r3, #1
 800993c:	d114      	bne.n	8009968 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fdd4 	bl	80094f0 <u8g_font_GetFontXAscent>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff fdd8 	bl	800950c <u8g_font_GetFontXDescent>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8009966:	e013      	b.n	8009990 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fda3 	bl	80094b8 <u8g_font_GetFontAscent>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff fda7 	bl	80094d4 <u8g_font_GetFontDescent>
 8009986:	4603      	mov	r3, r0
 8009988:	461a      	mov	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8009996:	b21a      	sxth	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800999e:	b21b      	sxth	r3, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	b21b      	sxth	r3, r3
 80099a4:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d00d      	beq.n	80099cc <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80099bc:	b29b      	uxth	r3, r3
 80099be:	89fa      	ldrh	r2, [r7, #14]
 80099c0:	fb12 f303 	smulbb	r3, r2, r3
 80099c4:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 80099c6:	89fb      	ldrh	r3, [r7, #14]
 80099c8:	099b      	lsrs	r3, r3, #6
 80099ca:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80099d6:	e000      	b.n	80099da <u8g_UpdateRefHeight+0xea>
    return;
 80099d8:	bf00      	nop
}
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  return 0;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a04      	ldr	r2, [pc, #16]	; (8009a14 <u8g_SetFontPosBaseline+0x1c>)
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	080099e1 	.word	0x080099e1

08009a18 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d008      	beq.n	8009a3e <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff ff5c 	bl	80098f0 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ffdd 	bl	80099f8 <u8g_SetFontPosBaseline>
  }
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009a46:	b590      	push	{r4, r7, lr}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	681c      	ldr	r4, [r3, #0]
 8009a5a:	79fa      	ldrb	r2, [r7, #7]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	47a0      	blx	r4
 8009a64:	4603      	mov	r3, r0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd90      	pop	{r4, r7, pc}

08009a6e <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7c:	2002      	movs	r0, #2
 8009a7e:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8009a80:	2300      	movs	r3, #0
 8009a82:	220a      	movs	r2, #10
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffdd 	bl	8009a46 <u8g_call_dev_fn>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a94:	2003      	movs	r0, #3
 8009a96:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	4798      	blx	r3
  return r;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab8:	2002      	movs	r0, #2
 8009aba:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2214      	movs	r2, #20
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff ffbb 	bl	8009a46 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3338      	adds	r3, #56	; 0x38
 8009ad4:	2217      	movs	r2, #23
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ffb4 	bl	8009a46 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	4798      	blx	r3
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afc:	2002      	movs	r0, #2
 8009afe:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	2001      	movs	r0, #1
 8009b06:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2215      	movs	r2, #21
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ff99 	bl	8009a46 <u8g_call_dev_fn>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d006      	beq.n	8009b2c <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3338      	adds	r3, #56	; 0x38
 8009b22:	2217      	movs	r2, #23
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff ff8d 	bl	8009a46 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b30:	2000      	movs	r0, #0
 8009b32:	4798      	blx	r3
  return r;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	71fb      	strb	r3, [r7, #7]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	332d      	adds	r3, #45	; 0x2d
 8009b58:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	79fa      	ldrb	r2, [r7, #7]
 8009b5e:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	79ba      	ldrb	r2, [r7, #6]
 8009b64:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009b6c:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009b74:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	223b      	movs	r2, #59	; 0x3b
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff ff62 	bl	8009a46 <u8g_call_dev_fn>
}
 8009b82:	bf00      	nop
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8009b94:	f107 030f 	add.w	r3, r7, #15
 8009b98:	2246      	movs	r2, #70	; 0x46
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff ff52 	bl	8009a46 <u8g_call_dev_fn>
  return r;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8009bb6:	f107 030f 	add.w	r3, r7, #15
 8009bba:	2247      	movs	r2, #71	; 0x47
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff ff41 	bl	8009a46 <u8g_call_dev_fn>
  return r;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2248      	movs	r2, #72	; 0x48
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ff31 	bl	8009a46 <u8g_call_dev_fn>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ffc4 	bl	8009b8a <u8g_GetWidthLL>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff ffcb 	bl	8009bac <u8g_GetHeightLL>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ffd2 	bl	8009bce <u8g_GetModeLL>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6859      	ldr	r1, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3338      	adds	r3, #56	; 0x38
 8009c3a:	2217      	movs	r2, #23
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff ff02 	bl	8009a46 <u8g_call_dev_fn>
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2222      	movs	r2, #34	; 0x22
 8009c70:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8009c78:	2101      	movs	r1, #1
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f891 	bl	8009da2 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff feb9 	bl	80099f8 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2240      	movs	r2, #64	; 0x40
 8009ca2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a02      	ldr	r2, [pc, #8]	; (8009cbc <u8g_init_data+0x70>)
 8009cb2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	0800a2d5 	.word	0x0800a2d5

08009cc0 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff fecd 	bl	8009a6e <u8g_InitLL>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <u8g_Begin+0x1e>
    return 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e003      	b.n	8009ce6 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff ff85 	bl	8009bee <u8g_UpdateDimension>
  return 1;
 8009ce4:	2301      	movs	r3, #1
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff ffa6 	bl	8009c4c <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7ff ffd6 	bl	8009cc0 <u8g_Begin>
 8009d14:	4603      	mov	r3, r0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff febc 	bl	8009aaa <u8g_FirstPageLL>
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fec8 	bl	8009aee <u8g_NextPageLL>
 8009d5e:	4603      	mov	r3, r0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	461a      	mov	r2, r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	70fb      	strb	r3, [r7, #3]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70bb      	strb	r3, [r7, #2]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6859      	ldr	r1, [r3, #4]
 8009d86:	78b8      	ldrb	r0, [r7, #2]
 8009d88:	78fa      	ldrb	r2, [r7, #3]
 8009d8a:	7c3b      	ldrb	r3, [r7, #16]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	787b      	ldrb	r3, [r7, #1]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4603      	mov	r3, r0
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff fed2 	bl	8009b3e <u8g_Draw8PixelLL>
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	78db      	ldrb	r3, [r3, #3]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	711a      	strb	r2, [r3, #4]
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8009df6:	b490      	push	{r4, r7}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	789a      	ldrb	r2, [r3, #2]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	789a      	ldrb	r2, [r3, #2]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d301      	bcc.n	8009e1e <u8g_page_Next+0x28>
    return 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e018      	b.n	8009e50 <u8g_page_Next+0x5a>
  p->page++;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	3301      	adds	r3, #1
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4423      	add	r3, r4
 8009e34:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d304      	bcc.n	8009e48 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8009e42:	4623      	mov	r3, r4
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	70da      	strb	r2, [r3, #3]
  
  return 1;
 8009e4e:	2301      	movs	r3, #1
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc90      	pop	{r4, r7}
 8009e58:	4770      	bx	lr

08009e5a <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	795b      	ldrb	r3, [r3, #5]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4413      	add	r3, r2
 8009e76:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	60fa      	str	r2, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d1f6      	bne.n	8009e78 <u8g_pb_Clear+0x1e>
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	78db      	ldrb	r3, [r3, #3]
 8009eac:	78fa      	ldrb	r2, [r7, #3]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf94      	ite	ls
 8009eb2:	2301      	movls	r3, #1
 8009eb4:	2300      	movhi	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	789b      	ldrb	r3, [r3, #2]
 8009ebe:	78ba      	ldrb	r2, [r7, #2]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	bf2c      	ite	cs
 8009ec4:	2301      	movcs	r3, #1
 8009ec6:	2300      	movcc	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	78bb      	ldrb	r3, [r7, #2]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	bf8c      	ite	hi
 8009ed4:	2301      	movhi	r3, #1
 8009ed6:	2300      	movls	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8009ee0:	7bfa      	ldrb	r2, [r7, #15]
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8009ee8:	7bba      	ldrb	r2, [r7, #14]
 8009eea:	7b7b      	ldrb	r3, [r7, #13]
 8009eec:	4013      	ands	r3, r2
 8009eee:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8009ef0:	7b7a      	ldrb	r2, [r7, #13]
 8009ef2:	7b3b      	ldrb	r3, [r7, #12]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8009ef8:	7bfa      	ldrb	r2, [r7, #15]
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	7b7b      	ldrb	r3, [r7, #13]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	b2db      	uxtb	r3, r3
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	789a      	ldrb	r2, [r3, #2]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	795a      	ldrb	r2, [r3, #5]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	709a      	strb	r2, [r3, #2]
  box->x1--;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	789b      	ldrb	r3, [r3, #2]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	78da      	ldrb	r2, [r3, #3]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	70da      	strb	r2, [r3, #3]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	785b      	ldrb	r3, [r3, #1]
 8009f6a:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d813      	bhi.n	8009fa0 <u8g_pb_Is8PixelVisible+0x44>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <u8g_pb_Is8PixelVisible+0x24>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009fa1 	.word	0x08009fa1
 8009f84:	08009f91 	.word	0x08009f91
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009f99 	.word	0x08009f99
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	3308      	adds	r3, #8
 8009f94:	73bb      	strb	r3, [r7, #14]
      break;
 8009f96:	e003      	b.n	8009fa0 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	3b08      	subs	r3, #8
 8009f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9e:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8009fa0:	7bba      	ldrb	r2, [r7, #14]
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff ff76 	bl	8009e98 <u8g_pb_IsYIntersection>
 8009fac:	4603      	mov	r3, r0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop

08009fb8 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	795a      	ldrb	r2, [r3, #5]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f7ff f870 	bl	80090b4 <u8g_WriteSequence>
 8009fd4:	4603      	mov	r3, r0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8009fde:	b490      	push	{r4, r7}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	461a      	mov	r2, r3
 8009fec:	4603      	mov	r3, r0
 8009fee:	70fb      	strb	r3, [r7, #3]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70bb      	strb	r3, [r7, #2]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	789b      	ldrb	r3, [r3, #2]
 800a002:	78ba      	ldrb	r2, [r7, #2]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 800a008:	2401      	movs	r4, #1
  y &= 0x07;
 800a00a:	78bb      	ldrb	r3, [r7, #2]
 800a00c:	f003 0307 	and.w	r3, r3, #7
 800a010:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 800a012:	4622      	mov	r2, r4
 800a014:	78bb      	ldrb	r3, [r7, #2]
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	b2dc      	uxtb	r4, r3
  ptr += x;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4413      	add	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 800a024:	787b      	ldrb	r3, [r7, #1]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d006      	beq.n	800a038 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	4323      	orrs	r3, r4
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 800a036:	e007      	b.n	800a048 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 800a038:	43e3      	mvns	r3, r4
 800a03a:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	4023      	ands	r3, r4
 800a042:	b2da      	uxtb	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	701a      	strb	r2, [r3, #0]
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bc90      	pop	{r4, r7}
 800a050:	4770      	bx	lr

0800a052 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	785a      	ldrb	r2, [r3, #1]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	789b      	ldrb	r3, [r3, #2]
 800a064:	429a      	cmp	r2, r3
 800a066:	d315      	bcc.n	800a094 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	785a      	ldrb	r2, [r3, #1]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	78db      	ldrb	r3, [r3, #3]
 800a070:	429a      	cmp	r2, r3
 800a072:	d811      	bhi.n	800a098 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	795b      	ldrb	r3, [r3, #5]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d20d      	bcs.n	800a09c <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	7819      	ldrb	r1, [r3, #0]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	785a      	ldrb	r2, [r3, #1]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	791b      	ldrb	r3, [r3, #4]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffa6 	bl	8009fde <u8g_pb8v1_set_pixel>
 800a092:	e004      	b.n	800a09e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800a094:	bf00      	nop
 800a096:	e002      	b.n	800a09e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800a098:	bf00      	nop
 800a09a:	e000      	b.n	800a09e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800a09c:	bf00      	nop
}
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800a0a4:	b590      	push	{r4, r7, lr}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	78db      	ldrb	r3, [r3, #3]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d81a      	bhi.n	800a0f8 <u8g_pb8v1_Set8PixelOpt2+0x54>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0d9 	.word	0x0800a0d9
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
  {
    case 0: dx++; break;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	e00b      	b.n	800a0f8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	73bb      	strb	r3, [r7, #14]
 800a0e6:	e007      	b.n	800a0f8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
 800a0ee:	e003      	b.n	800a0f8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	73bb      	strb	r3, [r7, #14]
 800a0f6:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 800a0f8:	b263      	sxtb	r3, r4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da03      	bge.n	800a106 <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff ffa6 	bl	800a052 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	4413      	add	r3, r2
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785a      	ldrb	r2, [r3, #1]
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	4413      	add	r3, r2
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 800a122:	0063      	lsls	r3, r4, #1
 800a124:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 800a126:	2c00      	cmp	r4, #0
 800a128:	d1e6      	bne.n	800a0f8 <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	bd90      	pop	{r4, r7, pc}

0800a134 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	617b      	str	r3, [r7, #20]
  switch(msg)
 800a14a:	79fb      	ldrb	r3, [r7, #7]
 800a14c:	3b0a      	subs	r3, #10
 800a14e:	2b3e      	cmp	r3, #62	; 0x3e
 800a150:	f200 80ba 	bhi.w	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
 800a154:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <u8g_dev_pb8v1_base_fn+0x28>)
 800a156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15a:	bf00      	nop
 800a15c:	0800a2c9 	.word	0x0800a2c9
 800a160:	0800a2c9 	.word	0x0800a2c9
 800a164:	0800a2c9 	.word	0x0800a2c9
 800a168:	0800a2c9 	.word	0x0800a2c9
 800a16c:	0800a2c9 	.word	0x0800a2c9
 800a170:	0800a2c9 	.word	0x0800a2c9
 800a174:	0800a2c9 	.word	0x0800a2c9
 800a178:	0800a2c9 	.word	0x0800a2c9
 800a17c:	0800a2c9 	.word	0x0800a2c9
 800a180:	0800a2c9 	.word	0x0800a2c9
 800a184:	0800a27b 	.word	0x0800a27b
 800a188:	0800a28b 	.word	0x0800a28b
 800a18c:	0800a2c9 	.word	0x0800a2c9
 800a190:	0800a2a5 	.word	0x0800a2a5
 800a194:	0800a2c9 	.word	0x0800a2c9
 800a198:	0800a2c9 	.word	0x0800a2c9
 800a19c:	0800a2c9 	.word	0x0800a2c9
 800a1a0:	0800a2c9 	.word	0x0800a2c9
 800a1a4:	0800a2c9 	.word	0x0800a2c9
 800a1a8:	0800a2c9 	.word	0x0800a2c9
 800a1ac:	0800a2c9 	.word	0x0800a2c9
 800a1b0:	0800a2c9 	.word	0x0800a2c9
 800a1b4:	0800a2c9 	.word	0x0800a2c9
 800a1b8:	0800a2c9 	.word	0x0800a2c9
 800a1bc:	0800a2c9 	.word	0x0800a2c9
 800a1c0:	0800a2c9 	.word	0x0800a2c9
 800a1c4:	0800a2c9 	.word	0x0800a2c9
 800a1c8:	0800a2c9 	.word	0x0800a2c9
 800a1cc:	0800a2c9 	.word	0x0800a2c9
 800a1d0:	0800a2c9 	.word	0x0800a2c9
 800a1d4:	0800a2c9 	.word	0x0800a2c9
 800a1d8:	0800a2c9 	.word	0x0800a2c9
 800a1dc:	0800a2c9 	.word	0x0800a2c9
 800a1e0:	0800a2c9 	.word	0x0800a2c9
 800a1e4:	0800a2c9 	.word	0x0800a2c9
 800a1e8:	0800a2c9 	.word	0x0800a2c9
 800a1ec:	0800a2c9 	.word	0x0800a2c9
 800a1f0:	0800a2c9 	.word	0x0800a2c9
 800a1f4:	0800a2c9 	.word	0x0800a2c9
 800a1f8:	0800a2c9 	.word	0x0800a2c9
 800a1fc:	0800a271 	.word	0x0800a271
 800a200:	0800a2c9 	.word	0x0800a2c9
 800a204:	0800a2c9 	.word	0x0800a2c9
 800a208:	0800a2c9 	.word	0x0800a2c9
 800a20c:	0800a2c9 	.word	0x0800a2c9
 800a210:	0800a2c9 	.word	0x0800a2c9
 800a214:	0800a2c9 	.word	0x0800a2c9
 800a218:	0800a2c9 	.word	0x0800a2c9
 800a21c:	0800a2c9 	.word	0x0800a2c9
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a2c9 	.word	0x0800a2c9
 800a228:	0800a2c9 	.word	0x0800a2c9
 800a22c:	0800a2c9 	.word	0x0800a2c9
 800a230:	0800a2c9 	.word	0x0800a2c9
 800a234:	0800a2c9 	.word	0x0800a2c9
 800a238:	0800a2c9 	.word	0x0800a2c9
 800a23c:	0800a2c9 	.word	0x0800a2c9
 800a240:	0800a2c9 	.word	0x0800a2c9
 800a244:	0800a2c9 	.word	0x0800a2c9
 800a248:	0800a2c9 	.word	0x0800a2c9
 800a24c:	0800a2af 	.word	0x0800a2af
 800a250:	0800a2b9 	.word	0x0800a2b9
 800a254:	0800a2c3 	.word	0x0800a2c3
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f7ff fe7e 	bl	8009f5c <u8g_pb_Is8PixelVisible>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02f      	beq.n	800a2c6 <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6978      	ldr	r0, [r7, #20]
 800a26a:	f7ff ff1b 	bl	800a0a4 <u8g_pb8v1_Set8PixelOpt2>
      break;
 800a26e:	e02a      	b.n	800a2c6 <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f7ff feed 	bl	800a052 <u8g_pb8v1_SetPixel>
      break;
 800a278:	e026      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f7ff fded 	bl	8009e5a <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fd9d 	bl	8009dc2 <u8g_page_First>
      break;
 800a288:	e01e      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fdb2 	bl	8009df6 <u8g_page_Next>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	e016      	b.n	800a2ca <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 800a29c:	6978      	ldr	r0, [r7, #20]
 800a29e:	f7ff fddc 	bl	8009e5a <u8g_pb_Clear>
      break;
 800a2a2:	e011      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff fe38 	bl	8009f1c <u8g_pb_GetPageBox>
      break;
 800a2ac:	e00c      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	795a      	ldrb	r2, [r3, #5]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	701a      	strb	r2, [r3, #0]
      break;
 800a2b6:	e007      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	785a      	ldrb	r2, [r3, #1]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	701a      	strb	r2, [r3, #0]
      break;
 800a2c0:	e002      	b.n	800a2c8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e001      	b.n	800a2ca <u8g_dev_pb8v1_base_fn+0x196>
      break;
 800a2c6:	bf00      	nop
  }
  return 1;
 800a2c8:	2301      	movs	r3, #1
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop

0800a2d4 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <siprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	b500      	push	{lr}
 800a2f0:	b09c      	sub	sp, #112	; 0x70
 800a2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	9006      	str	r0, [sp, #24]
 800a2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2fc:	4809      	ldr	r0, [pc, #36]	; (800a324 <siprintf+0x38>)
 800a2fe:	9107      	str	r1, [sp, #28]
 800a300:	9104      	str	r1, [sp, #16]
 800a302:	4909      	ldr	r1, [pc, #36]	; (800a328 <siprintf+0x3c>)
 800a304:	f853 2b04 	ldr.w	r2, [r3], #4
 800a308:	9105      	str	r1, [sp, #20]
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	a902      	add	r1, sp, #8
 800a310:	f000 f992 	bl	800a638 <_svfiprintf_r>
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	b01c      	add	sp, #112	; 0x70
 800a31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a320:	b003      	add	sp, #12
 800a322:	4770      	bx	lr
 800a324:	20000084 	.word	0x20000084
 800a328:	ffff0208 	.word	0xffff0208

0800a32c <memset>:
 800a32c:	4402      	add	r2, r0
 800a32e:	4603      	mov	r3, r0
 800a330:	4293      	cmp	r3, r2
 800a332:	d100      	bne.n	800a336 <memset+0xa>
 800a334:	4770      	bx	lr
 800a336:	f803 1b01 	strb.w	r1, [r3], #1
 800a33a:	e7f9      	b.n	800a330 <memset+0x4>

0800a33c <__errno>:
 800a33c:	4b01      	ldr	r3, [pc, #4]	; (800a344 <__errno+0x8>)
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000084 	.word	0x20000084

0800a348 <__libc_init_array>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	4d0d      	ldr	r5, [pc, #52]	; (800a380 <__libc_init_array+0x38>)
 800a34c:	4c0d      	ldr	r4, [pc, #52]	; (800a384 <__libc_init_array+0x3c>)
 800a34e:	1b64      	subs	r4, r4, r5
 800a350:	10a4      	asrs	r4, r4, #2
 800a352:	2600      	movs	r6, #0
 800a354:	42a6      	cmp	r6, r4
 800a356:	d109      	bne.n	800a36c <__libc_init_array+0x24>
 800a358:	4d0b      	ldr	r5, [pc, #44]	; (800a388 <__libc_init_array+0x40>)
 800a35a:	4c0c      	ldr	r4, [pc, #48]	; (800a38c <__libc_init_array+0x44>)
 800a35c:	f000 fc6a 	bl	800ac34 <_init>
 800a360:	1b64      	subs	r4, r4, r5
 800a362:	10a4      	asrs	r4, r4, #2
 800a364:	2600      	movs	r6, #0
 800a366:	42a6      	cmp	r6, r4
 800a368:	d105      	bne.n	800a376 <__libc_init_array+0x2e>
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a370:	4798      	blx	r3
 800a372:	3601      	adds	r6, #1
 800a374:	e7ee      	b.n	800a354 <__libc_init_array+0xc>
 800a376:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37a:	4798      	blx	r3
 800a37c:	3601      	adds	r6, #1
 800a37e:	e7f2      	b.n	800a366 <__libc_init_array+0x1e>
 800a380:	0800b8d4 	.word	0x0800b8d4
 800a384:	0800b8d4 	.word	0x0800b8d4
 800a388:	0800b8d4 	.word	0x0800b8d4
 800a38c:	0800b8d8 	.word	0x0800b8d8

0800a390 <__retarget_lock_acquire_recursive>:
 800a390:	4770      	bx	lr

0800a392 <__retarget_lock_release_recursive>:
 800a392:	4770      	bx	lr

0800a394 <_free_r>:
 800a394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a396:	2900      	cmp	r1, #0
 800a398:	d044      	beq.n	800a424 <_free_r+0x90>
 800a39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a39e:	9001      	str	r0, [sp, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3a6:	bfb8      	it	lt
 800a3a8:	18e4      	addlt	r4, r4, r3
 800a3aa:	f000 f8df 	bl	800a56c <__malloc_lock>
 800a3ae:	4a1e      	ldr	r2, [pc, #120]	; (800a428 <_free_r+0x94>)
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	b933      	cbnz	r3, 800a3c4 <_free_r+0x30>
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c0:	f000 b8da 	b.w	800a578 <__malloc_unlock>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d908      	bls.n	800a3da <_free_r+0x46>
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf01      	itttt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	1949      	addeq	r1, r1, r5
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	e7ed      	b.n	800a3b6 <_free_r+0x22>
 800a3da:	461a      	mov	r2, r3
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b10b      	cbz	r3, 800a3e4 <_free_r+0x50>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d9fa      	bls.n	800a3da <_free_r+0x46>
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	1855      	adds	r5, r2, r1
 800a3e8:	42a5      	cmp	r5, r4
 800a3ea:	d10b      	bne.n	800a404 <_free_r+0x70>
 800a3ec:	6824      	ldr	r4, [r4, #0]
 800a3ee:	4421      	add	r1, r4
 800a3f0:	1854      	adds	r4, r2, r1
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	d1e0      	bne.n	800a3ba <_free_r+0x26>
 800a3f8:	681c      	ldr	r4, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	440c      	add	r4, r1
 800a400:	6014      	str	r4, [r2, #0]
 800a402:	e7da      	b.n	800a3ba <_free_r+0x26>
 800a404:	d902      	bls.n	800a40c <_free_r+0x78>
 800a406:	230c      	movs	r3, #12
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	e7d6      	b.n	800a3ba <_free_r+0x26>
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	1961      	adds	r1, r4, r5
 800a410:	428b      	cmp	r3, r1
 800a412:	bf04      	itt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	bf04      	itt	eq
 800a41c:	1949      	addeq	r1, r1, r5
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	6054      	str	r4, [r2, #4]
 800a422:	e7ca      	b.n	800a3ba <_free_r+0x26>
 800a424:	b003      	add	sp, #12
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	20000700 	.word	0x20000700

0800a42c <sbrk_aligned>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4e0e      	ldr	r6, [pc, #56]	; (800a468 <sbrk_aligned+0x3c>)
 800a430:	460c      	mov	r4, r1
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	b911      	cbnz	r1, 800a43e <sbrk_aligned+0x12>
 800a438:	f000 fba6 	bl	800ab88 <_sbrk_r>
 800a43c:	6030      	str	r0, [r6, #0]
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f000 fba1 	bl	800ab88 <_sbrk_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d00a      	beq.n	800a460 <sbrk_aligned+0x34>
 800a44a:	1cc4      	adds	r4, r0, #3
 800a44c:	f024 0403 	bic.w	r4, r4, #3
 800a450:	42a0      	cmp	r0, r4
 800a452:	d007      	beq.n	800a464 <sbrk_aligned+0x38>
 800a454:	1a21      	subs	r1, r4, r0
 800a456:	4628      	mov	r0, r5
 800a458:	f000 fb96 	bl	800ab88 <_sbrk_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d101      	bne.n	800a464 <sbrk_aligned+0x38>
 800a460:	f04f 34ff 	mov.w	r4, #4294967295
 800a464:	4620      	mov	r0, r4
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	20000704 	.word	0x20000704

0800a46c <_malloc_r>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	1ccd      	adds	r5, r1, #3
 800a472:	f025 0503 	bic.w	r5, r5, #3
 800a476:	3508      	adds	r5, #8
 800a478:	2d0c      	cmp	r5, #12
 800a47a:	bf38      	it	cc
 800a47c:	250c      	movcc	r5, #12
 800a47e:	2d00      	cmp	r5, #0
 800a480:	4607      	mov	r7, r0
 800a482:	db01      	blt.n	800a488 <_malloc_r+0x1c>
 800a484:	42a9      	cmp	r1, r5
 800a486:	d905      	bls.n	800a494 <_malloc_r+0x28>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	2600      	movs	r6, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a568 <_malloc_r+0xfc>
 800a498:	f000 f868 	bl	800a56c <__malloc_lock>
 800a49c:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a0:	461c      	mov	r4, r3
 800a4a2:	bb5c      	cbnz	r4, 800a4fc <_malloc_r+0x90>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	f7ff ffc0 	bl	800a42c <sbrk_aligned>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	d155      	bne.n	800a55e <_malloc_r+0xf2>
 800a4b2:	f8d8 4000 	ldr.w	r4, [r8]
 800a4b6:	4626      	mov	r6, r4
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	d145      	bne.n	800a548 <_malloc_r+0xdc>
 800a4bc:	2c00      	cmp	r4, #0
 800a4be:	d048      	beq.n	800a552 <_malloc_r+0xe6>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	eb04 0903 	add.w	r9, r4, r3
 800a4ca:	f000 fb5d 	bl	800ab88 <_sbrk_r>
 800a4ce:	4581      	cmp	r9, r0
 800a4d0:	d13f      	bne.n	800a552 <_malloc_r+0xe6>
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	1a6d      	subs	r5, r5, r1
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f7ff ffa7 	bl	800a42c <sbrk_aligned>
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d037      	beq.n	800a552 <_malloc_r+0xe6>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	442b      	add	r3, r5
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d038      	beq.n	800a562 <_malloc_r+0xf6>
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	42a2      	cmp	r2, r4
 800a4f4:	d12b      	bne.n	800a54e <_malloc_r+0xe2>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
 800a4fa:	e00f      	b.n	800a51c <_malloc_r+0xb0>
 800a4fc:	6822      	ldr	r2, [r4, #0]
 800a4fe:	1b52      	subs	r2, r2, r5
 800a500:	d41f      	bmi.n	800a542 <_malloc_r+0xd6>
 800a502:	2a0b      	cmp	r2, #11
 800a504:	d917      	bls.n	800a536 <_malloc_r+0xca>
 800a506:	1961      	adds	r1, r4, r5
 800a508:	42a3      	cmp	r3, r4
 800a50a:	6025      	str	r5, [r4, #0]
 800a50c:	bf18      	it	ne
 800a50e:	6059      	strne	r1, [r3, #4]
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	bf08      	it	eq
 800a514:	f8c8 1000 	streq.w	r1, [r8]
 800a518:	5162      	str	r2, [r4, r5]
 800a51a:	604b      	str	r3, [r1, #4]
 800a51c:	4638      	mov	r0, r7
 800a51e:	f104 060b 	add.w	r6, r4, #11
 800a522:	f000 f829 	bl	800a578 <__malloc_unlock>
 800a526:	f026 0607 	bic.w	r6, r6, #7
 800a52a:	1d23      	adds	r3, r4, #4
 800a52c:	1af2      	subs	r2, r6, r3
 800a52e:	d0ae      	beq.n	800a48e <_malloc_r+0x22>
 800a530:	1b9b      	subs	r3, r3, r6
 800a532:	50a3      	str	r3, [r4, r2]
 800a534:	e7ab      	b.n	800a48e <_malloc_r+0x22>
 800a536:	42a3      	cmp	r3, r4
 800a538:	6862      	ldr	r2, [r4, #4]
 800a53a:	d1dd      	bne.n	800a4f8 <_malloc_r+0x8c>
 800a53c:	f8c8 2000 	str.w	r2, [r8]
 800a540:	e7ec      	b.n	800a51c <_malloc_r+0xb0>
 800a542:	4623      	mov	r3, r4
 800a544:	6864      	ldr	r4, [r4, #4]
 800a546:	e7ac      	b.n	800a4a2 <_malloc_r+0x36>
 800a548:	4634      	mov	r4, r6
 800a54a:	6876      	ldr	r6, [r6, #4]
 800a54c:	e7b4      	b.n	800a4b8 <_malloc_r+0x4c>
 800a54e:	4613      	mov	r3, r2
 800a550:	e7cc      	b.n	800a4ec <_malloc_r+0x80>
 800a552:	230c      	movs	r3, #12
 800a554:	603b      	str	r3, [r7, #0]
 800a556:	4638      	mov	r0, r7
 800a558:	f000 f80e 	bl	800a578 <__malloc_unlock>
 800a55c:	e797      	b.n	800a48e <_malloc_r+0x22>
 800a55e:	6025      	str	r5, [r4, #0]
 800a560:	e7dc      	b.n	800a51c <_malloc_r+0xb0>
 800a562:	605b      	str	r3, [r3, #4]
 800a564:	deff      	udf	#255	; 0xff
 800a566:	bf00      	nop
 800a568:	20000700 	.word	0x20000700

0800a56c <__malloc_lock>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__malloc_lock+0x8>)
 800a56e:	f7ff bf0f 	b.w	800a390 <__retarget_lock_acquire_recursive>
 800a572:	bf00      	nop
 800a574:	200006fc 	.word	0x200006fc

0800a578 <__malloc_unlock>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__malloc_unlock+0x8>)
 800a57a:	f7ff bf0a 	b.w	800a392 <__retarget_lock_release_recursive>
 800a57e:	bf00      	nop
 800a580:	200006fc 	.word	0x200006fc

0800a584 <__ssputs_r>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	688e      	ldr	r6, [r1, #8]
 800a58a:	461f      	mov	r7, r3
 800a58c:	42be      	cmp	r6, r7
 800a58e:	680b      	ldr	r3, [r1, #0]
 800a590:	4682      	mov	sl, r0
 800a592:	460c      	mov	r4, r1
 800a594:	4690      	mov	r8, r2
 800a596:	d82c      	bhi.n	800a5f2 <__ssputs_r+0x6e>
 800a598:	898a      	ldrh	r2, [r1, #12]
 800a59a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a59e:	d026      	beq.n	800a5ee <__ssputs_r+0x6a>
 800a5a0:	6965      	ldr	r5, [r4, #20]
 800a5a2:	6909      	ldr	r1, [r1, #16]
 800a5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5a8:	eba3 0901 	sub.w	r9, r3, r1
 800a5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5b0:	1c7b      	adds	r3, r7, #1
 800a5b2:	444b      	add	r3, r9
 800a5b4:	106d      	asrs	r5, r5, #1
 800a5b6:	429d      	cmp	r5, r3
 800a5b8:	bf38      	it	cc
 800a5ba:	461d      	movcc	r5, r3
 800a5bc:	0553      	lsls	r3, r2, #21
 800a5be:	d527      	bpl.n	800a610 <__ssputs_r+0x8c>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7ff ff53 	bl	800a46c <_malloc_r>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	b360      	cbz	r0, 800a624 <__ssputs_r+0xa0>
 800a5ca:	6921      	ldr	r1, [r4, #16]
 800a5cc:	464a      	mov	r2, r9
 800a5ce:	f000 faeb 	bl	800aba8 <memcpy>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	6126      	str	r6, [r4, #16]
 800a5e0:	6165      	str	r5, [r4, #20]
 800a5e2:	444e      	add	r6, r9
 800a5e4:	eba5 0509 	sub.w	r5, r5, r9
 800a5e8:	6026      	str	r6, [r4, #0]
 800a5ea:	60a5      	str	r5, [r4, #8]
 800a5ec:	463e      	mov	r6, r7
 800a5ee:	42be      	cmp	r6, r7
 800a5f0:	d900      	bls.n	800a5f4 <__ssputs_r+0x70>
 800a5f2:	463e      	mov	r6, r7
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	4641      	mov	r1, r8
 800a5fa:	f000 faab 	bl	800ab54 <memmove>
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	1b9b      	subs	r3, r3, r6
 800a602:	60a3      	str	r3, [r4, #8]
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	4433      	add	r3, r6
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	2000      	movs	r0, #0
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	462a      	mov	r2, r5
 800a612:	f000 fad7 	bl	800abc4 <_realloc_r>
 800a616:	4606      	mov	r6, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d1e0      	bne.n	800a5de <__ssputs_r+0x5a>
 800a61c:	6921      	ldr	r1, [r4, #16]
 800a61e:	4650      	mov	r0, sl
 800a620:	f7ff feb8 	bl	800a394 <_free_r>
 800a624:	230c      	movs	r3, #12
 800a626:	f8ca 3000 	str.w	r3, [sl]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	f04f 30ff 	mov.w	r0, #4294967295
 800a636:	e7e9      	b.n	800a60c <__ssputs_r+0x88>

0800a638 <_svfiprintf_r>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	4698      	mov	r8, r3
 800a63e:	898b      	ldrh	r3, [r1, #12]
 800a640:	061b      	lsls	r3, r3, #24
 800a642:	b09d      	sub	sp, #116	; 0x74
 800a644:	4607      	mov	r7, r0
 800a646:	460d      	mov	r5, r1
 800a648:	4614      	mov	r4, r2
 800a64a:	d50e      	bpl.n	800a66a <_svfiprintf_r+0x32>
 800a64c:	690b      	ldr	r3, [r1, #16]
 800a64e:	b963      	cbnz	r3, 800a66a <_svfiprintf_r+0x32>
 800a650:	2140      	movs	r1, #64	; 0x40
 800a652:	f7ff ff0b 	bl	800a46c <_malloc_r>
 800a656:	6028      	str	r0, [r5, #0]
 800a658:	6128      	str	r0, [r5, #16]
 800a65a:	b920      	cbnz	r0, 800a666 <_svfiprintf_r+0x2e>
 800a65c:	230c      	movs	r3, #12
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	e0d0      	b.n	800a808 <_svfiprintf_r+0x1d0>
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	616b      	str	r3, [r5, #20]
 800a66a:	2300      	movs	r3, #0
 800a66c:	9309      	str	r3, [sp, #36]	; 0x24
 800a66e:	2320      	movs	r3, #32
 800a670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a674:	f8cd 800c 	str.w	r8, [sp, #12]
 800a678:	2330      	movs	r3, #48	; 0x30
 800a67a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a820 <_svfiprintf_r+0x1e8>
 800a67e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a682:	f04f 0901 	mov.w	r9, #1
 800a686:	4623      	mov	r3, r4
 800a688:	469a      	mov	sl, r3
 800a68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68e:	b10a      	cbz	r2, 800a694 <_svfiprintf_r+0x5c>
 800a690:	2a25      	cmp	r2, #37	; 0x25
 800a692:	d1f9      	bne.n	800a688 <_svfiprintf_r+0x50>
 800a694:	ebba 0b04 	subs.w	fp, sl, r4
 800a698:	d00b      	beq.n	800a6b2 <_svfiprintf_r+0x7a>
 800a69a:	465b      	mov	r3, fp
 800a69c:	4622      	mov	r2, r4
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff ff6f 	bl	800a584 <__ssputs_r>
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f000 80a9 	beq.w	800a7fe <_svfiprintf_r+0x1c6>
 800a6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ae:	445a      	add	r2, fp
 800a6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 80a1 	beq.w	800a7fe <_svfiprintf_r+0x1c6>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d4:	4654      	mov	r4, sl
 800a6d6:	2205      	movs	r2, #5
 800a6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6dc:	4850      	ldr	r0, [pc, #320]	; (800a820 <_svfiprintf_r+0x1e8>)
 800a6de:	f7f5 fd77 	bl	80001d0 <memchr>
 800a6e2:	9a04      	ldr	r2, [sp, #16]
 800a6e4:	b9d8      	cbnz	r0, 800a71e <_svfiprintf_r+0xe6>
 800a6e6:	06d0      	lsls	r0, r2, #27
 800a6e8:	bf44      	itt	mi
 800a6ea:	2320      	movmi	r3, #32
 800a6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f0:	0711      	lsls	r1, r2, #28
 800a6f2:	bf44      	itt	mi
 800a6f4:	232b      	movmi	r3, #43	; 0x2b
 800a6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a700:	d015      	beq.n	800a72e <_svfiprintf_r+0xf6>
 800a702:	9a07      	ldr	r2, [sp, #28]
 800a704:	4654      	mov	r4, sl
 800a706:	2000      	movs	r0, #0
 800a708:	f04f 0c0a 	mov.w	ip, #10
 800a70c:	4621      	mov	r1, r4
 800a70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a712:	3b30      	subs	r3, #48	; 0x30
 800a714:	2b09      	cmp	r3, #9
 800a716:	d94d      	bls.n	800a7b4 <_svfiprintf_r+0x17c>
 800a718:	b1b0      	cbz	r0, 800a748 <_svfiprintf_r+0x110>
 800a71a:	9207      	str	r2, [sp, #28]
 800a71c:	e014      	b.n	800a748 <_svfiprintf_r+0x110>
 800a71e:	eba0 0308 	sub.w	r3, r0, r8
 800a722:	fa09 f303 	lsl.w	r3, r9, r3
 800a726:	4313      	orrs	r3, r2
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	46a2      	mov	sl, r4
 800a72c:	e7d2      	b.n	800a6d4 <_svfiprintf_r+0x9c>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	1d19      	adds	r1, r3, #4
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	9103      	str	r1, [sp, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfbb      	ittet	lt
 800a73a:	425b      	neglt	r3, r3
 800a73c:	f042 0202 	orrlt.w	r2, r2, #2
 800a740:	9307      	strge	r3, [sp, #28]
 800a742:	9307      	strlt	r3, [sp, #28]
 800a744:	bfb8      	it	lt
 800a746:	9204      	strlt	r2, [sp, #16]
 800a748:	7823      	ldrb	r3, [r4, #0]
 800a74a:	2b2e      	cmp	r3, #46	; 0x2e
 800a74c:	d10c      	bne.n	800a768 <_svfiprintf_r+0x130>
 800a74e:	7863      	ldrb	r3, [r4, #1]
 800a750:	2b2a      	cmp	r3, #42	; 0x2a
 800a752:	d134      	bne.n	800a7be <_svfiprintf_r+0x186>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	9203      	str	r2, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb8      	it	lt
 800a760:	f04f 33ff 	movlt.w	r3, #4294967295
 800a764:	3402      	adds	r4, #2
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a830 <_svfiprintf_r+0x1f8>
 800a76c:	7821      	ldrb	r1, [r4, #0]
 800a76e:	2203      	movs	r2, #3
 800a770:	4650      	mov	r0, sl
 800a772:	f7f5 fd2d 	bl	80001d0 <memchr>
 800a776:	b138      	cbz	r0, 800a788 <_svfiprintf_r+0x150>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	eba0 000a 	sub.w	r0, r0, sl
 800a77e:	2240      	movs	r2, #64	; 0x40
 800a780:	4082      	lsls	r2, r0
 800a782:	4313      	orrs	r3, r2
 800a784:	3401      	adds	r4, #1
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	4825      	ldr	r0, [pc, #148]	; (800a824 <_svfiprintf_r+0x1ec>)
 800a78e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a792:	2206      	movs	r2, #6
 800a794:	f7f5 fd1c 	bl	80001d0 <memchr>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d038      	beq.n	800a80e <_svfiprintf_r+0x1d6>
 800a79c:	4b22      	ldr	r3, [pc, #136]	; (800a828 <_svfiprintf_r+0x1f0>)
 800a79e:	bb1b      	cbnz	r3, 800a7e8 <_svfiprintf_r+0x1b0>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	f023 0307 	bic.w	r3, r3, #7
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	4433      	add	r3, r6
 800a7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b2:	e768      	b.n	800a686 <_svfiprintf_r+0x4e>
 800a7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7a6      	b.n	800a70c <_svfiprintf_r+0xd4>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	3401      	adds	r4, #1
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f04f 0c0a 	mov.w	ip, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d0:	3a30      	subs	r2, #48	; 0x30
 800a7d2:	2a09      	cmp	r2, #9
 800a7d4:	d903      	bls.n	800a7de <_svfiprintf_r+0x1a6>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c6      	beq.n	800a768 <_svfiprintf_r+0x130>
 800a7da:	9105      	str	r1, [sp, #20]
 800a7dc:	e7c4      	b.n	800a768 <_svfiprintf_r+0x130>
 800a7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e7f0      	b.n	800a7ca <_svfiprintf_r+0x192>
 800a7e8:	ab03      	add	r3, sp, #12
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <_svfiprintf_r+0x1f4>)
 800a7f0:	a904      	add	r1, sp, #16
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	1c42      	adds	r2, r0, #1
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	d1d6      	bne.n	800a7ac <_svfiprintf_r+0x174>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	065b      	lsls	r3, r3, #25
 800a802:	f53f af2d 	bmi.w	800a660 <_svfiprintf_r+0x28>
 800a806:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a808:	b01d      	add	sp, #116	; 0x74
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	462a      	mov	r2, r5
 800a814:	4b05      	ldr	r3, [pc, #20]	; (800a82c <_svfiprintf_r+0x1f4>)
 800a816:	a904      	add	r1, sp, #16
 800a818:	4638      	mov	r0, r7
 800a81a:	f000 f879 	bl	800a910 <_printf_i>
 800a81e:	e7eb      	b.n	800a7f8 <_svfiprintf_r+0x1c0>
 800a820:	0800b897 	.word	0x0800b897
 800a824:	0800b8a1 	.word	0x0800b8a1
 800a828:	00000000 	.word	0x00000000
 800a82c:	0800a585 	.word	0x0800a585
 800a830:	0800b89d 	.word	0x0800b89d

0800a834 <_printf_common>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	4616      	mov	r6, r2
 800a83a:	4699      	mov	r9, r3
 800a83c:	688a      	ldr	r2, [r1, #8]
 800a83e:	690b      	ldr	r3, [r1, #16]
 800a840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a844:	4293      	cmp	r3, r2
 800a846:	bfb8      	it	lt
 800a848:	4613      	movlt	r3, r2
 800a84a:	6033      	str	r3, [r6, #0]
 800a84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a850:	4607      	mov	r7, r0
 800a852:	460c      	mov	r4, r1
 800a854:	b10a      	cbz	r2, 800a85a <_printf_common+0x26>
 800a856:	3301      	adds	r3, #1
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	0699      	lsls	r1, r3, #26
 800a85e:	bf42      	ittt	mi
 800a860:	6833      	ldrmi	r3, [r6, #0]
 800a862:	3302      	addmi	r3, #2
 800a864:	6033      	strmi	r3, [r6, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	f015 0506 	ands.w	r5, r5, #6
 800a86c:	d106      	bne.n	800a87c <_printf_common+0x48>
 800a86e:	f104 0a19 	add.w	sl, r4, #25
 800a872:	68e3      	ldr	r3, [r4, #12]
 800a874:	6832      	ldr	r2, [r6, #0]
 800a876:	1a9b      	subs	r3, r3, r2
 800a878:	42ab      	cmp	r3, r5
 800a87a:	dc26      	bgt.n	800a8ca <_printf_common+0x96>
 800a87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a880:	1e13      	subs	r3, r2, #0
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	bf18      	it	ne
 800a886:	2301      	movne	r3, #1
 800a888:	0692      	lsls	r2, r2, #26
 800a88a:	d42b      	bmi.n	800a8e4 <_printf_common+0xb0>
 800a88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a890:	4649      	mov	r1, r9
 800a892:	4638      	mov	r0, r7
 800a894:	47c0      	blx	r8
 800a896:	3001      	adds	r0, #1
 800a898:	d01e      	beq.n	800a8d8 <_printf_common+0xa4>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	6922      	ldr	r2, [r4, #16]
 800a89e:	f003 0306 	and.w	r3, r3, #6
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	bf02      	ittt	eq
 800a8a6:	68e5      	ldreq	r5, [r4, #12]
 800a8a8:	6833      	ldreq	r3, [r6, #0]
 800a8aa:	1aed      	subeq	r5, r5, r3
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	bf0c      	ite	eq
 800a8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8b4:	2500      	movne	r5, #0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	bfc4      	itt	gt
 800a8ba:	1a9b      	subgt	r3, r3, r2
 800a8bc:	18ed      	addgt	r5, r5, r3
 800a8be:	2600      	movs	r6, #0
 800a8c0:	341a      	adds	r4, #26
 800a8c2:	42b5      	cmp	r5, r6
 800a8c4:	d11a      	bne.n	800a8fc <_printf_common+0xc8>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e008      	b.n	800a8dc <_printf_common+0xa8>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4652      	mov	r2, sl
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	47c0      	blx	r8
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d103      	bne.n	800a8e0 <_printf_common+0xac>
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	e7c6      	b.n	800a872 <_printf_common+0x3e>
 800a8e4:	18e1      	adds	r1, r4, r3
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	2030      	movs	r0, #48	; 0x30
 800a8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ee:	4422      	add	r2, r4
 800a8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	e7c7      	b.n	800a88c <_printf_common+0x58>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4622      	mov	r2, r4
 800a900:	4649      	mov	r1, r9
 800a902:	4638      	mov	r0, r7
 800a904:	47c0      	blx	r8
 800a906:	3001      	adds	r0, #1
 800a908:	d0e6      	beq.n	800a8d8 <_printf_common+0xa4>
 800a90a:	3601      	adds	r6, #1
 800a90c:	e7d9      	b.n	800a8c2 <_printf_common+0x8e>
	...

0800a910 <_printf_i>:
 800a910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a914:	7e0f      	ldrb	r7, [r1, #24]
 800a916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a918:	2f78      	cmp	r7, #120	; 0x78
 800a91a:	4691      	mov	r9, r2
 800a91c:	4680      	mov	r8, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	469a      	mov	sl, r3
 800a922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a926:	d807      	bhi.n	800a938 <_printf_i+0x28>
 800a928:	2f62      	cmp	r7, #98	; 0x62
 800a92a:	d80a      	bhi.n	800a942 <_printf_i+0x32>
 800a92c:	2f00      	cmp	r7, #0
 800a92e:	f000 80d4 	beq.w	800aada <_printf_i+0x1ca>
 800a932:	2f58      	cmp	r7, #88	; 0x58
 800a934:	f000 80c0 	beq.w	800aab8 <_printf_i+0x1a8>
 800a938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a940:	e03a      	b.n	800a9b8 <_printf_i+0xa8>
 800a942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a946:	2b15      	cmp	r3, #21
 800a948:	d8f6      	bhi.n	800a938 <_printf_i+0x28>
 800a94a:	a101      	add	r1, pc, #4	; (adr r1, 800a950 <_printf_i+0x40>)
 800a94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a950:	0800a9a9 	.word	0x0800a9a9
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a939 	.word	0x0800a939
 800a95c:	0800a939 	.word	0x0800a939
 800a960:	0800a939 	.word	0x0800a939
 800a964:	0800a939 	.word	0x0800a939
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a939 	.word	0x0800a939
 800a970:	0800a939 	.word	0x0800a939
 800a974:	0800a939 	.word	0x0800a939
 800a978:	0800a939 	.word	0x0800a939
 800a97c:	0800aac1 	.word	0x0800aac1
 800a980:	0800a9e9 	.word	0x0800a9e9
 800a984:	0800aa7b 	.word	0x0800aa7b
 800a988:	0800a939 	.word	0x0800a939
 800a98c:	0800a939 	.word	0x0800a939
 800a990:	0800aae3 	.word	0x0800aae3
 800a994:	0800a939 	.word	0x0800a939
 800a998:	0800a9e9 	.word	0x0800a9e9
 800a99c:	0800a939 	.word	0x0800a939
 800a9a0:	0800a939 	.word	0x0800a939
 800a9a4:	0800aa83 	.word	0x0800aa83
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	1d1a      	adds	r2, r3, #4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	602a      	str	r2, [r5, #0]
 800a9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e09f      	b.n	800aafc <_printf_i+0x1ec>
 800a9bc:	6820      	ldr	r0, [r4, #0]
 800a9be:	682b      	ldr	r3, [r5, #0]
 800a9c0:	0607      	lsls	r7, r0, #24
 800a9c2:	f103 0104 	add.w	r1, r3, #4
 800a9c6:	6029      	str	r1, [r5, #0]
 800a9c8:	d501      	bpl.n	800a9ce <_printf_i+0xbe>
 800a9ca:	681e      	ldr	r6, [r3, #0]
 800a9cc:	e003      	b.n	800a9d6 <_printf_i+0xc6>
 800a9ce:	0646      	lsls	r6, r0, #25
 800a9d0:	d5fb      	bpl.n	800a9ca <_printf_i+0xba>
 800a9d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	da03      	bge.n	800a9e2 <_printf_i+0xd2>
 800a9da:	232d      	movs	r3, #45	; 0x2d
 800a9dc:	4276      	negs	r6, r6
 800a9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e2:	485a      	ldr	r0, [pc, #360]	; (800ab4c <_printf_i+0x23c>)
 800a9e4:	230a      	movs	r3, #10
 800a9e6:	e012      	b.n	800aa0e <_printf_i+0xfe>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	1d19      	adds	r1, r3, #4
 800a9ee:	6029      	str	r1, [r5, #0]
 800a9f0:	0605      	lsls	r5, r0, #24
 800a9f2:	d501      	bpl.n	800a9f8 <_printf_i+0xe8>
 800a9f4:	681e      	ldr	r6, [r3, #0]
 800a9f6:	e002      	b.n	800a9fe <_printf_i+0xee>
 800a9f8:	0641      	lsls	r1, r0, #25
 800a9fa:	d5fb      	bpl.n	800a9f4 <_printf_i+0xe4>
 800a9fc:	881e      	ldrh	r6, [r3, #0]
 800a9fe:	4853      	ldr	r0, [pc, #332]	; (800ab4c <_printf_i+0x23c>)
 800aa00:	2f6f      	cmp	r7, #111	; 0x6f
 800aa02:	bf0c      	ite	eq
 800aa04:	2308      	moveq	r3, #8
 800aa06:	230a      	movne	r3, #10
 800aa08:	2100      	movs	r1, #0
 800aa0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa0e:	6865      	ldr	r5, [r4, #4]
 800aa10:	60a5      	str	r5, [r4, #8]
 800aa12:	2d00      	cmp	r5, #0
 800aa14:	bfa2      	ittt	ge
 800aa16:	6821      	ldrge	r1, [r4, #0]
 800aa18:	f021 0104 	bicge.w	r1, r1, #4
 800aa1c:	6021      	strge	r1, [r4, #0]
 800aa1e:	b90e      	cbnz	r6, 800aa24 <_printf_i+0x114>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d04b      	beq.n	800aabc <_printf_i+0x1ac>
 800aa24:	4615      	mov	r5, r2
 800aa26:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa2a:	fb03 6711 	mls	r7, r3, r1, r6
 800aa2e:	5dc7      	ldrb	r7, [r0, r7]
 800aa30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa34:	4637      	mov	r7, r6
 800aa36:	42bb      	cmp	r3, r7
 800aa38:	460e      	mov	r6, r1
 800aa3a:	d9f4      	bls.n	800aa26 <_printf_i+0x116>
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d10b      	bne.n	800aa58 <_printf_i+0x148>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	07de      	lsls	r6, r3, #31
 800aa44:	d508      	bpl.n	800aa58 <_printf_i+0x148>
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	6861      	ldr	r1, [r4, #4]
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	bfde      	ittt	le
 800aa4e:	2330      	movle	r3, #48	; 0x30
 800aa50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa58:	1b52      	subs	r2, r2, r5
 800aa5a:	6122      	str	r2, [r4, #16]
 800aa5c:	f8cd a000 	str.w	sl, [sp]
 800aa60:	464b      	mov	r3, r9
 800aa62:	aa03      	add	r2, sp, #12
 800aa64:	4621      	mov	r1, r4
 800aa66:	4640      	mov	r0, r8
 800aa68:	f7ff fee4 	bl	800a834 <_printf_common>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d14a      	bne.n	800ab06 <_printf_i+0x1f6>
 800aa70:	f04f 30ff 	mov.w	r0, #4294967295
 800aa74:	b004      	add	sp, #16
 800aa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f043 0320 	orr.w	r3, r3, #32
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	4833      	ldr	r0, [pc, #204]	; (800ab50 <_printf_i+0x240>)
 800aa84:	2778      	movs	r7, #120	; 0x78
 800aa86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	6829      	ldr	r1, [r5, #0]
 800aa8e:	061f      	lsls	r7, r3, #24
 800aa90:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa94:	d402      	bmi.n	800aa9c <_printf_i+0x18c>
 800aa96:	065f      	lsls	r7, r3, #25
 800aa98:	bf48      	it	mi
 800aa9a:	b2b6      	uxthmi	r6, r6
 800aa9c:	07df      	lsls	r7, r3, #31
 800aa9e:	bf48      	it	mi
 800aaa0:	f043 0320 	orrmi.w	r3, r3, #32
 800aaa4:	6029      	str	r1, [r5, #0]
 800aaa6:	bf48      	it	mi
 800aaa8:	6023      	strmi	r3, [r4, #0]
 800aaaa:	b91e      	cbnz	r6, 800aab4 <_printf_i+0x1a4>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	f023 0320 	bic.w	r3, r3, #32
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	2310      	movs	r3, #16
 800aab6:	e7a7      	b.n	800aa08 <_printf_i+0xf8>
 800aab8:	4824      	ldr	r0, [pc, #144]	; (800ab4c <_printf_i+0x23c>)
 800aaba:	e7e4      	b.n	800aa86 <_printf_i+0x176>
 800aabc:	4615      	mov	r5, r2
 800aabe:	e7bd      	b.n	800aa3c <_printf_i+0x12c>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	6826      	ldr	r6, [r4, #0]
 800aac4:	6961      	ldr	r1, [r4, #20]
 800aac6:	1d18      	adds	r0, r3, #4
 800aac8:	6028      	str	r0, [r5, #0]
 800aaca:	0635      	lsls	r5, r6, #24
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	d501      	bpl.n	800aad4 <_printf_i+0x1c4>
 800aad0:	6019      	str	r1, [r3, #0]
 800aad2:	e002      	b.n	800aada <_printf_i+0x1ca>
 800aad4:	0670      	lsls	r0, r6, #25
 800aad6:	d5fb      	bpl.n	800aad0 <_printf_i+0x1c0>
 800aad8:	8019      	strh	r1, [r3, #0]
 800aada:	2300      	movs	r3, #0
 800aadc:	6123      	str	r3, [r4, #16]
 800aade:	4615      	mov	r5, r2
 800aae0:	e7bc      	b.n	800aa5c <_printf_i+0x14c>
 800aae2:	682b      	ldr	r3, [r5, #0]
 800aae4:	1d1a      	adds	r2, r3, #4
 800aae6:	602a      	str	r2, [r5, #0]
 800aae8:	681d      	ldr	r5, [r3, #0]
 800aaea:	6862      	ldr	r2, [r4, #4]
 800aaec:	2100      	movs	r1, #0
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f7f5 fb6e 	bl	80001d0 <memchr>
 800aaf4:	b108      	cbz	r0, 800aafa <_printf_i+0x1ea>
 800aaf6:	1b40      	subs	r0, r0, r5
 800aaf8:	6060      	str	r0, [r4, #4]
 800aafa:	6863      	ldr	r3, [r4, #4]
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	2300      	movs	r3, #0
 800ab00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab04:	e7aa      	b.n	800aa5c <_printf_i+0x14c>
 800ab06:	6923      	ldr	r3, [r4, #16]
 800ab08:	462a      	mov	r2, r5
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	47d0      	blx	sl
 800ab10:	3001      	adds	r0, #1
 800ab12:	d0ad      	beq.n	800aa70 <_printf_i+0x160>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	079b      	lsls	r3, r3, #30
 800ab18:	d413      	bmi.n	800ab42 <_printf_i+0x232>
 800ab1a:	68e0      	ldr	r0, [r4, #12]
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	4298      	cmp	r0, r3
 800ab20:	bfb8      	it	lt
 800ab22:	4618      	movlt	r0, r3
 800ab24:	e7a6      	b.n	800aa74 <_printf_i+0x164>
 800ab26:	2301      	movs	r3, #1
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	47d0      	blx	sl
 800ab30:	3001      	adds	r0, #1
 800ab32:	d09d      	beq.n	800aa70 <_printf_i+0x160>
 800ab34:	3501      	adds	r5, #1
 800ab36:	68e3      	ldr	r3, [r4, #12]
 800ab38:	9903      	ldr	r1, [sp, #12]
 800ab3a:	1a5b      	subs	r3, r3, r1
 800ab3c:	42ab      	cmp	r3, r5
 800ab3e:	dcf2      	bgt.n	800ab26 <_printf_i+0x216>
 800ab40:	e7eb      	b.n	800ab1a <_printf_i+0x20a>
 800ab42:	2500      	movs	r5, #0
 800ab44:	f104 0619 	add.w	r6, r4, #25
 800ab48:	e7f5      	b.n	800ab36 <_printf_i+0x226>
 800ab4a:	bf00      	nop
 800ab4c:	0800b8a8 	.word	0x0800b8a8
 800ab50:	0800b8b9 	.word	0x0800b8b9

0800ab54 <memmove>:
 800ab54:	4288      	cmp	r0, r1
 800ab56:	b510      	push	{r4, lr}
 800ab58:	eb01 0402 	add.w	r4, r1, r2
 800ab5c:	d902      	bls.n	800ab64 <memmove+0x10>
 800ab5e:	4284      	cmp	r4, r0
 800ab60:	4623      	mov	r3, r4
 800ab62:	d807      	bhi.n	800ab74 <memmove+0x20>
 800ab64:	1e43      	subs	r3, r0, #1
 800ab66:	42a1      	cmp	r1, r4
 800ab68:	d008      	beq.n	800ab7c <memmove+0x28>
 800ab6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab72:	e7f8      	b.n	800ab66 <memmove+0x12>
 800ab74:	4402      	add	r2, r0
 800ab76:	4601      	mov	r1, r0
 800ab78:	428a      	cmp	r2, r1
 800ab7a:	d100      	bne.n	800ab7e <memmove+0x2a>
 800ab7c:	bd10      	pop	{r4, pc}
 800ab7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab86:	e7f7      	b.n	800ab78 <memmove+0x24>

0800ab88 <_sbrk_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d06      	ldr	r5, [pc, #24]	; (800aba4 <_sbrk_r+0x1c>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	f7f7 fa34 	bl	8002000 <_sbrk>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_sbrk_r+0x1a>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_sbrk_r+0x1a>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	200006f8 	.word	0x200006f8

0800aba8 <memcpy>:
 800aba8:	440a      	add	r2, r1
 800abaa:	4291      	cmp	r1, r2
 800abac:	f100 33ff 	add.w	r3, r0, #4294967295
 800abb0:	d100      	bne.n	800abb4 <memcpy+0xc>
 800abb2:	4770      	bx	lr
 800abb4:	b510      	push	{r4, lr}
 800abb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abbe:	4291      	cmp	r1, r2
 800abc0:	d1f9      	bne.n	800abb6 <memcpy+0xe>
 800abc2:	bd10      	pop	{r4, pc}

0800abc4 <_realloc_r>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	4680      	mov	r8, r0
 800abca:	4614      	mov	r4, r2
 800abcc:	460e      	mov	r6, r1
 800abce:	b921      	cbnz	r1, 800abda <_realloc_r+0x16>
 800abd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	4611      	mov	r1, r2
 800abd6:	f7ff bc49 	b.w	800a46c <_malloc_r>
 800abda:	b92a      	cbnz	r2, 800abe8 <_realloc_r+0x24>
 800abdc:	f7ff fbda 	bl	800a394 <_free_r>
 800abe0:	4625      	mov	r5, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	f000 f81b 	bl	800ac22 <_malloc_usable_size_r>
 800abec:	4284      	cmp	r4, r0
 800abee:	4607      	mov	r7, r0
 800abf0:	d802      	bhi.n	800abf8 <_realloc_r+0x34>
 800abf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abf6:	d812      	bhi.n	800ac1e <_realloc_r+0x5a>
 800abf8:	4621      	mov	r1, r4
 800abfa:	4640      	mov	r0, r8
 800abfc:	f7ff fc36 	bl	800a46c <_malloc_r>
 800ac00:	4605      	mov	r5, r0
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0ed      	beq.n	800abe2 <_realloc_r+0x1e>
 800ac06:	42bc      	cmp	r4, r7
 800ac08:	4622      	mov	r2, r4
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	bf28      	it	cs
 800ac0e:	463a      	movcs	r2, r7
 800ac10:	f7ff ffca 	bl	800aba8 <memcpy>
 800ac14:	4631      	mov	r1, r6
 800ac16:	4640      	mov	r0, r8
 800ac18:	f7ff fbbc 	bl	800a394 <_free_r>
 800ac1c:	e7e1      	b.n	800abe2 <_realloc_r+0x1e>
 800ac1e:	4635      	mov	r5, r6
 800ac20:	e7df      	b.n	800abe2 <_realloc_r+0x1e>

0800ac22 <_malloc_usable_size_r>:
 800ac22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac26:	1f18      	subs	r0, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bfbc      	itt	lt
 800ac2c:	580b      	ldrlt	r3, [r1, r0]
 800ac2e:	18c0      	addlt	r0, r0, r3
 800ac30:	4770      	bx	lr
	...

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
