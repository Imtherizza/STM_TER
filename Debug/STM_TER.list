
STM_TER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  08010fb0  08010fb0  00020fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ca4  08011ca4  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08011ca4  08011ca4  00021ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cac  08011cac  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cac  08011cac  00021cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011cb0  08011cb0  00021cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08011cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  20000204  08011eb8  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08011eb8  0003197c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fb4a  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006571  00000000  00000000  0005fdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002450  00000000  00000000  00066338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ba3  00000000  00000000  00068788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b94  00000000  00000000  0006a32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e4d9  00000000  00000000  00092ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8aa4  00000000  00000000  000c1398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ae4  00000000  00000000  001a9e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001b3920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010f98 	.word	0x08010f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08010f98 	.word	0x08010f98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <bno055_init>:
#include <CoVAPSy_bno055.h>
#include "i2c.h"
// Initialisation du BNO055
void bno055_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
	uint8_t donnees_Tx_i2c[8];
	uint8_t donnees_Rx_i2c[8];

	donnees_Tx_i2c[0] = 0x3F;
 8000572:	233f      	movs	r3, #63	; 0x3f
 8000574:	723b      	strb	r3, [r7, #8]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000576:	bf00      	nop
 8000578:	4887      	ldr	r0, [pc, #540]	; (8000798 <bno055_init+0x22c>)
 800057a:	f003 febb 	bl	80042f4 <HAL_I2C_GetState>
 800057e:	4603      	mov	r3, r0
 8000580:	2b20      	cmp	r3, #32
 8000582:	d1f9      	bne.n	8000578 <bno055_init+0xc>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2150      	movs	r1, #80	; 0x50
 8000592:	4881      	ldr	r0, [pc, #516]	; (8000798 <bno055_init+0x22c>)
 8000594:	f003 fbb0 	bl	8003cf8 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000598:	bf00      	nop
 800059a:	487f      	ldr	r0, [pc, #508]	; (8000798 <bno055_init+0x22c>)
 800059c:	f003 feaa 	bl	80042f4 <HAL_I2C_GetState>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b20      	cmp	r3, #32
 80005a4:	d1f9      	bne.n	800059a <bno055_init+0x2e>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 1);
 80005a6:	463a      	mov	r2, r7
 80005a8:	2301      	movs	r3, #1
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	2150      	movs	r1, #80	; 0x50
 80005b0:	4879      	ldr	r0, [pc, #484]	; (8000798 <bno055_init+0x22c>)
 80005b2:	f003 fc95 	bl	8003ee0 <HAL_I2C_Master_Receive>

	HAL_Delay(500); //delai 500 ms
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f001 fcaf 	bl	8001f1c <HAL_Delay>

	donnees_Tx_i2c[1] = 32;
 80005be:	2320      	movs	r3, #32
 80005c0:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80005c2:	bf00      	nop
 80005c4:	4874      	ldr	r0, [pc, #464]	; (8000798 <bno055_init+0x22c>)
 80005c6:	f003 fe95 	bl	80042f4 <HAL_I2C_GetState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b20      	cmp	r3, #32
 80005ce:	d1f9      	bne.n	80005c4 <bno055_init+0x58>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80005d0:	f107 0208 	add.w	r2, r7, #8
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2302      	movs	r3, #2
 80005dc:	2150      	movs	r1, #80	; 0x50
 80005de:	486e      	ldr	r0, [pc, #440]	; (8000798 <bno055_init+0x22c>)
 80005e0:	f003 fb8a 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	HAL_Delay(2000); //delai 2000 ms
 80005e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e8:	f001 fc98 	bl	8001f1c <HAL_Delay>

	// A envoyer lors du premier test
	donnees_Tx_i2c[0] = PAGE_SWAP;
 80005ec:	2307      	movs	r3, #7
 80005ee:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 80005f4:	bf00      	nop
 80005f6:	4868      	ldr	r0, [pc, #416]	; (8000798 <bno055_init+0x22c>)
 80005f8:	f003 fe7c 	bl	80042f4 <HAL_I2C_GetState>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d1f9      	bne.n	80005f6 <bno055_init+0x8a>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000602:	f107 0208 	add.w	r2, r7, #8
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2302      	movs	r3, #2
 800060e:	2150      	movs	r1, #80	; 0x50
 8000610:	4861      	ldr	r0, [pc, #388]	; (8000798 <bno055_init+0x22c>)
 8000612:	f003 fb71 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = ACC_CONF;
 8000616:	2308      	movs	r3, #8
 8000618:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x08;
 800061a:	2308      	movs	r3, #8
 800061c:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 800061e:	bf00      	nop
 8000620:	485d      	ldr	r0, [pc, #372]	; (8000798 <bno055_init+0x22c>)
 8000622:	f003 fe67 	bl	80042f4 <HAL_I2C_GetState>
 8000626:	4603      	mov	r3, r0
 8000628:	2b20      	cmp	r3, #32
 800062a:	d1f9      	bne.n	8000620 <bno055_init+0xb4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 800062c:	f107 0208 	add.w	r2, r7, #8
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2302      	movs	r3, #2
 8000638:	2150      	movs	r1, #80	; 0x50
 800063a:	4857      	ldr	r0, [pc, #348]	; (8000798 <bno055_init+0x22c>)
 800063c:	f003 fb5c 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_0;
 8000640:	230a      	movs	r3, #10
 8000642:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x23;
 8000644:	2323      	movs	r3, #35	; 0x23
 8000646:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000648:	bf00      	nop
 800064a:	4853      	ldr	r0, [pc, #332]	; (8000798 <bno055_init+0x22c>)
 800064c:	f003 fe52 	bl	80042f4 <HAL_I2C_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b20      	cmp	r3, #32
 8000654:	d1f9      	bne.n	800064a <bno055_init+0xde>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000656:	f107 0208 	add.w	r2, r7, #8
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2302      	movs	r3, #2
 8000662:	2150      	movs	r1, #80	; 0x50
 8000664:	484c      	ldr	r0, [pc, #304]	; (8000798 <bno055_init+0x22c>)
 8000666:	f003 fb47 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_1;
 800066a:	230b      	movs	r3, #11
 800066c:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000672:	bf00      	nop
 8000674:	4848      	ldr	r0, [pc, #288]	; (8000798 <bno055_init+0x22c>)
 8000676:	f003 fe3d 	bl	80042f4 <HAL_I2C_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b20      	cmp	r3, #32
 800067e:	d1f9      	bne.n	8000674 <bno055_init+0x108>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000680:	f107 0208 	add.w	r2, r7, #8
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2302      	movs	r3, #2
 800068c:	2150      	movs	r1, #80	; 0x50
 800068e:	4842      	ldr	r0, [pc, #264]	; (8000798 <bno055_init+0x22c>)
 8000690:	f003 fb32 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MAG_CONF;
 8000694:	2309      	movs	r3, #9
 8000696:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x1B;
 8000698:	231b      	movs	r3, #27
 800069a:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800069c:	bf00      	nop
 800069e:	483e      	ldr	r0, [pc, #248]	; (8000798 <bno055_init+0x22c>)
 80006a0:	f003 fe28 	bl	80042f4 <HAL_I2C_GetState>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b20      	cmp	r3, #32
 80006a8:	d1f9      	bne.n	800069e <bno055_init+0x132>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80006aa:	f107 0208 	add.w	r2, r7, #8
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2302      	movs	r3, #2
 80006b6:	2150      	movs	r1, #80	; 0x50
 80006b8:	4837      	ldr	r0, [pc, #220]	; (8000798 <bno055_init+0x22c>)
 80006ba:	f003 fb1d 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PAGE_SWAP;
 80006be:	2307      	movs	r3, #7
 80006c0:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80006c6:	bf00      	nop
 80006c8:	4833      	ldr	r0, [pc, #204]	; (8000798 <bno055_init+0x22c>)
 80006ca:	f003 fe13 	bl	80042f4 <HAL_I2C_GetState>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d1f9      	bne.n	80006c8 <bno055_init+0x15c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80006d4:	f107 0208 	add.w	r2, r7, #8
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2302      	movs	r3, #2
 80006e0:	2150      	movs	r1, #80	; 0x50
 80006e2:	482d      	ldr	r0, [pc, #180]	; (8000798 <bno055_init+0x22c>)
 80006e4:	f003 fb08 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = TEMP_SOURCE;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x01;
 80006ec:	2301      	movs	r3, #1
 80006ee:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80006f0:	bf00      	nop
 80006f2:	4829      	ldr	r0, [pc, #164]	; (8000798 <bno055_init+0x22c>)
 80006f4:	f003 fdfe 	bl	80042f4 <HAL_I2C_GetState>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b20      	cmp	r3, #32
 80006fc:	d1f9      	bne.n	80006f2 <bno055_init+0x186>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	2150      	movs	r1, #80	; 0x50
 800070c:	4822      	ldr	r0, [pc, #136]	; (8000798 <bno055_init+0x22c>)
 800070e:	f003 faf3 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = UNIT_SEL;
 8000712:	233b      	movs	r3, #59	; 0x3b
 8000714:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x01;
 8000716:	2301      	movs	r3, #1
 8000718:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800071a:	bf00      	nop
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <bno055_init+0x22c>)
 800071e:	f003 fde9 	bl	80042f4 <HAL_I2C_GetState>
 8000722:	4603      	mov	r3, r0
 8000724:	2b20      	cmp	r3, #32
 8000726:	d1f9      	bne.n	800071c <bno055_init+0x1b0>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000728:	f107 0208 	add.w	r2, r7, #8
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2302      	movs	r3, #2
 8000734:	2150      	movs	r1, #80	; 0x50
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <bno055_init+0x22c>)
 8000738:	f003 fade 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PWR_MODE;
 800073c:	233e      	movs	r3, #62	; 0x3e
 800073e:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = 0x00;
 8000740:	2300      	movs	r3, #0
 8000742:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000744:	bf00      	nop
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <bno055_init+0x22c>)
 8000748:	f003 fdd4 	bl	80042f4 <HAL_I2C_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b20      	cmp	r3, #32
 8000750:	d1f9      	bne.n	8000746 <bno055_init+0x1da>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000752:	f107 0208 	add.w	r2, r7, #8
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2302      	movs	r3, #2
 800075e:	2150      	movs	r1, #80	; 0x50
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <bno055_init+0x22c>)
 8000762:	f003 fac9 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MODE_REG;
 8000766:	233d      	movs	r3, #61	; 0x3d
 8000768:	723b      	strb	r3, [r7, #8]
	donnees_Tx_i2c[1] = FUSION_MODE;
 800076a:	230c      	movs	r3, #12
 800076c:	727b      	strb	r3, [r7, #9]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800076e:	bf00      	nop
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <bno055_init+0x22c>)
 8000772:	f003 fdbf 	bl	80042f4 <HAL_I2C_GetState>
 8000776:	4603      	mov	r3, r0
 8000778:	2b20      	cmp	r3, #32
 800077a:	d1f9      	bne.n	8000770 <bno055_init+0x204>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 800077c:	f107 0208 	add.w	r2, r7, #8
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2302      	movs	r3, #2
 8000788:	2150      	movs	r1, #80	; 0x50
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <bno055_init+0x22c>)
 800078c:	f003 fab4 	bl	8003cf8 <HAL_I2C_Master_Transmit>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200002cc 	.word	0x200002cc

0800079c <bno055_lecture_16bits>:

int16_t bno055_lecture_16bits(uint8_t num_registre) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[8];
	uint8_t donnees_Rx_i2c[8];
	donnees_Tx_i2c[0] = num_registre;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007aa:	bf00      	nop
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <bno055_lecture_16bits+0x6c>)
 80007ae:	f003 fda1 	bl	80042f4 <HAL_I2C_GetState>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b20      	cmp	r3, #32
 80007b6:	d1f9      	bne.n	80007ac <bno055_lecture_16bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 80007b8:	f107 0210 	add.w	r2, r7, #16
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2301      	movs	r3, #1
 80007c4:	2150      	movs	r1, #80	; 0x50
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <bno055_lecture_16bits+0x6c>)
 80007c8:	f003 fa96 	bl	8003cf8 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007cc:	bf00      	nop
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <bno055_lecture_16bits+0x6c>)
 80007d0:	f003 fd90 	bl	80042f4 <HAL_I2C_GetState>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b20      	cmp	r3, #32
 80007d8:	d1f9      	bne.n	80007ce <bno055_lecture_16bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	2, 1);
 80007da:	f107 0208 	add.w	r2, r7, #8
 80007de:	2301      	movs	r3, #1
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2302      	movs	r3, #2
 80007e4:	2150      	movs	r1, #80	; 0x50
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <bno055_lecture_16bits+0x6c>)
 80007e8:	f003 fb7a 	bl	8003ee0 <HAL_I2C_Master_Receive>
	return ((uint16_t)(donnees_Rx_i2c[1]<<8) + donnees_Rx_i2c[0]);
 80007ec:	7a7b      	ldrb	r3, [r7, #9]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	7a3b      	ldrb	r3, [r7, #8]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	4413      	add	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b21b      	sxth	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002cc 	.word	0x200002cc

0800080c <bno055_lecture_8bits>:
uint8_t bno055_lecture_8bits(uint8_t num_registre) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[8];
	uint8_t donnees_Rx_i2c[8];
	donnees_Tx_i2c[0]=num_registre;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800081a:	bf00      	nop
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <bno055_lecture_8bits+0x5c>)
 800081e:	f003 fd69 	bl	80042f4 <HAL_I2C_GetState>
 8000822:	4603      	mov	r3, r0
 8000824:	2b20      	cmp	r3, #32
 8000826:	d1f9      	bne.n	800081c <bno055_lecture_8bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRESSE_BNO<<1, donnees_Tx_i2c, 1, 1000);
 8000828:	f107 0210 	add.w	r2, r7, #16
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	2150      	movs	r1, #80	; 0x50
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <bno055_lecture_8bits+0x5c>)
 8000838:	f003 fa5e 	bl	8003cf8 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800083c:	bf00      	nop
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <bno055_lecture_8bits+0x5c>)
 8000840:	f003 fd58 	bl	80042f4 <HAL_I2C_GetState>
 8000844:	4603      	mov	r3, r0
 8000846:	2b20      	cmp	r3, #32
 8000848:	d1f9      	bne.n	800083e <bno055_lecture_8bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRESSE_BNO<<1, donnees_Rx_i2c, 1, 1);
 800084a:	f107 0208 	add.w	r2, r7, #8
 800084e:	2301      	movs	r3, #1
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	2150      	movs	r1, #80	; 0x50
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <bno055_lecture_8bits+0x5c>)
 8000858:	f003 fb42 	bl	8003ee0 <HAL_I2C_Master_Receive>
	return (donnees_Rx_i2c[0]);
 800085c:	7a3b      	ldrb	r3, [r7, #8]

}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002cc 	.word	0x200002cc

0800086c <buzzer_start_frequency_Hz>:


#include "CoVAPSy_buzzer.h"

//Periode max 65 535 µs => Frequence entre 15 et 1 MHz
void buzzer_start_frequency_Hz(float frequency_Hz){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t periode_buzzer;
	periode_buzzer = FREQ_TIMER_6/frequency_Hz;
 8000876:	eddf 6a16 	vldr	s13, [pc, #88]	; 80008d0 <buzzer_start_frequency_Hz+0x64>
 800087a:	ed97 7a01 	vldr	s14, [r7, #4]
 800087e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000886:	ee17 3a90 	vmov	r3, s15
 800088a:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_IT(&htim6);
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 800088e:	f007 ff2d 	bl	80086ec <HAL_TIM_Base_Stop_IT>
	htim6.Instance = TIM6;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 8000894:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <buzzer_start_frequency_Hz+0x6c>)
 8000896:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 800089a:	221f      	movs	r2, #31
 800089c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = periode_buzzer;
 80008a4:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 80008b2:	f007 fe6f 	bl	8008594 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <buzzer_start_frequency_Hz+0x54>
	{
	    Error_Handler();
 80008bc:	f000 feb0 	bl	8001620 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <buzzer_start_frequency_Hz+0x68>)
 80008c2:	f007 febf 	bl	8008644 <HAL_TIM_Base_Start_IT>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	49742400 	.word	0x49742400
 80008d4:	200004f0 	.word	0x200004f0
 80008d8:	40001000 	.word	0x40001000

080008dc <buzzer_start>:

void buzzer_start(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <buzzer_start+0x10>)
 80008e2:	f007 feaf 	bl	8008644 <HAL_TIM_Base_Start_IT>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004f0 	.word	0x200004f0

080008f0 <buzzer_stop>:

void buzzer_stop(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <buzzer_stop+0x10>)
 80008f6:	f007 fef9 	bl	80086ec <HAL_TIM_Base_Stop_IT>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200004f0 	.word	0x200004f0

08000904 <buzzer_gamme>:

void buzzer_gamme(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	buzzer_start_frequency_Hz(NOTE_DO3);
 8000908:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000980 <buzzer_gamme+0x7c>
 800090c:	f7ff ffae 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000910:	20c8      	movs	r0, #200	; 0xc8
 8000912:	f001 fb03 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_RE3);
 8000916:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000984 <buzzer_gamme+0x80>
 800091a:	f7ff ffa7 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800091e:	20c8      	movs	r0, #200	; 0xc8
 8000920:	f001 fafc 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_MI3);
 8000924:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000988 <buzzer_gamme+0x84>
 8000928:	f7ff ffa0 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800092c:	20c8      	movs	r0, #200	; 0xc8
 800092e:	f001 faf5 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_FA3);
 8000932:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800098c <buzzer_gamme+0x88>
 8000936:	f7ff ff99 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800093a:	20c8      	movs	r0, #200	; 0xc8
 800093c:	f001 faee 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_SOL3);
 8000940:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000990 <buzzer_gamme+0x8c>
 8000944:	f7ff ff92 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000948:	20c8      	movs	r0, #200	; 0xc8
 800094a:	f001 fae7 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_LA3);
 800094e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000994 <buzzer_gamme+0x90>
 8000952:	f7ff ff8b 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000956:	20c8      	movs	r0, #200	; 0xc8
 8000958:	f001 fae0 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_SI3);
 800095c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000998 <buzzer_gamme+0x94>
 8000960:	f7ff ff84 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000964:	20c8      	movs	r0, #200	; 0xc8
 8000966:	f001 fad9 	bl	8001f1c <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_DO4);
 800096a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800099c <buzzer_gamme+0x98>
 800096e:	f7ff ff7d 	bl	800086c <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000972:	20c8      	movs	r0, #200	; 0xc8
 8000974:	f001 fad2 	bl	8001f1c <HAL_Delay>
	buzzer_stop();
 8000978:	f7ff ffba 	bl	80008f0 <buzzer_stop>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	4382d0a4 	.word	0x4382d0a4
 8000984:	4392d47b 	.word	0x4392d47b
 8000988:	43a4d0a4 	.word	0x43a4d0a4
 800098c:	43ae9d71 	.word	0x43ae9d71
 8000990:	43c40000 	.word	0x43c40000
 8000994:	43dc0000 	.word	0x43dc0000
 8000998:	43f6f0a4 	.word	0x43f6f0a4
 800099c:	4402d000 	.word	0x4402d000

080009a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009b8:	4a37      	ldr	r2, [pc, #220]	; (8000a98 <MX_ADC1_Init+0xf8>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009bc:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009d6:	2208      	movs	r2, #8
 80009d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_ADC1_Init+0xf4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a1a:	f001 fc6b 	bl	80022f4 <HAL_ADC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a24:	f000 fdfc 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_ADC1_Init+0xfc>)
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a34:	237f      	movs	r3, #127	; 0x7f
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a46:	f001 fecf 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a50:	f000 fde6 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_ADC1_Init+0x100>)
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a62:	f001 fec1 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000a6c:	f000 fdd8 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_ADC1_Init+0x104>)
 8000a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a74:	2312      	movs	r3, #18
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC1_Init+0xf4>)
 8000a7e:	f001 feb3 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000a88:	f000 fdca 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000220 	.word	0x20000220
 8000a98:	50040000 	.word	0x50040000
 8000a9c:	19200040 	.word	0x19200040
 8000aa0:	21800100 	.word	0x21800100
 8000aa4:	25b00200 	.word	0x25b00200

08000aa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09e      	sub	sp, #120	; 0x78
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2254      	movs	r2, #84	; 0x54
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f00f fde1 	bl	8010690 <memset>
  if(adcHandle->Instance==ADC1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <HAL_ADC_MspInit+0x118>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d16e      	bne.n	8000bb6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000adc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ade:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000aec:	2310      	movs	r3, #16
 8000aee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4618      	mov	r0, r3
 8000b08:	f006 fbae 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b12:	f000 fd85 	bl	8001620 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_ADC_MspInit+0x11c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000b46:	231a      	movs	r3, #26
 8000b48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f002 fe88 	bl	8003870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <HAL_ADC_MspInit+0x124>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b90:	2220      	movs	r2, #32
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000b9c:	f002 fc30 	bl	8003400 <HAL_DMA_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000ba6:	f000 fd3b 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000bae:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_ADC_MspInit+0x120>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3778      	adds	r7, #120	; 0x78
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	50040000 	.word	0x50040000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	20000284 	.word	0x20000284
 8000bcc:	40020008 	.word	0x40020008

08000bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_DMA_Init+0x38>)
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <MX_DMA_Init+0x38>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6493      	str	r3, [r2, #72]	; 0x48
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_DMA_Init+0x38>)
 8000be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	200b      	movs	r0, #11
 8000bf4:	f002 fbcd 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bf8:	200b      	movs	r0, #11
 8000bfa:	f002 fbe6 	bl	80033ca <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a2a      	ldr	r2, [pc, #168]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_GPIO_Init+0xf4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2184      	movs	r1, #132	; 0x84
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f002 ff7f 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4822      	ldr	r0, [pc, #136]	; (8000d04 <MX_GPIO_Init+0xf8>)
 8000c7c:	f002 ff7a 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8000c80:	2384      	movs	r3, #132	; 0x84
 8000c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f002 fde9 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <MX_GPIO_Init+0xf8>)
 8000cb2:	f002 fddd 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_GPIO_Init+0xf8>)
 8000cce:	f002 fdcf 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f002 fdbd 	bl	8003870 <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400

08000d08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_I2C1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <MX_I2C1_Init+0x7c>)
 8000d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d44:	f002 ff48 	bl	8003bd8 <HAL_I2C_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d4e:	f000 fc67 	bl	8001620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d56:	f003 fda7 	bl	80048a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d60:	f000 fc5e 	bl	8001620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_I2C1_Init+0x74>)
 8000d68:	f003 fde9 	bl	800493e <HAL_I2CEx_ConfigDigitalFilter>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 fc55 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200002cc 	.word	0x200002cc
 8000d80:	40005400 	.word	0x40005400
 8000d84:	00707cbb 	.word	0x00707cbb

08000d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09e      	sub	sp, #120	; 0x78
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2254      	movs	r2, #84	; 0x54
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00f fc71 	bl	8010690 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_I2C_MspInit+0xa4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d135      	bne.n	8000e24 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fa4f 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f000 fc26 	bl	8001620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dec:	23c0      	movs	r3, #192	; 0xc0
 8000dee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e04:	4619      	mov	r1, r3
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <HAL_I2C_MspInit+0xac>)
 8000e08:	f002 fd32 	bl	8003870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_I2C_MspInit+0xa8>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3778      	adds	r7, #120	; 0x78
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400

08000e38 <u8g_Delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t control = 0;
void u8g_Delay(uint16_t val) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(val);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 f869 	bl	8001f1c <HAL_Delay>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
    static uint32_t i, j;
    static uint32_t freq;
    freq = HAL_RCC_GetSysClockFreq() / 1000000;
 8000e5e:	f006 f8df 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <u8g_xMicroDelay+0x6c>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <u8g_xMicroDelay+0x70>)
 8000e6e:	6013      	str	r3, [r2, #0]

    for (i = 0; i < val;) {
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <u8g_xMicroDelay+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e018      	b.n	8000eaa <u8g_xMicroDelay+0x56>
        for (j = 0; j < freq; ++j) {
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e009      	b.n	8000e94 <u8g_xMicroDelay+0x40>
            ++j;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e88:	6013      	str	r3, [r2, #0]
        for (j = 0; j < freq; ++j) {
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <u8g_xMicroDelay+0x78>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <u8g_xMicroDelay+0x70>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3ef      	bcc.n	8000e80 <u8g_xMicroDelay+0x2c>
        }
        ++i;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <u8g_xMicroDelay+0x74>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <u8g_xMicroDelay+0x74>)
 8000ea8:	6013      	str	r3, [r2, #0]
    for (i = 0; i < val;) {
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <u8g_xMicroDelay+0x74>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e1      	bhi.n	8000e78 <u8g_xMicroDelay+0x24>
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	20000390 	.word	0x20000390
 8000ec8:	20000394 	.word	0x20000394
 8000ecc:	20000398 	.word	0x20000398

08000ed0 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ffbd 	bl	8000e54 <u8g_xMicroDelay>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(10);
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f7ff ffb6 	bl	8000e54 <u8g_xMicroDelay>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <u8g_com_arm_stm32_sh_i2c_fn>:

uint8_t u8g_com_arm_stm32_sh_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d845      	bhi.n	8000f90 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <u8g_com_arm_stm32_sh_i2c_fn+0x20>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f91 	.word	0x08000f91
 8000f10:	08000f2d 	.word	0x08000f2d
 8000f14:	08000f33 	.word	0x08000f33
 8000f18:	08000f91 	.word	0x08000f91
 8000f1c:	08000f91 	.word	0x08000f91
 8000f20:	08000f4d 	.word	0x08000f4d
 8000f24:	08000f6f 	.word	0x08000f6f
 8000f28:	08000f6f 	.word	0x08000f6f
    case U8G_COM_MSG_STOP:
        break;

    case U8G_COM_MSG_INIT:
        u8g_MicroDelay();
 8000f2c:	f7ff ffd0 	bl	8000ed0 <u8g_MicroDelay>
        break;
 8000f30:	e02e      	b.n	8000f90 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_ADDRESS:
        if (arg_val == 0) {
 8000f32:	7abb      	ldrb	r3, [r7, #10]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <u8g_com_arm_stm32_sh_i2c_fn+0x54>
            control = 0;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e002      	b.n	8000f46 <u8g_com_arm_stm32_sh_i2c_fn+0x5a>
        } else {
            control = 0x40;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	701a      	strb	r2, [r3, #0]
        }
        u8g_10MicroDelay();
 8000f46:	f7ff ffca 	bl	8000ede <u8g_10MicroDelay>
        break;
 8000f4a:	e021      	b.n	8000f90 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_BYTE: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, &arg_val, 1, 10000);
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	f107 030a 	add.w	r3, r7, #10
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	2178      	movs	r1, #120	; 0x78
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8000f68:	f003 f8b0 	bl	80040cc <HAL_I2C_Mem_Write>
    }
        break;
 8000f6c:	e010      	b.n	8000f90 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, arg_ptr, arg_val, 10000);
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	7abb      	ldrb	r3, [r7, #10]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f7c:	9102      	str	r1, [sp, #8]
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	2178      	movs	r1, #120	; 0x78
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8000f8a:	f003 f89f 	bl	80040cc <HAL_I2C_Mem_Write>
    }

        break;
 8000f8e:	bf00      	nop
    }
    return 1;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000038c 	.word	0x2000038c
 8000fa0:	200002cc 	.word	0x200002cc

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b096      	sub	sp, #88	; 0x58
 8000fa8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t bp2,bp2_old=0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 ff40 	bl	8001e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f9bb 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f7ff fe29 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fba:	f7ff fe09 	bl	8000bd0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fbe:	f7ff fcef 	bl	80009a0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000fc2:	f000 fb33 	bl	800162c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000fc6:	f000 fc7f 	bl	80018c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fca:	f000 fe81 	bl	8001cd0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fce:	f000 fd29 	bl	8001a24 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000fd2:	f7ff fe99 	bl	8000d08 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000fd6:	f000 fd95 	bl	8001b04 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000fda:	f00e fd8b 	bl	800faf4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fde:	48b6      	ldr	r0, [pc, #728]	; (80012b8 <main+0x314>)
 8000fe0:	f007 fb30 	bl	8008644 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	48b4      	ldr	r0, [pc, #720]	; (80012b8 <main+0x314>)
 8000fe8:	f007 fd50 	bl	8008a8c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fec:	2100      	movs	r1, #0
 8000fee:	48b3      	ldr	r0, [pc, #716]	; (80012bc <main+0x318>)
 8000ff0:	f007 fc0c 	bl	800880c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ff4:	210c      	movs	r1, #12
 8000ff6:	48b1      	ldr	r0, [pc, #708]	; (80012bc <main+0x318>)
 8000ff8:	f007 fc08 	bl	800880c <HAL_TIM_PWM_Start>

  buzzer_start();
 8000ffc:	f7ff fc6e 	bl	80008dc <buzzer_start>
  buzzer_gamme();
 8001000:	f7ff fc80 	bl	8000904 <buzzer_gamme>

  bno055_init();
 8001004:	f7ff fab2 	bl	800056c <bno055_init>

  u8g_InitComFn(&u8g, &u8g_dev_sh1106_128x64_i2c, u8g_com_arm_stm32_sh_i2c_fn);
 8001008:	4aad      	ldr	r2, [pc, #692]	; (80012c0 <main+0x31c>)
 800100a:	49ae      	ldr	r1, [pc, #696]	; (80012c4 <main+0x320>)
 800100c:	48ae      	ldr	r0, [pc, #696]	; (80012c8 <main+0x324>)
 800100e:	f00c fe2e 	bl	800dc6e <u8g_InitComFn>
  u8g_Begin(&u8g);
 8001012:	48ad      	ldr	r0, [pc, #692]	; (80012c8 <main+0x324>)
 8001014:	f00c fe14 	bl	800dc40 <u8g_Begin>
  while (1)
  {
	  // Code par defaut : ---------------------------

	  //démarrage de la conversion ADC des 3 canaux
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 8001018:	2203      	movs	r2, #3
 800101a:	49ac      	ldr	r1, [pc, #688]	; (80012cc <main+0x328>)
 800101c:	48ac      	ldr	r0, [pc, #688]	; (80012d0 <main+0x32c>)
 800101e:	f001 fb41 	bl	80026a4 <HAL_ADC_Start_DMA>

	  //lecture des boutons
	  bp2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001022:	2101      	movs	r1, #1
 8001024:	48ab      	ldr	r0, [pc, #684]	; (80012d4 <main+0x330>)
 8001026:	f002 fd8d 	bl	8003b44 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48

	  //détection front descendant sur bp2
	  if((bp2 == BP_ENFONCE) && (bp2_old == BP_RELACHE))
 800102e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001030:	2b00      	cmp	r3, #0
 8001032:	d110      	bne.n	8001056 <main+0xb2>
 8001034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10d      	bne.n	8001056 <main+0xb2>
	  {
		  //changement d'état de la Led4
		  HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TxBuffer, SPI_RxBuffer, 6);
 800103a:	2306      	movs	r3, #6
 800103c:	4aa6      	ldr	r2, [pc, #664]	; (80012d8 <main+0x334>)
 800103e:	49a7      	ldr	r1, [pc, #668]	; (80012dc <main+0x338>)
 8001040:	48a7      	ldr	r0, [pc, #668]	; (80012e0 <main+0x33c>)
 8001042:	f006 fd5d 	bl	8007b00 <HAL_SPI_TransmitReceive_IT>
		  //HAL_SPI_Receive_IT(&hspi3, SPI_RxBuffer, 6);
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f002 fdaa 	bl	8003ba4 <HAL_GPIO_TogglePin>
		  SPIActive = 1;
 8001050:	4ba4      	ldr	r3, [pc, #656]	; (80012e4 <main+0x340>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
	  }
	  //lecture ultrason
		donnees_Tx_i2c[0]=0x02;
 8001056:	2302      	movs	r3, #2
 8001058:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800105c:	bf00      	nop
 800105e:	48a2      	ldr	r0, [pc, #648]	; (80012e8 <main+0x344>)
 8001060:	f003 f948 	bl	80042f4 <HAL_I2C_GetState>
 8001064:	4603      	mov	r3, r0
 8001066:	2b20      	cmp	r3, #32
 8001068:	d1f9      	bne.n	800105e <main+0xba>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 1, 1000);
 800106a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	21e0      	movs	r1, #224	; 0xe0
 8001078:	489b      	ldr	r0, [pc, #620]	; (80012e8 <main+0x344>)
 800107a:	f002 fe3d 	bl	8003cf8 <HAL_I2C_Master_Transmit>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800107e:	bf00      	nop
 8001080:	4899      	ldr	r0, [pc, #612]	; (80012e8 <main+0x344>)
 8001082:	f003 f937 	bl	80042f4 <HAL_I2C_GetState>
 8001086:	4603      	mov	r3, r0
 8001088:	2b20      	cmp	r3, #32
 800108a:	d1f9      	bne.n	8001080 <main+0xdc>
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 2, 1);
 800108c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001090:	2301      	movs	r3, #1
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	21e0      	movs	r1, #224	; 0xe0
 8001098:	4893      	ldr	r0, [pc, #588]	; (80012e8 <main+0x344>)
 800109a:	f002 ff21 	bl	8003ee0 <HAL_I2C_Master_Receive>
		distance_US = (uint16_t)(donnees_Rx_i2c[0]<<8) + donnees_Rx_i2c[1];
 800109e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b8d      	ldr	r3, [pc, #564]	; (80012ec <main+0x348>)
 80010b6:	801a      	strh	r2, [r3, #0]

	  roll = bno055_lecture_16bits(EULER_ROLL_16bits);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f7ff fb6f 	bl	800079c <bno055_lecture_16bits>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b8b      	ldr	r3, [pc, #556]	; (80012f0 <main+0x34c>)
 80010c4:	801a      	strh	r2, [r3, #0]
	  temp = bno055_lecture_8bits(TEMPERATURE_8bits);
 80010c6:	2034      	movs	r0, #52	; 0x34
 80010c8:	f7ff fba0 	bl	800080c <bno055_lecture_8bits>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <main+0x350>)
 80010d2:	701a      	strb	r2, [r3, #0]

	  // si il n'y a pas eu de lecture de la vitesse récemment
	  if(drapeau==0)
 80010d4:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <main+0x354>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d106      	bne.n	80010ea <main+0x146>
	  {
		  vitesse_mesuree_mm_s = 0;
 80010dc:	4b87      	ldr	r3, [pc, #540]	; (80012fc <main+0x358>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
		  vitesse_mesuree_m_s = 0;
 80010e2:	4b87      	ldr	r3, [pc, #540]	; (8001300 <main+0x35c>)
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
	  }
	  drapeau = 0;
 80010ea:	4b83      	ldr	r3, [pc, #524]	; (80012f8 <main+0x354>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

	  u8g_FirstPage(&u8g);
 80010f0:	4875      	ldr	r0, [pc, #468]	; (80012c8 <main+0x324>)
 80010f2:	f00c fdd4 	bl	800dc9e <u8g_FirstPage>
		do {
			u8g_SetFont(&u8g, u8g_font_profont12);
 80010f6:	4983      	ldr	r1, [pc, #524]	; (8001304 <main+0x360>)
 80010f8:	4873      	ldr	r0, [pc, #460]	; (80012c8 <main+0x324>)
 80010fa:	f00c fc4d 	bl	800d998 <u8g_SetFont>
			sprintf(text,"vitesse %5u mm/s", (unsigned int)vitesse_mesuree_mm_s);
 80010fe:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <main+0x358>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4980      	ldr	r1, [pc, #512]	; (8001308 <main+0x364>)
 8001106:	4618      	mov	r0, r3
 8001108:	f00f faa2 	bl	8010650 <siprintf>
			u8g_DrawStr(&u8g, 0, 12,  text);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	220c      	movs	r2, #12
 8001110:	2100      	movs	r1, #0
 8001112:	486d      	ldr	r0, [pc, #436]	; (80012c8 <main+0x324>)
 8001114:	f00c fb7a 	bl	800d80c <u8g_DrawStr>
			sprintf(text,"roulis_RAW : %5d", roll);
 8001118:	4b75      	ldr	r3, [pc, #468]	; (80012f0 <main+0x34c>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	461a      	mov	r2, r3
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	497a      	ldr	r1, [pc, #488]	; (800130c <main+0x368>)
 8001124:	4618      	mov	r0, r3
 8001126:	f00f fa93 	bl	8010650 <siprintf>
			u8g_DrawStr(&u8g, 0, 24,  text);
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2218      	movs	r2, #24
 800112e:	2100      	movs	r1, #0
 8001130:	4865      	ldr	r0, [pc, #404]	; (80012c8 <main+0x324>)
 8001132:	f00c fb6b 	bl	800d80c <u8g_DrawStr>
			sprintf(text,"dist_US : %5d cm", distance_US);
 8001136:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <main+0x348>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	461a      	mov	r2, r3
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4973      	ldr	r1, [pc, #460]	; (8001310 <main+0x36c>)
 8001142:	4618      	mov	r0, r3
 8001144:	f00f fa84 	bl	8010650 <siprintf>
			u8g_DrawStr(&u8g, 0, 36,  text);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	2100      	movs	r1, #0
 800114e:	485e      	ldr	r0, [pc, #376]	; (80012c8 <main+0x324>)
 8001150:	f00c fb5c 	bl	800d80c <u8g_DrawStr>
			if (SPIActive)
 8001154:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <main+0x340>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d028      	beq.n	80011ae <main+0x20a>
			{
				sprintf(text,"Receive %x %x %x", SPI_RxBuffer[0], SPI_RxBuffer[1], SPI_RxBuffer[2]);
 800115c:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <main+0x334>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <main+0x334>)
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	4619      	mov	r1, r3
 8001168:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <main+0x334>)
 800116a:	789b      	ldrb	r3, [r3, #2]
 800116c:	1d38      	adds	r0, r7, #4
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	4968      	ldr	r1, [pc, #416]	; (8001314 <main+0x370>)
 8001174:	f00f fa6c 	bl	8010650 <siprintf>
				u8g_DrawStr(&u8g, 0, 48,  text);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4852      	ldr	r0, [pc, #328]	; (80012c8 <main+0x324>)
 8001180:	f00c fb44 	bl	800d80c <u8g_DrawStr>
				sprintf(text,"  SPI : %x %x %x", SPI_RxBuffer[3], SPI_RxBuffer[4], SPI_RxBuffer[5]);
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <main+0x334>)
 8001186:	78db      	ldrb	r3, [r3, #3]
 8001188:	461a      	mov	r2, r3
 800118a:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <main+0x334>)
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	4619      	mov	r1, r3
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <main+0x334>)
 8001192:	795b      	ldrb	r3, [r3, #5]
 8001194:	1d38      	adds	r0, r7, #4
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	495f      	ldr	r1, [pc, #380]	; (8001318 <main+0x374>)
 800119c:	f00f fa58 	bl	8010650 <siprintf>
				u8g_DrawStr(&u8g, 0, 60,  text);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	223c      	movs	r2, #60	; 0x3c
 80011a4:	2100      	movs	r1, #0
 80011a6:	4848      	ldr	r0, [pc, #288]	; (80012c8 <main+0x324>)
 80011a8:	f00c fb30 	bl	800d80c <u8g_DrawStr>
 80011ac:	e015      	b.n	80011da <main+0x236>
			}
			else
			{
				sprintf(text,"  Press BP2 to  ");
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	495a      	ldr	r1, [pc, #360]	; (800131c <main+0x378>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00f fa4c 	bl	8010650 <siprintf>
				u8g_DrawStr(&u8g, 0, 48,  text);
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4842      	ldr	r0, [pc, #264]	; (80012c8 <main+0x324>)
 80011c0:	f00c fb24 	bl	800d80c <u8g_DrawStr>
				sprintf(text,"  activate SPI  ");
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4956      	ldr	r1, [pc, #344]	; (8001320 <main+0x37c>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00f fa41 	bl	8010650 <siprintf>
				u8g_DrawStr(&u8g, 0, 60,  text);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	223c      	movs	r2, #60	; 0x3c
 80011d2:	2100      	movs	r1, #0
 80011d4:	483c      	ldr	r0, [pc, #240]	; (80012c8 <main+0x324>)
 80011d6:	f00c fb19 	bl	800d80c <u8g_DrawStr>
			}
			//sprintf(text,"telem_g_RAW : %5u", (unsigned int)lectures_ADC[0]);
			//u8g_DrawStr(&u8g, 0, 48,  text);
			//sprintf(text,"telem_d_RAW : %5u", (unsigned int)lectures_ADC[1]);
			//u8g_DrawStr(&u8g, 0, 60,  text);
		} while (u8g_NextPage(&u8g));
 80011da:	483b      	ldr	r0, [pc, #236]	; (80012c8 <main+0x324>)
 80011dc:	f00c fd6d 	bl	800dcba <u8g_NextPage>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d187      	bne.n	80010f6 <main+0x152>

	  //Demande de lecture ultrason
	  donnees_Tx_i2c[0]=0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	  donnees_Tx_i2c[1]=0x51;
 80011ec:	2351      	movs	r3, #81	; 0x51
 80011ee:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80011f2:	bf00      	nop
 80011f4:	483c      	ldr	r0, [pc, #240]	; (80012e8 <main+0x344>)
 80011f6:	f003 f87d 	bl	80042f4 <HAL_I2C_GetState>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d1f9      	bne.n	80011f4 <main+0x250>
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000);
 8001200:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	21e0      	movs	r1, #224	; 0xe0
 800120e:	4836      	ldr	r0, [pc, #216]	; (80012e8 <main+0x344>)
 8001210:	f002 fd72 	bl	8003cf8 <HAL_I2C_Master_Transmit>

	  SPI_TxBuffer[0] = (char)distance_US;
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <main+0x348>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <main+0x338>)
 800121e:	701a      	strb	r2, [r3, #0]
	  SPI_TxBuffer[1] = (char)distance_US;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <main+0x348>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <main+0x338>)
 800122a:	705a      	strb	r2, [r3, #1]
	  SPI_TxBuffer[2] = (char)distance_US;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <main+0x348>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <main+0x338>)
 8001236:	709a      	strb	r2, [r3, #2]
	  SPI_TxBuffer[3] = (char)0xFF;
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <main+0x338>)
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	70da      	strb	r2, [r3, #3]
	  SPI_TxBuffer[4] = (char)vitesse_mesuree_mm_s/100;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <main+0x358>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4a37      	ldr	r2, [pc, #220]	; (8001324 <main+0x380>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <main+0x338>)
 8001250:	711a      	strb	r2, [r3, #4]
	  SPI_TxBuffer[5] = (char)vitesse_mesuree_mm_s-(vitesse_mesuree_mm_s/100)*100;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <main+0x358>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <main+0x358>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4931      	ldr	r1, [pc, #196]	; (8001324 <main+0x380>)
 800125e:	fba1 1303 	umull	r1, r3, r1, r3
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	0089      	lsls	r1, r1, #2
 800126a:	440b      	add	r3, r1
 800126c:	4619      	mov	r1, r3
 800126e:	0088      	lsls	r0, r1, #2
 8001270:	4619      	mov	r1, r3
 8001272:	4603      	mov	r3, r0
 8001274:	440b      	add	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <main+0x338>)
 8001280:	715a      	strb	r2, [r3, #5]

	  // DELAI
	  HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f000 fe4a 	bl	8001f1c <HAL_Delay>
	  // USB Transmitter
	  CDC_Transmit_FS((uint8_t*)SPI_TxBuffer,6);
 8001288:	2106      	movs	r1, #6
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <main+0x338>)
 800128c:	f00e fcf0 	bl	800fc70 <CDC_Transmit_FS>

	  if (SPIFlag)
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <main+0x384>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <main+0x304>
	  {
		  // Illustrateur
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f002 fc81 	bl	8003ba4 <HAL_GPIO_TogglePin>
		  SPIFlag = 0;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <main+0x384>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
		  //HAL_SPI_Receive_IT(&hspi3, SPI_TxBuffer, 6);
	  }


	  //attente de la fin de la conversion ADC, si jamais ce n'est pas encore fini
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <main+0x32c>)
 80012ac:	f001 f96a 	bl	8002584 <HAL_ADC_PollForConversion>

	  //sauvegarde des valeurs de bp1 et bp2 pour la détection des fronts
	  bp2_old = bp2;
 80012b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 80012b4:	e6b0      	b.n	8001018 <main+0x74>
 80012b6:	bf00      	nop
 80012b8:	200004a4 	.word	0x200004a4
 80012bc:	20000458 	.word	0x20000458
 80012c0:	08000eed 	.word	0x08000eed
 80012c4:	20000024 	.word	0x20000024
 80012c8:	20000344 	.word	0x20000344
 80012cc:	20000328 	.word	0x20000328
 80012d0:	20000220 	.word	0x20000220
 80012d4:	48000400 	.word	0x48000400
 80012d8:	20000334 	.word	0x20000334
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200003f0 	.word	0x200003f0
 80012e4:	20000388 	.word	0x20000388
 80012e8:	200002cc 	.word	0x200002cc
 80012ec:	2000033c 	.word	0x2000033c
 80012f0:	2000033a 	.word	0x2000033a
 80012f4:	2000033e 	.word	0x2000033e
 80012f8:	20000340 	.word	0x20000340
 80012fc:	20000324 	.word	0x20000324
 8001300:	20000320 	.word	0x20000320
 8001304:	08011114 	.word	0x08011114
 8001308:	08010fb0 	.word	0x08010fb0
 800130c:	08010fc4 	.word	0x08010fc4
 8001310:	08010fd8 	.word	0x08010fd8
 8001314:	08010fec 	.word	0x08010fec
 8001318:	08011000 	.word	0x08011000
 800131c:	08011014 	.word	0x08011014
 8001320:	08011028 	.word	0x08011028
 8001324:	51eb851f 	.word	0x51eb851f
 8001328:	20000384 	.word	0x20000384

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b096      	sub	sp, #88	; 0x58
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2244      	movs	r2, #68	; 0x44
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00f f9a8 	bl	8010690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800134e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001352:	f005 f8eb 	bl	800652c <HAL_PWREx_ControlVoltageScaling>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800135c:	f000 f960 	bl	8001620 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001360:	f005 f8c6 	bl	80064f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <SystemClock_Config+0xc4>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xc4>)
 800136c:	f023 0318 	bic.w	r3, r3, #24
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8001374:	2334      	movs	r3, #52	; 0x34
 8001376:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001390:	2301      	movs	r3, #1
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001398:	2310      	movs	r3, #16
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800139c:	2307      	movs	r3, #7
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 f923 	bl	80065f8 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013b8:	f000 f932 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2303      	movs	r3, #3
 80013c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fd23 	bl	8006e20 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013e0:	f000 f91e 	bl	8001620 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013e4:	f006 f936 	bl	8007654 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013e8:	bf00      	nop
 80013ea:	3758      	adds	r7, #88	; 0x58
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	static uint32_t mesure_precedente_us=0, mesure_us, indice=0, i;
	static uint32_t tableau_intervalles_us[16]={};
	static float coefficient_distance_par_intervalle_us = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0;
	static uint32_t somme_intervalles_us = 0;
	uint32_t nb_intervalles=0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f002 fbb4 	bl	8003b74 <HAL_GPIO_WritePin>
	mesure_us = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1); // ou TIM2->CCR1
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001414:	6013      	str	r3, [r2, #0]
	if((mesure_us-mesure_precedente_us) >= 300) //si mesure cohérente (pas un glitch):
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x164>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001424:	f0c0 808f 	bcc.w	8001546 <HAL_TIM_IC_CaptureCallback+0x152>
	{
		if((mesure_us > (mesure_precedente_us+100000)) || ((mesure_us-100000) > mesure_precedente_us)) //cas d'un nouveau départ
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x164>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001430:	33a0      	adds	r3, #160	; 0xa0
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	4293      	cmp	r3, r2
 8001438:	d308      	bcc.n	800144c <HAL_TIM_IC_CaptureCallback+0x58>
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001442:	3ba0      	subs	r3, #160	; 0xa0
 8001444:	4a44      	ldr	r2, [pc, #272]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4293      	cmp	r3, r2
 800144a:	d916      	bls.n	800147a <HAL_TIM_IC_CaptureCallback+0x86>
		{
			for(indice=0;indice<16;indice++)
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e00a      	b.n	800146a <HAL_TIM_IC_CaptureCallback+0x76>
			{
				tableau_intervalles_us[indice] = 0;
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a41      	ldr	r2, [pc, #260]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800145a:	2100      	movs	r1, #0
 800145c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(indice=0;indice<16;indice++)
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a3d      	ldr	r2, [pc, #244]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b3c      	ldr	r3, [pc, #240]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	d9f0      	bls.n	8001454 <HAL_TIM_IC_CaptureCallback+0x60>
			}
			indice=0;
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e061      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x14a>
		}
		else //cas où on tourne depuis plus d'un intervalle
		{
			drapeau = 1;
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x170>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
			tableau_intervalles_us[indice] = mesure_us - mesure_precedente_us; //on sauvegarde la nouvelle mesure dans le tableau
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1a8a      	subs	r2, r1, r2
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//On fait une moyenne sur 10 ms au plus ou 16 valeurs.
			somme_intervalles_us = 0;
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
			i= indice;
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <HAL_TIM_IC_CaptureCallback+0x178>)
 80014a0:	6013      	str	r3, [r2, #0]
			do{
				if(tableau_intervalles_us[i]==0)
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <HAL_TIM_IC_CaptureCallback+0x178>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01c      	beq.n	80014ea <HAL_TIM_IC_CaptureCallback+0xf6>
						break;
				somme_intervalles_us += tableau_intervalles_us[i];
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_TIM_IC_CaptureCallback+0x178>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80014b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x174>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x174>)
 80014c2:	6013      	str	r3, [r2, #0]
				i = (i - 1)%16;
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_TIM_IC_CaptureCallback+0x178>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_TIM_IC_CaptureCallback+0x178>)
 80014d0:	6013      	str	r3, [r2, #0]
				nb_intervalles++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
			}while ((somme_intervalles_us<100000) && (nb_intervalles < 16));
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x174>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d804      	bhi.n	80014ec <HAL_TIM_IC_CaptureCallback+0xf8>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d9dc      	bls.n	80014a2 <HAL_TIM_IC_CaptureCallback+0xae>
 80014e8:	e000      	b.n	80014ec <HAL_TIM_IC_CaptureCallback+0xf8>
						break;
 80014ea:	bf00      	nop
			indice = (indice+1)%16; // on incrémente l'indice avec retour à 0 pour indice = 16
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a19      	ldr	r2, [pc, #100]	; (800155c <HAL_TIM_IC_CaptureCallback+0x168>)
 80014f8:	6013      	str	r3, [r2, #0]
			vitesse_mesuree_m_s = coefficient_distance_par_intervalle_us * nb_intervalles / somme_intervalles_us;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001520:	edc3 7a00 	vstr	s15, [r3]
			vitesse_mesuree_mm_s = 1000*vitesse_mesuree_m_s;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800157c <HAL_TIM_IC_CaptureCallback+0x188>
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001536:	ee17 2a90 	vmov	r2, s15
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800153c:	601a      	str	r2, [r3, #0]
		}
		mesure_precedente_us = mesure_us;
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001544:	6013      	str	r3, [r2, #0]
	}
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200004a4 	.word	0x200004a4
 8001554:	2000039c 	.word	0x2000039c
 8001558:	200003a0 	.word	0x200003a0
 800155c:	200003a4 	.word	0x200003a4
 8001560:	200003a8 	.word	0x200003a8
 8001564:	20000340 	.word	0x20000340
 8001568:	200003e8 	.word	0x200003e8
 800156c:	200003ec 	.word	0x200003ec
 8001570:	0001869f 	.word	0x0001869f
 8001574:	20000008 	.word	0x20000008
 8001578:	20000320 	.word	0x20000320
 800157c:	447a0000 	.word	0x447a0000
 8001580:	20000324 	.word	0x20000324

08001584 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800158c:	2102      	movs	r1, #2
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001590:	f002 fb08 	bl	8003ba4 <HAL_GPIO_TogglePin>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48000400 	.word	0x48000400

080015a0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if (HAL_SPI_Receive_IT(&hspi3, SPI_RxBuffer, 6) != HAL_OK)
 80015a8:	2206      	movs	r2, #6
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <HAL_SPI_RxCpltCallback+0x2c>)
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_SPI_RxCpltCallback+0x30>)
 80015ae:	f006 f9f7 	bl	80079a0 <HAL_SPI_Receive_IT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_SPI_RxCpltCallback+0x1e>
	{
		errorFlag = 99;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_SPI_RxCpltCallback+0x34>)
 80015ba:	2263      	movs	r2, #99	; 0x63
 80015bc:	601a      	str	r2, [r3, #0]
    }
	SPIFlag = 1;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_SPI_RxCpltCallback+0x38>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000334 	.word	0x20000334
 80015d0:	200003f0 	.word	0x200003f0
 80015d4:	20000380 	.word	0x20000380
 80015d8:	20000384 	.word	0x20000384

080015dc <HAL_SPI_TxRxCpltCallback>:
	SPIFlag = 1;
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TxBuffer, SPI_RxBuffer, 6) != HAL_OK)
 80015e4:	2306      	movs	r3, #6
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_SPI_TxRxCpltCallback+0x30>)
 80015e8:	4909      	ldr	r1, [pc, #36]	; (8001610 <HAL_SPI_TxRxCpltCallback+0x34>)
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <HAL_SPI_TxRxCpltCallback+0x38>)
 80015ec:	f006 fa88 	bl	8007b00 <HAL_SPI_TransmitReceive_IT>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_SPI_TxRxCpltCallback+0x20>
	{
		errorFlag = 99;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80015f8:	2263      	movs	r2, #99	; 0x63
 80015fa:	601a      	str	r2, [r3, #0]
    }
	SPIFlag = 1;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_SPI_TxRxCpltCallback+0x40>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000334 	.word	0x20000334
 8001610:	20000000 	.word	0x20000000
 8001614:	200003f0 	.word	0x200003f0
 8001618:	20000380 	.word	0x20000380
 800161c:	20000384 	.word	0x20000384

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <MX_SPI3_Init+0x70>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI3_Init+0x6c>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001644:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001648:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_SPI3_Init+0x6c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_SPI3_Init+0x6c>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001672:	2207      	movs	r2, #7
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI3_Init+0x6c>)
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_SPI3_Init+0x6c>)
 8001684:	f006 f8e8 	bl	8007858 <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 800168e:	f7ff ffc7 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200003f0 	.word	0x200003f0
 800169c:	40003c00 	.word	0x40003c00

080016a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_SPI_MspInit+0x8c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12f      	bne.n	8001722 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_SPI_MspInit+0x90>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016f2:	2338      	movs	r3, #56	; 0x38
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001702:	2306      	movs	r3, #6
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <HAL_SPI_MspInit+0x94>)
 800170e:	f002 f8af 	bl	8003870 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2033      	movs	r0, #51	; 0x33
 8001718:	f001 fe3b 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800171c:	2033      	movs	r0, #51	; 0x33
 800171e:	f001 fe54 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40003c00 	.word	0x40003c00
 8001730:	40021000 	.word	0x40021000
 8001734:	48000400 	.word	0x48000400

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 fb86 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA1_Channel1_IRQHandler+0x10>)
 80017da:	f001 ff6a 	bl	80036b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000284 	.word	0x20000284

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f007 fa7b 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200004a4 	.word	0x200004a4

080017fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <SPI3_IRQHandler+0x10>)
 8001802:	f006 fa2d 	bl	8007c60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003f0 	.word	0x200003f0

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM6_DAC_IRQHandler+0x10>)
 8001816:	f007 fa67 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200004f0 	.word	0x200004f0

08001824 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <USB_IRQHandler+0x10>)
 800182a:	f003 fa0d 	bl	8004c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20001318 	.word	0x20001318

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f00e ff1a 	bl	80106a0 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20010000 	.word	0x20010000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000454 	.word	0x20000454
 80018a0:	20001980 	.word	0x20001980

080018a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09a      	sub	sp, #104	; 0x68
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	222c      	movs	r2, #44	; 0x2c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f00e fec4 	bl	8010690 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <MX_TIM1_Init+0x154>)
 800190a:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <MX_TIM1_Init+0x158>)
 800190c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001910:	221f      	movs	r2, #31
 8001912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <MX_TIM1_Init+0x154>)
 800191c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <MX_TIM1_Init+0x154>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001934:	4839      	ldr	r0, [pc, #228]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001936:	f006 fe2d 	bl	8008594 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001940:	f7ff fe6e 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194e:	4619      	mov	r1, r3
 8001950:	4832      	ldr	r0, [pc, #200]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001952:	f007 fc99 	bl	8009288 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800195c:	f7ff fe60 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001960:	482e      	ldr	r0, [pc, #184]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001962:	f006 fef2 	bl	800874a <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800196c:	f7ff fe58 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001980:	4619      	mov	r1, r3
 8001982:	4826      	ldr	r0, [pc, #152]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001984:	f008 fa16 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800198e:	f7ff fe47 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8001996:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM1_Init+0x154>)
 80019ba:	f007 fb51 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019c4:	f7ff fe2c 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM1_Init+0x154>)
 80019fe:	f008 fa3f 	bl	8009e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a08:	f7ff fe0a 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM1_Init+0x154>)
 8001a0e:	f000 f927 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001a12:	bf00      	nop
 8001a14:	3768      	adds	r7, #104	; 0x68
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000458 	.word	0x20000458
 8001a20:	40012c00 	.word	0x40012c00

08001a24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a66:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a78:	4821      	ldr	r0, [pc, #132]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a7a:	f006 fd8b 	bl	8008594 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001a84:	f7ff fdcc 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4619      	mov	r1, r3
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001a96:	f007 fbf7 	bl	8009288 <HAL_TIM_ConfigClockSource>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001aa0:	f7ff fdbe 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001aa4:	4816      	ldr	r0, [pc, #88]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001aa6:	f006 ff8f 	bl	80089c8 <HAL_TIM_IC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ab0:	f7ff fdb6 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480f      	ldr	r0, [pc, #60]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001ac4:	f008 f976 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001ace:	f7ff fda7 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_TIM2_Init+0xdc>)
 8001aea:	f007 fa1c 	bl	8008f26 <HAL_TIM_IC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001af4:	f7ff fd94 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200004a4 	.word	0x200004a4

08001b04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_TIM6_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2272;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b28:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 8001b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b36:	f006 fd2d 	bl	8008594 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b40:	f7ff fd6e 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b52:	f008 f92f 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b5c:	f7ff fd60 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200004f0 	.word	0x200004f0
 8001b6c:	40001000 	.word	0x40001000

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_TIM_Base_MspInit+0xe4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001baa:	e04f      	b.n	8001c4c <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d131      	bne.n	8001c1a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c04:	f001 fe34 	bl	8003870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	201c      	movs	r0, #28
 8001c0e:	f001 fbc0 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c12:	201c      	movs	r0, #28
 8001c14:	f001 fbd9 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 8001c18:	e018      	b.n	8001c4c <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_TIM_Base_MspInit+0xec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d113      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_TIM_Base_MspInit+0xe8>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2036      	movs	r0, #54	; 0x36
 8001c42:	f001 fba6 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c46:	2036      	movs	r0, #54	; 0x36
 8001c48:	f001 fbbf 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40001000 	.word	0x40001000

08001c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_TIM_MspPostInit+0x68>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin;
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PROPULSION_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f001 fdd9 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <MX_USART1_UART_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART1_UART_Init+0x58>)
 8001d14:	f008 f94a 	bl	8009fac <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fc7f 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000053c 	.word	0x2000053c
 8001d2c:	40013800 	.word	0x40013800

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09e      	sub	sp, #120	; 0x78
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	2254      	movs	r2, #84	; 0x54
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00e fc9d 	bl	8010690 <memset>
  if(uartHandle->Instance==USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d137      	bne.n	8001dd0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fa7b 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d78:	f7ff fc52 	bl	8001620 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	6613      	str	r3, [r2, #96]	; 0x60
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001db0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dcc:	f001 fd50 	bl	8003870 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3778      	adds	r7, #120	; 0x78
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40021000 	.word	0x40021000

08001de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de4:	f7ff fd5e 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	; (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f00e fc4d 	bl	80106ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e12:	f7ff f8c7 	bl	8000fa4 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001e24:	08011cb4 	.word	0x08011cb4
  ldr r2, =_sbss
 8001e28:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001e2c:	2000197c 	.word	0x2000197c

08001e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_IRQHandler>

08001e32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f001 fa9d 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f80e 	bl	8001e64 <HAL_InitTick>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e001      	b.n	8001e58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e54:	f7ff fc70 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e58:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_InitTick+0x6c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_InitTick+0x70>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x6c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 faa9 	bl	80033e6 <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d809      	bhi.n	8001eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f001 fa73 	bl	8003392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_InitTick+0x74>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e007      	b.n	8001ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e004      	b.n	8001ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e001      	b.n	8001ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000014 	.word	0x20000014
 8001ed4:	2000000c 	.word	0x2000000c
 8001ed8:	20000010 	.word	0x20000010

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000014 	.word	0x20000014
 8001f00:	200005c0 	.word	0x200005c0

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200005c0 	.word	0x200005c0

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_Delay+0x44>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000014 	.word	0x20000014

08001f64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3360      	adds	r3, #96	; 0x60
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <LL_ADC_SetOffset+0x44>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	03fff000 	.word	0x03fff000

08002014 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3360      	adds	r3, #96	; 0x60
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3360      	adds	r3, #96	; 0x60
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3330      	adds	r3, #48	; 0x30
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	4413      	add	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	211f      	movs	r1, #31
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	f003 011f 	and.w	r1, r3, #31
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3314      	adds	r3, #20
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	0e5b      	lsrs	r3, r3, #25
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0d1b      	lsrs	r3, r3, #20
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2107      	movs	r1, #7
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0d1b      	lsrs	r3, r3, #20
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0318 	and.w	r3, r3, #24
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002170:	40d9      	lsrs	r1, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	400b      	ands	r3, r1
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	431a      	orrs	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0007ffff 	.word	0x0007ffff

08002194 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6093      	str	r3, [r2, #8]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d101      	bne.n	80021d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800221c:	d101      	bne.n	8002222 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <LL_ADC_IsEnabled+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_IsEnabled+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800228e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d101      	bne.n	80022be <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d101      	bne.n	80022e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e12c      	b.n	8002568 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fbc3 	bl	8000aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff3f 	bl	80021b8 <LL_ADC_IsDeepPowerDownEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff25 	bl	8002194 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff5a 	bl	8002208 <LL_ADC_IsInternalRegulatorEnabled>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff3e 	bl	80021e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002364:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_ADC_Init+0x27c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	4a82      	ldr	r2, [pc, #520]	; (8002574 <HAL_ADC_Init+0x280>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	3301      	adds	r3, #1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002378:	e002      	b.n	8002380 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff3c 	bl	8002208 <LL_ADC_IsInternalRegulatorEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff75 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80c5 	bne.w	8002556 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 80c1 	bne.w	8002556 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f4:	4860      	ldr	r0, [pc, #384]	; (8002578 <HAL_ADC_Init+0x284>)
 80023f6:	f7ff ff2f 	bl	8002258 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4619      	mov	r1, r3
 8002406:	485d      	ldr	r0, [pc, #372]	; (800257c <HAL_ADC_Init+0x288>)
 8002408:	f7ff fdac 	bl	8001f64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e5b      	ldrb	r3, [r3, #25]
 8002410:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002416:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800241c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002422:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d106      	bne.n	8002448 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	3b01      	subs	r3, #1
 8002440:	045b      	lsls	r3, r3, #17
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <HAL_ADC_Init+0x28c>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	430b      	orrs	r3, r1
 8002476:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff12 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 8002482:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff1f 	bl	80022cc <LL_ADC_INJ_IsConversionOngoing>
 800248e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d13d      	bne.n	8002512 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d13a      	bne.n	8002512 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b8:	f023 0302 	bic.w	r3, r3, #2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	69b9      	ldr	r1, [r7, #24]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d118      	bne.n	8002502 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024f2:	430a      	orrs	r2, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	e007      	b.n	8002512 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10c      	bne.n	8002534 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f023 010f 	bic.w	r1, r3, #15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
 8002532:	e007      	b.n	8002544 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020f 	bic.w	r2, r2, #15
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f023 0303 	bic.w	r3, r3, #3
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000000c 	.word	0x2000000c
 8002574:	053e2d63 	.word	0x053e2d63
 8002578:	50040000 	.word	0x50040000
 800257c:	50040300 	.word	0x50040300
 8002580:	fff0c007 	.word	0xfff0c007

08002584 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d102      	bne.n	800259c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002596:	2308      	movs	r3, #8
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e010      	b.n	80025be <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80025ba:	2304      	movs	r3, #4
 80025bc:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025be:	f7ff fca1 	bl	8001f04 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025c4:	e021      	b.n	800260a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d01d      	beq.n	800260a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025ce:	f7ff fc99 	bl	8001f04 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <HAL_ADC_PollForConversion+0x60>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d112      	bne.n	800260a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f043 0204 	orr.w	r2, r3, #4
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e047      	b.n	800269a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0d6      	beq.n	80025c6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fd24 	bl	8002076 <LL_ADC_REG_IsTriggerSourceSWStart>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e5b      	ldrb	r3, [r3, #25]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d118      	bne.n	800266e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d111      	bne.n	800266e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d104      	bne.n	8002686 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2208      	movs	r2, #8
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e008      	b.n	8002698 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	220c      	movs	r2, #12
 8002696:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fdf6 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d167      	bne.n	8002790 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Start_DMA+0x2a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e063      	b.n	8002796 <HAL_ADC_Start_DMA+0xf2>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc66 	bl	8002fa8 <ADC_Enable>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d14f      	bne.n	8002786 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f023 0206 	bic.w	r2, r3, #6
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58
 8002712:	e002      	b.n	800271a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HAL_ADC_Start_DMA+0xfc>)
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_ADC_Start_DMA+0x100>)
 8002728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_ADC_Start_DMA+0x104>)
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	221c      	movs	r2, #28
 8002738:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0210 	orr.w	r2, r2, #16
 8002750:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3340      	adds	r3, #64	; 0x40
 800276c:	4619      	mov	r1, r3
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f000 fefd 	bl	8003570 <HAL_DMA_Start_IT>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fd7d 	bl	800227e <LL_ADC_REG_StartConversion>
 8002784:	e006      	b.n	8002794 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800278e:	e001      	b.n	8002794 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002794:	7dfb      	ldrb	r3, [r7, #23]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	080030b5 	.word	0x080030b5
 80027a4:	0800318d 	.word	0x0800318d
 80027a8:	080031a9 	.word	0x080031a9

080027ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b6      	sub	sp, #216	; 0xd8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22>
 8002806:	2302      	movs	r3, #2
 8002808:	e3b9      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x796>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fd45 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 839e 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3b02      	subs	r3, #2
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81b      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x86>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_ADC_ConfigChannel+0x54>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	605a      	str	r2, [r3, #4]
          break;
 8002852:	e010      	b.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2212      	movs	r2, #18
 8002858:	605a      	str	r2, [r3, #4]
          break;
 800285a:	e00c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2218      	movs	r2, #24
 8002860:	605a      	str	r2, [r3, #4]
          break;
 8002862:	e008      	b.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	605a      	str	r2, [r3, #4]
          break;
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2206      	movs	r2, #6
 8002872:	605a      	str	r2, [r3, #4]
          break;
 8002874:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	f7ff fc0a 	bl	800209c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fd0a 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 8002892:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fd16 	bl	80022cc <LL_ADC_INJ_IsConversionOngoing>
 80028a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 81a6 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 81a1 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f7ff fc15 	bl	80020f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00a      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6919      	ldr	r1, [r3, #16]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fc:	f7ff fb66 	bl	8001fcc <LL_ADC_SetOffset>
 8002900:	e17b      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fb83 	bl	8002014 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x146>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb78 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e01e      	b.n	800296c <HAL_ADC_ConfigChannel+0x184>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb6d 	bl	8002014 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e004      	b.n	800296a <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x19c>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	e018      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e004      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80029ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d106      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb3c 	bl	8002040 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fb20 	bl	8002014 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x20c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fb15 	bl	8002014 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x24a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb0a 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x262>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e018      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x294>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fad9 	bl	8002040 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fabd 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x2d2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fab2 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x310>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff faa7 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x328>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e016      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x356>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e004      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d106      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fa78 	bl	8002040 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2103      	movs	r1, #3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fa5c 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x394>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fa51 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 021f 	and.w	r2, r3, #31
 8002b7a:	e017      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3c4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2103      	movs	r1, #3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fa46 	bl	8002014 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b96:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e003      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3dc>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	e011      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x400>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fa23 	bl	8002040 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb2a 	bl	8002258 <LL_ADC_IsEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8140 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f7ff fa97 	bl	800214c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4a8f      	ldr	r2, [pc, #572]	; (8002e60 <HAL_ADC_ConfigChannel+0x678>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f040 8131 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x46a>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	bf94      	ite	ls
 8002c4a:	2301      	movls	r3, #1
 8002c4c:	2300      	movhi	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e019      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x49e>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d079      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4be>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	069b      	lsls	r3, r3, #26
 8002ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca4:	e015      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x4ea>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	069b      	lsls	r3, r3, #26
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x50a>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	e017      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x53a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	e003      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	ea42 0103 	orr.w	r1, r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x560>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	051b      	lsls	r3, r3, #20
 8002d46:	e018      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x592>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	e081      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x5b2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d98:	e015      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5de>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	069b      	lsls	r3, r3, #26
 8002dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x5fe>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	e017      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x62e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	61fb      	str	r3, [r7, #28]
  return result;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x65a>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	051b      	lsls	r3, r3, #20
 8002e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e40:	e01e      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x698>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	613b      	str	r3, [r7, #16]
  return result;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e006      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x684>
 8002e5e:	bf00      	nop
 8002e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	051b      	lsls	r3, r3, #20
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff f934 	bl	80020f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_ADC_ConfigChannel+0x7a0>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d06c      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	483c      	ldr	r0, [pc, #240]	; (8002f8c <HAL_ADC_ConfigChannel+0x7a4>)
 8002e9a:	f7ff f889 	bl	8001fb0 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d127      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d121      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <HAL_ADC_ConfigChannel+0x7ac>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d157      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eca:	4619      	mov	r1, r3
 8002ecc:	482f      	ldr	r0, [pc, #188]	; (8002f8c <HAL_ADC_ConfigChannel+0x7a4>)
 8002ece:	f7ff f85c 	bl	8001f8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_ADC_ConfigChannel+0x7b4>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002efa:	e03a      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d113      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x746>
 8002f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d12a      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f24:	4619      	mov	r1, r3
 8002f26:	4819      	ldr	r0, [pc, #100]	; (8002f8c <HAL_ADC_ConfigChannel+0x7a4>)
 8002f28:	f7ff f82f 	bl	8001f8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2c:	e021      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d11c      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d116      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d111      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f56:	4619      	mov	r1, r3
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <HAL_ADC_ConfigChannel+0x7a4>)
 8002f5a:	f7ff f816 	bl	8001f8a <LL_ADC_SetCommonPathInternalCh>
 8002f5e:	e008      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	37d8      	adds	r7, #216	; 0xd8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	80080000 	.word	0x80080000
 8002f8c:	50040300 	.word	0x50040300
 8002f90:	c7520000 	.word	0xc7520000
 8002f94:	50040000 	.word	0x50040000
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	053e2d63 	.word	0x053e2d63
 8002fa0:	cb840000 	.word	0xcb840000
 8002fa4:	80000001 	.word	0x80000001

08002fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f94d 	bl	8002258 <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d169      	bne.n	8003098 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <ADC_Enable+0xfc>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0210 	orr.w	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e055      	b.n	800309a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff f91c 	bl	8002230 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ff8:	482b      	ldr	r0, [pc, #172]	; (80030a8 <ADC_Enable+0x100>)
 8002ffa:	f7fe ffd9 	bl	8001fb0 <LL_ADC_GetCommonPathInternalCh>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <ADC_Enable+0x104>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <ADC_Enable+0x108>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003022:	e002      	b.n	800302a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3b01      	subs	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f9      	bne.n	8003024 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003030:	f7fe ff68 	bl	8001f04 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003036:	e028      	b.n	800308a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f90b 	bl	8002258 <LL_ADC_IsEnabled>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f8ef 	bl	8002230 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003052:	f7fe ff57 	bl	8001f04 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d914      	bls.n	800308a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d00d      	beq.n	800308a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e007      	b.n	800309a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d1cf      	bne.n	8003038 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	8000003f 	.word	0x8000003f
 80030a8:	50040300 	.word	0x50040300
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	053e2d63 	.word	0x053e2d63

080030b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d14b      	bne.n	8003166 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d021      	beq.n	800312c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe ffc2 	bl	8002076 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d032      	beq.n	800315e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d12b      	bne.n	800315e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11f      	bne.n	800315e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
 800312a:	e018      	b.n	800315e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d111      	bne.n	800315e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff fb24 	bl	80027ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003164:	e00e      	b.n	8003184 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff fb2e 	bl	80027d4 <HAL_ADC_ErrorCallback>
}
 8003178:	e004      	b.n	8003184 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fb10 	bl	80027c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fb00 	bl	80027d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff3e 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff8e 	bl	80032d0 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff31 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ffa2 	bl	8003338 <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e098      	b.n	8003544 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_DMA_Init+0x150>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d80f      	bhi.n	800343e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_DMA_Init+0x154>)
 8003426:	4413      	add	r3, r2
 8003428:	4a4b      	ldr	r2, [pc, #300]	; (8003558 <HAL_DMA_Init+0x158>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	009a      	lsls	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a48      	ldr	r2, [pc, #288]	; (800355c <HAL_DMA_Init+0x15c>)
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
 800343c:	e00e      	b.n	800345c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_DMA_Init+0x160>)
 8003446:	4413      	add	r3, r2
 8003448:	4a43      	ldr	r2, [pc, #268]	; (8003558 <HAL_DMA_Init+0x158>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a42      	ldr	r2, [pc, #264]	; (8003564 <HAL_DMA_Init+0x164>)
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b6:	d039      	beq.n	800352c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4a27      	ldr	r2, [pc, #156]	; (800355c <HAL_DMA_Init+0x15c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d11a      	bne.n	80034f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_DMA_Init+0x168>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 031c 	and.w	r3, r3, #28
 80034ce:	210f      	movs	r1, #15
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	4924      	ldr	r1, [pc, #144]	; (8003568 <HAL_DMA_Init+0x168>)
 80034d8:	4013      	ands	r3, r2
 80034da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_DMA_Init+0x168>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f003 031c 	and.w	r3, r3, #28
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	491d      	ldr	r1, [pc, #116]	; (8003568 <HAL_DMA_Init+0x168>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
 80034f6:	e019      	b.n	800352c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_DMA_Init+0x16c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f003 031c 	and.w	r3, r3, #28
 8003504:	210f      	movs	r1, #15
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_DMA_Init+0x16c>)
 800350e:	4013      	ands	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_DMA_Init+0x16c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f003 031c 	and.w	r3, r3, #28
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <HAL_DMA_Init+0x16c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40020407 	.word	0x40020407
 8003554:	bffdfff8 	.word	0xbffdfff8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020000 	.word	0x40020000
 8003560:	bffdfbf8 	.word	0xbffdfbf8
 8003564:	40020400 	.word	0x40020400
 8003568:	400200a8 	.word	0x400200a8
 800356c:	400204a8 	.word	0x400204a8

08003570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e04b      	b.n	8003628 <HAL_DMA_Start_IT+0xb8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d13a      	bne.n	800361a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f921 	bl	8003810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 020e 	orr.w	r2, r2, #14
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00f      	b.n	8003608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 020a 	orr.w	r2, r2, #10
 8003606:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e005      	b.n	8003626 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d005      	beq.n	8003654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2204      	movs	r2, #4
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e029      	b.n	80036a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020e 	bic.w	r2, r2, #14
 8003662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f003 021c 	and.w	r2, r3, #28
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
    }
  }
  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f003 031c 	and.w	r3, r3, #28
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d026      	beq.n	800372c <HAL_DMA_IRQHandler+0x7a>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d021      	beq.n	800372c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f003 021c 	and.w	r2, r3, #28
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2104      	movs	r1, #4
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d071      	beq.n	8003806 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800372a:	e06c      	b.n	8003806 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f003 031c 	and.w	r3, r3, #28
 8003734:	2202      	movs	r2, #2
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02e      	beq.n	800379e <HAL_DMA_IRQHandler+0xec>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d029      	beq.n	800379e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020a 	bic.w	r2, r2, #10
 8003766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f003 021c 	and.w	r2, r3, #28
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2102      	movs	r1, #2
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d038      	beq.n	8003806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800379c:	e033      	b.n	8003806 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 031c 	and.w	r3, r3, #28
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02a      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d025      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020e 	bic.w	r2, r2, #14
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 021c 	and.w	r2, r3, #28
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003806:	bf00      	nop
 8003808:	bf00      	nop
}
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 021c 	and.w	r2, r3, #28
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b10      	cmp	r3, #16
 8003840:	d108      	bne.n	8003854 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003852:	e007      	b.n	8003864 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387e:	e148      	b.n	8003b12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2101      	movs	r1, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 813a 	beq.w	8003b0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d005      	beq.n	80038b0 <HAL_GPIO_Init+0x40>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d130      	bne.n	8003912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038e6:	2201      	movs	r2, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0201 	and.w	r2, r3, #1
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b03      	cmp	r3, #3
 800391c:	d017      	beq.n	800394e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	2203      	movs	r2, #3
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d123      	bne.n	80039a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	08da      	lsrs	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	220f      	movs	r2, #15
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	6939      	ldr	r1, [r7, #16]
 800399e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8094 	beq.w	8003b0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e4:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <HAL_GPIO_Init+0x2c0>)
 80039e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e8:	4a51      	ldr	r2, [pc, #324]	; (8003b30 <HAL_GPIO_Init+0x2c0>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6613      	str	r3, [r2, #96]	; 0x60
 80039f0:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <HAL_GPIO_Init+0x2c0>)
 80039f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039fc:	4a4d      	ldr	r2, [pc, #308]	; (8003b34 <HAL_GPIO_Init+0x2c4>)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a26:	d00d      	beq.n	8003a44 <HAL_GPIO_Init+0x1d4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a43      	ldr	r2, [pc, #268]	; (8003b38 <HAL_GPIO_Init+0x2c8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <HAL_GPIO_Init+0x1d0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_GPIO_Init+0x2cc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_GPIO_Init+0x1cc>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e004      	b.n	8003a46 <HAL_GPIO_Init+0x1d6>
 8003a3c:	2307      	movs	r3, #7
 8003a3e:	e002      	b.n	8003a46 <HAL_GPIO_Init+0x1d6>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_GPIO_Init+0x1d6>
 8003a44:	2300      	movs	r3, #0
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	f002 0203 	and.w	r2, r2, #3
 8003a4c:	0092      	lsls	r2, r2, #2
 8003a4e:	4093      	lsls	r3, r2
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a56:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_GPIO_Init+0x2c4>)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a88:	4a2d      	ldr	r2, [pc, #180]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ab2:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <HAL_GPIO_Init+0x2d0>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f aeaf 	bne.w	8003880 <HAL_GPIO_Init+0x10>
  }
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40010000 	.word	0x40010000
 8003b38:	48000400 	.word	0x48000400
 8003b3c:	48000800 	.word	0x48000800
 8003b40:	40010400 	.word	0x40010400

08003b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e001      	b.n	8003b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43d9      	mvns	r1, r3
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e081      	b.n	8003cee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f8c2 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d107      	bne.n	8003c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e006      	b.n	8003c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d104      	bne.n	8003c72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	f040 80da 	bne.w	8003ece <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Master_Transmit+0x30>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0d3      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d30:	f7fe f8e8 	bl	8001f04 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2319      	movs	r3, #25
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fb5c 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0be      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2221      	movs	r2, #33	; 0x21
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2bff      	cmp	r3, #255	; 0xff
 8003d82:	d90e      	bls.n	8003da2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fd52 	bl	8004844 <I2C_TransferConfig>
 8003da0:	e06c      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fd41 	bl	8004844 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003dc2:	e05b      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb59 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e07b      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d034      	beq.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d130      	bne.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 faeb 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e04d      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2bff      	cmp	r3, #255	; 0xff
 8003e3c:	d90e      	bls.n	8003e5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	22ff      	movs	r2, #255	; 0xff
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	8979      	ldrh	r1, [r7, #10]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fcf5 	bl	8004844 <I2C_TransferConfig>
 8003e5a:	e00f      	b.n	8003e7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	8979      	ldrh	r1, [r7, #10]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fce4 	bl	8004844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d19e      	bne.n	8003dc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fb38 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e01a      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_I2C_Master_Transmit+0x1e4>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	80002000 	.word	0x80002000
 8003edc:	fe00e800 	.word	0xfe00e800

08003ee0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	461a      	mov	r2, r3
 8003eec:	460b      	mov	r3, r1
 8003eee:	817b      	strh	r3, [r7, #10]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	f040 80db 	bne.w	80040b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x30>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0d4      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd fff4 	bl	8001f04 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa68 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0bf      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2222      	movs	r2, #34	; 0x22
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2210      	movs	r2, #16
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	893a      	ldrh	r2, [r7, #8]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2bff      	cmp	r3, #255	; 0xff
 8003f6a:	d90e      	bls.n	8003f8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <HAL_I2C_Master_Receive+0x1e4>)
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fc5e 	bl	8004844 <I2C_TransferConfig>
 8003f88:	e06d      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_I2C_Master_Receive+0x1e4>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fc4d 	bl	8004844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003faa:	e05c      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fae1 	bl	8004578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e07c      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d034      	beq.n	8004066 <HAL_I2C_Master_Receive+0x186>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d130      	bne.n	8004066 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2200      	movs	r2, #0
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f9f6 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e04d      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2bff      	cmp	r3, #255	; 0xff
 8004026:	d90e      	bls.n	8004046 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fc00 	bl	8004844 <I2C_TransferConfig>
 8004044:	e00f      	b.n	8004066 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	b2da      	uxtb	r2, r3
 8004056:	8979      	ldrh	r1, [r7, #10]
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fbef 	bl	8004844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d19d      	bne.n	8003fac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fa43 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e01a      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2220      	movs	r2, #32
 800408a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_I2C_Master_Receive+0x1e8>)
 8004098:	400b      	ands	r3, r1
 800409a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	80002400 	.word	0x80002400
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 80f9 	bne.w	80042e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_I2C_Mem_Write+0x34>
 80040fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0ed      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_I2C_Mem_Write+0x4e>
 8004116:	2302      	movs	r3, #2
 8004118:	e0e6      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004122:	f7fd feef 	bl	8001f04 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2319      	movs	r3, #25
 800412e:	2201      	movs	r2, #1
 8004130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f963 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0d1      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2221      	movs	r2, #33	; 0x21
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800416c:	88f8      	ldrh	r0, [r7, #6]
 800416e:	893a      	ldrh	r2, [r7, #8]
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4603      	mov	r3, r0
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f8c7 	bl	8004310 <I2C_RequestMemoryWrite>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0a9      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2bff      	cmp	r3, #255	; 0xff
 800419c:	d90e      	bls.n	80041bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	8979      	ldrh	r1, [r7, #10]
 80041ac:	2300      	movs	r3, #0
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fb45 	bl	8004844 <I2C_TransferConfig>
 80041ba:	e00f      	b.n	80041dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	8979      	ldrh	r1, [r7, #10]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fb34 	bl	8004844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f94d 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e07b      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d034      	beq.n	8004294 <HAL_I2C_Mem_Write+0x1c8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d130      	bne.n	8004294 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f8df 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e04d      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2bff      	cmp	r3, #255	; 0xff
 8004254:	d90e      	bls.n	8004274 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	b2da      	uxtb	r2, r3
 8004262:	8979      	ldrh	r1, [r7, #10]
 8004264:	2300      	movs	r3, #0
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fae9 	bl	8004844 <I2C_TransferConfig>
 8004272:	e00f      	b.n	8004294 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	b2da      	uxtb	r2, r3
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fad8 	bl	8004844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d19e      	bne.n	80041dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f92c 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e01a      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2220      	movs	r2, #32
 80042b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_I2C_Mem_Write+0x224>)
 80042c6:	400b      	ands	r3, r1
 80042c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	fe00e800 	.word	0xfe00e800

080042f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <I2C_RequestMemoryWrite+0xa4>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa83 	bl	8004844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f89c 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02c      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
 8004362:	e015      	b.n	8004390 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f882 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e012      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2200      	movs	r2, #0
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f830 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	80002000 	.word	0x80002000

080043b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d103      	bne.n	80043d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d007      	beq.n	80043f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	619a      	str	r2, [r3, #24]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	e022      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d01e      	beq.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fd fd73 	bl	8001f04 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e00f      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d0cd      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800448c:	e02c      	b.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f8ea 	bl	800466c <I2C_IsErrorOccurred>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e02a      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d01e      	beq.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fd fd2b 	bl	8001f04 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e007      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d1cb      	bne.n	800448e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800450c:	e028      	b.n	8004560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8aa 	bl	800466c <I2C_IsErrorOccurred>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e026      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fd fcef 	bl	8001f04 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1cf      	bne.n	800450e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004584:	e064      	b.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f86e 	bl	800466c <I2C_IsErrorOccurred>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e062      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d138      	bne.n	800461a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d105      	bne.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e04e      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d107      	bne.n	80045e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2204      	movs	r2, #4
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44
 80045de:	e002      	b.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2220      	movs	r2, #32
 80045ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e022      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7fd fc73 	bl	8001f04 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d193      	bne.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fe00e800 	.word	0xfe00e800

0800466c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d075      	beq.n	8004784 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2210      	movs	r2, #16
 800469e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a0:	e056      	b.n	8004750 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d052      	beq.n	8004750 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fd fc2b 	bl	8001f04 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_IsErrorOccurred+0x54>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d147      	bne.n	8004750 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d12e      	bne.n	8004742 <I2C_IsErrorOccurred+0xd6>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ea:	d02a      	beq.n	8004742 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d027      	beq.n	8004742 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004702:	f7fd fbff 	bl	8001f04 <HAL_GetTick>
 8004706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004708:	e01b      	b.n	8004742 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800470a:	f7fd fbfb 	bl	8001f04 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b19      	cmp	r3, #25
 8004716:	d914      	bls.n	8004742 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b20      	cmp	r3, #32
 800474e:	d1dc      	bne.n	800470a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d003      	beq.n	8004766 <I2C_IsErrorOccurred+0xfa>
 800475e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004762:	2b00      	cmp	r3, #0
 8004764:	d09d      	beq.n	80046a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2220      	movs	r2, #32
 8004774:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f043 0308 	orr.w	r3, r3, #8
 80047be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01c      	beq.n	8004834 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fddc 	bl	80043b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <I2C_IsErrorOccurred+0x1d4>)
 800480c:	400b      	ands	r3, r1
 800480e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	431a      	orrs	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004838:	4618      	mov	r0, r3
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	fe00e800 	.word	0xfe00e800

08004844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	4613      	mov	r3, r2
 8004854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800485c:	7a7b      	ldrb	r3, [r7, #9]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	4313      	orrs	r3, r2
 800486e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	0d5b      	lsrs	r3, r3, #21
 800487e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <I2C_TransferConfig+0x60>)
 8004884:	430b      	orrs	r3, r1
 8004886:	43db      	mvns	r3, r3
 8004888:	ea02 0103 	and.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	03ff63ff 	.word	0x03ff63ff

080048a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d138      	bne.n	8004930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e032      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d139      	bne.n	80049c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800495e:	2302      	movs	r3, #2
 8004960:	e033      	b.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d8:	b08b      	sub	sp, #44	; 0x2c
 80049da:	af06      	add	r7, sp, #24
 80049dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e109      	b.n	8004bfc <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f00b fa91 	bl	800ff24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f005 ff1d 	bl	800a84e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	687e      	ldr	r6, [r7, #4]
 8004a1c:	466d      	mov	r5, sp
 8004a1e:	f106 0410 	add.w	r4, r6, #16
 8004a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a2e:	1d33      	adds	r3, r6, #4
 8004a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a32:	6838      	ldr	r0, [r7, #0]
 8004a34:	f005 fee3 	bl	800a7fe <USB_CoreInit>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0d8      	b.n	8004bfc <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f005 ff17 	bl	800a884 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e04d      	b.n	8004af8 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3305      	adds	r3, #5
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	3304      	adds	r3, #4
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	b298      	uxth	r0, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	333a      	adds	r3, #58	; 0x3a
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	3307      	adds	r3, #7
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	440b      	add	r3, r1
 8004ac4:	333c      	adds	r3, #60	; 0x3c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3340      	adds	r3, #64	; 0x40
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	3344      	adds	r3, #68	; 0x44
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	3301      	adds	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3ac      	bcc.n	8004a5c <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	e044      	b.n	8004b92 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	440b      	add	r3, r1
 8004b16:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	7bfa      	ldrb	r2, [r7, #15]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3b5      	bcc.n	8004b08 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	687e      	ldr	r6, [r7, #4]
 8004ba4:	466d      	mov	r5, sp
 8004ba6:	f106 0410 	add.w	r4, r6, #16
 8004baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb6:	1d33      	adds	r3, r6, #4
 8004bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	f005 fe6f 	bl	800a89e <USB_DevInit>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e014      	b.n	8004bfc <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d102      	bne.n	8004bf0 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 fc55 	bl	800649a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f008 f87a 	bl	800ccee <USB_DevDisconnect>

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_PCD_Start+0x16>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e012      	b.n	8004c40 <HAL_PCD_Start+0x3c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f005 fdfa 	bl	800a820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f008 f845 	bl	800ccc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f008 f85f 	bl	800cd18 <USB_ReadInterrupts>
 8004c5a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fb3e 	bl	80052e8 <PCD_EP_ISR_Handler>

    return;
 8004c6c:	e110      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f00b f9d8 	bl	8010046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c96:	2100      	movs	r1, #0
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8fc 	bl	8004e96 <HAL_PCD_SetAddress>

    return;
 8004c9e:	e0f7      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004cc2:	e0e5      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ce6:	e0d3      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d034      	beq.n	8004d5c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0204 	bic.w	r2, r2, #4
 8004d04:	b292      	uxth	r2, r2
 8004d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0208 	bic.w	r2, r2, #8
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d107      	bne.n	8004d3c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d34:	2100      	movs	r1, #0
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f00b fc36 	bl	80105a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f00b f9bb 	bl	80100b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d54:	b292      	uxth	r2, r2
 8004d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d5a:	e099      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d027      	beq.n	8004db6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0208 	orr.w	r2, r2, #8
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d90:	b292      	uxth	r2, r2
 8004d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0204 	orr.w	r2, r2, #4
 8004da8:	b292      	uxth	r2, r2
 8004daa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f00b f968 	bl	8010084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004db4:	e06c      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d040      	beq.n	8004e42 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d12b      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	b292      	uxth	r2, r2
 8004df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0208 	orr.w	r2, r2, #8
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e30:	2101      	movs	r1, #1
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f00b fbb8 	bl	80105a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004e38:	e02a      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f00b f922 	bl	8010084 <HAL_PCD_SuspendCallback>
    return;
 8004e40:	e026      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00f      	beq.n	8004e6c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f00b f8e0 	bl	801002a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004e6a:	e011      	b.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004e8e:	bf00      	nop
  }
}
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_PCD_SetAddress+0x1a>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e013      	b.n	8004ed8 <HAL_PCD_SetAddress+0x42>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	78fa      	ldrb	r2, [r7, #3]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f007 fee5 	bl	800cc98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	70fb      	strb	r3, [r7, #3]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	803b      	strh	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da0f      	bge.n	8004f26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	705a      	strb	r2, [r3, #1]
 8004f24:	e00f      	b.n	8004f46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 0207 	and.w	r2, r3, #7
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f52:	883a      	ldrh	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	78ba      	ldrb	r2, [r7, #2]
 8004f5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f70:	78bb      	ldrb	r3, [r7, #2]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d102      	bne.n	8004f7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_PCD_EP_Open+0xaa>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e00e      	b.n	8004fa8 <HAL_PCD_EP_Open+0xc8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f005 fca1 	bl	800a8e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da0f      	bge.n	8004fe4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	705a      	strb	r2, [r3, #1]
 8004fe2:	e00f      	b.n	8005004 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_PCD_EP_Close+0x6e>
 800501a:	2302      	movs	r3, #2
 800501c:	e00e      	b.n	800503c <HAL_PCD_EP_Close+0x8c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	4618      	mov	r0, r3
 800502e:	f006 f811 	bl	800b054 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	460b      	mov	r3, r1
 8005052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005054:	7afb      	ldrb	r3, [r7, #11]
 8005056:	f003 0207 	and.w	r2, r3, #7
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	b2da      	uxtb	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f006 f9c3 	bl	800b42e <USB_EPStartXfer>
 80050a8:	e005      	b.n	80050b6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f006 f9bc 	bl	800b42e <USB_EPStartXfer>
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 0207 	and.w	r2, r3, #7
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	440b      	add	r3, r1
 80050de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	460b      	mov	r3, r1
 80050fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	3304      	adds	r3, #4
 8005116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2201      	movs	r2, #1
 800513c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	b2da      	uxtb	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6979      	ldr	r1, [r7, #20]
 800515a:	4618      	mov	r0, r3
 800515c:	f006 f967 	bl	800b42e <USB_EPStartXfer>
 8005160:	e005      	b.n	800516e <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	4618      	mov	r0, r3
 800516a:	f006 f960 	bl	800b42e <USB_EPStartXfer>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d901      	bls.n	8005196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e04e      	b.n	8005234 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	da0f      	bge.n	80051be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]
 80051bc:	e00d      	b.n	80051da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_PCD_EP_SetStall+0x82>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e01c      	b.n	8005234 <HAL_PCD_EP_SetStall+0xbc>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	f007 fc46 	bl	800ca9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	2b00      	cmp	r3, #0
 8005216:	d108      	bne.n	800522a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f007 fd87 	bl	800cd38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 020f 	and.w	r2, r3, #15
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d901      	bls.n	800525a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e042      	b.n	80052e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800525a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	da0f      	bge.n	8005282 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	705a      	strb	r2, [r3, #1]
 8005280:	e00f      	b.n	80052a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 0207 	and.w	r2, r3, #7
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4413      	add	r3, r2
 8005298:	3304      	adds	r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_PCD_EP_ClrStall+0x86>
 80052be:	2302      	movs	r3, #2
 80052c0:	e00e      	b.n	80052e0 <HAL_PCD_EP_ClrStall+0xa4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f007 fc33 	bl	800cb3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b096      	sub	sp, #88	; 0x58
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052f0:	e3a9      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80052fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800530c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005310:	2b00      	cmp	r3, #0
 8005312:	f040 8169 	bne.w	80055e8 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005316:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d150      	bne.n	80053c4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	81fb      	strh	r3, [r7, #14]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	332c      	adds	r3, #44	; 0x2c
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	4413      	add	r3, r2
 8005366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005372:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	441a      	add	r2, r3
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005382:	2100      	movs	r1, #0
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f00a fe36 	bl	800fff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8357 	beq.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8352 	bne.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b292      	uxth	r2, r2
 80053b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053c2:	e340      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80053d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d032      	beq.n	8005448 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8005414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005416:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800541c:	b29b      	uxth	r3, r3
 800541e:	f007 fcd9 	bl	800cdd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29a      	uxth	r2, r3
 800542a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800542e:	4013      	ands	r3, r2
 8005430:	823b      	strh	r3, [r7, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	8a3a      	ldrh	r2, [r7, #16]
 8005438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800543c:	b292      	uxth	r2, r2
 800543e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f00a fdab 	bl	800ff9c <HAL_PCD_SetupStageCallback>
 8005446:	e2fe      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005448:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800544c:	2b00      	cmp	r3, #0
 800544e:	f280 82fa 	bge.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29a      	uxth	r2, r3
 800545a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800545e:	4013      	ands	r3, r2
 8005460:	83fb      	strh	r3, [r7, #30]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	8bfa      	ldrh	r2, [r7, #30]
 8005468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800546c:	b292      	uxth	r2, r2
 800546e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	4413      	add	r3, r2
 800548a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d019      	beq.n	80054d4 <PCD_EP_ISR_Handler+0x1ec>
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d015      	beq.n	80054d4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	6959      	ldr	r1, [r3, #20]
 80054b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80054b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f007 fc8b 	bl	800cdd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	441a      	add	r2, r3
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80054cc:	2100      	movs	r1, #0
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f00a fd76 	bl	800ffc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80054de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 82ad 	bne.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
 80054ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054f8:	f000 82a5 	beq.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4413      	add	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b3e      	cmp	r3, #62	; 0x3e
 8005522:	d918      	bls.n	8005556 <PCD_EP_ISR_Handler+0x26e>
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <PCD_EP_ISR_Handler+0x256>
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	3b01      	subs	r3, #1
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
 800553e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e029      	b.n	80055aa <PCD_EP_ISR_Handler+0x2c2>
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d112      	bne.n	8005584 <PCD_EP_ISR_Handler+0x29c>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005568:	b29a      	uxth	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557c:	b29a      	uxth	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e012      	b.n	80055aa <PCD_EP_ISR_Handler+0x2c2>
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	647b      	str	r3, [r7, #68]	; 0x44
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <PCD_EP_ISR_Handler+0x2b6>
 8005598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559a:	3301      	adds	r3, #1
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
 800559e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	827b      	strh	r3, [r7, #18]
 80055bc:	8a7b      	ldrh	r3, [r7, #18]
 80055be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055c2:	827b      	strh	r3, [r7, #18]
 80055c4:	8a7b      	ldrh	r3, [r7, #18]
 80055c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055ca:	827b      	strh	r3, [r7, #18]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	8a7b      	ldrh	r3, [r7, #18]
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
 80055e6:	e22e      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80055fc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005600:	2b00      	cmp	r3, #0
 8005602:	f280 80f7 	bge.w	80057f4 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29a      	uxth	r2, r3
 8005618:	f640 738f 	movw	r3, #3983	; 0xf8f
 800561c:	4013      	ands	r3, r2
 800561e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005638:	b292      	uxth	r2, r2
 800563a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800563c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	3304      	adds	r3, #4
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005656:	7b1b      	ldrb	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d123      	bne.n	80056a4 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	4413      	add	r3, r2
 8005676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005680:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005684:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 808e 	beq.w	80057aa <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005694:	6959      	ldr	r1, [r3, #20]
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	88da      	ldrh	r2, [r3, #6]
 800569a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800569e:	f007 fb99 	bl	800cdd4 <USB_ReadPMA>
 80056a2:	e082      	b.n	80057aa <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80056a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a6:	78db      	ldrb	r3, [r3, #3]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d10a      	bne.n	80056c2 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80056ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056b0:	461a      	mov	r2, r3
 80056b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f9d4 	bl	8005a62 <HAL_PCD_EP_DB_Receive>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056c0:	e073      	b.n	80057aa <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d022      	beq.n	8005766 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005728:	b29b      	uxth	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	4413      	add	r3, r2
 800573a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005744:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005748:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02c      	beq.n	80057aa <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005756:	6959      	ldr	r1, [r3, #20]
 8005758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575a:	891a      	ldrh	r2, [r3, #8]
 800575c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005760:	f007 fb38 	bl	800cdd4 <USB_ReadPMA>
 8005764:	e021      	b.n	80057aa <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	4413      	add	r3, r2
 8005780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800578e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579c:	6959      	ldr	r1, [r3, #20]
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	895a      	ldrh	r2, [r3, #10]
 80057a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057a6:	f007 fb15 	bl	800cdd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057b2:	441a      	add	r2, r3
 80057b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80057b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057c0:	441a      	add	r2, r3
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80057c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <PCD_EP_ISR_Handler+0x4f2>
 80057ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d206      	bcs.n	80057e8 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f00a fbed 	bl	800ffc0 <HAL_PCD_DataOutStageCallback>
 80057e6:	e005      	b.n	80057f4 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80057ee:	4618      	mov	r0, r3
 80057f0:	f005 fe1d 	bl	800b42e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80057f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8122 	beq.w	8005a46 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005802:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005850:	b29b      	uxth	r3, r3
 8005852:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 80a2 	bne.w	80059a2 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 800585e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005860:	2200      	movs	r2, #0
 8005862:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	7b1b      	ldrb	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8093 	beq.w	8005994 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800586e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d046      	beq.n	8005908 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800587a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d126      	bne.n	80058d0 <PCD_EP_ISR_Handler+0x5e8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005890:	b29b      	uxth	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	4413      	add	r3, r2
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	4413      	add	r3, r2
 80058a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e061      	b.n	8005994 <PCD_EP_ISR_Handler+0x6ac>
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d15d      	bne.n	8005994 <PCD_EP_ISR_Handler+0x6ac>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	4413      	add	r3, r2
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	00da      	lsls	r2, r3, #3
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	2200      	movs	r2, #0
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	e045      	b.n	8005994 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d126      	bne.n	8005964 <PCD_EP_ISR_Handler+0x67c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	4413      	add	r3, r2
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	00da      	lsls	r2, r3, #3
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	4413      	add	r3, r2
 8005938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005948:	b29a      	uxth	r2, r3
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595c:	b29a      	uxth	r2, r3
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e017      	b.n	8005994 <PCD_EP_ISR_Handler+0x6ac>
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d113      	bne.n	8005994 <PCD_EP_ISR_Handler+0x6ac>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	4413      	add	r3, r2
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	00da      	lsls	r2, r3, #3
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	4413      	add	r3, r2
 8005988:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2200      	movs	r2, #0
 8005992:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f00a fb2b 	bl	800fff6 <HAL_PCD_DataInStageCallback>
 80059a0:	e051      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d144      	bne.n	8005a38 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059de:	429a      	cmp	r2, r3
 80059e0:	d907      	bls.n	80059f2 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059ea:	1ad2      	subs	r2, r2, r3
 80059ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ee:	619a      	str	r2, [r3, #24]
 80059f0:	e002      	b.n	80059f8 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80059f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f4:	2200      	movs	r2, #0
 80059f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80059f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f00a faf5 	bl	800fff6 <HAL_PCD_DataInStageCallback>
 8005a0c:	e01b      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a16:	441a      	add	r2, r3
 8005a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a24:	441a      	add	r2, r3
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a30:	4618      	mov	r0, r3
 8005a32:	f005 fcfc 	bl	800b42e <USB_EPStartXfer>
 8005a36:	e006      	b.n	8005a46 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f917 	bl	8005c74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	b21b      	sxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f6ff ac4d 	blt.w	80052f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3758      	adds	r7, #88	; 0x58
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b088      	sub	sp, #32
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d07c      	beq.n	8005b74 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	699a      	ldr	r2, [r3, #24]
 8005aa4:	8b7b      	ldrh	r3, [r7, #26]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d306      	bcc.n	8005ab8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	8b7b      	ldrh	r3, [r7, #26]
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	e002      	b.n	8005abe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d123      	bne.n	8005b0e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	833b      	strh	r3, [r7, #24]
 8005ae2:	8b3b      	ldrh	r3, [r7, #24]
 8005ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ae8:	833b      	strh	r3, [r7, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	441a      	add	r2, r3
 8005af8:	8b3b      	ldrh	r3, [r7, #24]
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01f      	beq.n	8005b58 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	82fb      	strh	r3, [r7, #22]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	8afb      	ldrh	r3, [r7, #22]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b58:	8b7b      	ldrh	r3, [r7, #26]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8085 	beq.w	8005c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6959      	ldr	r1, [r3, #20]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	891a      	ldrh	r2, [r3, #8]
 8005b6c:	8b7b      	ldrh	r3, [r7, #26]
 8005b6e:	f007 f931 	bl	800cdd4 <USB_ReadPMA>
 8005b72:	e07a      	b.n	8005c6a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d306      	bcc.n	8005bb2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	8b7b      	ldrh	r3, [r7, #26]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	619a      	str	r2, [r3, #24]
 8005bb0:	e002      	b.n	8005bb8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d123      	bne.n	8005c08 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	83fb      	strh	r3, [r7, #30]
 8005bdc:	8bfb      	ldrh	r3, [r7, #30]
 8005bde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005be2:	83fb      	strh	r3, [r7, #30]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	8bfb      	ldrh	r3, [r7, #30]
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11f      	bne.n	8005c52 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	83bb      	strh	r3, [r7, #28]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	8bbb      	ldrh	r3, [r7, #28]
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c52:	8b7b      	ldrh	r3, [r7, #26]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6959      	ldr	r1, [r3, #20]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	895a      	ldrh	r2, [r3, #10]
 8005c64:	8b7b      	ldrh	r3, [r7, #26]
 8005c66:	f007 f8b5 	bl	800cdd4 <USB_ReadPMA>
    }
  }

  return count;
 8005c6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b0a2      	sub	sp, #136	; 0x88
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 81c5 	beq.w	8006018 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d907      	bls.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	619a      	str	r2, [r3, #24]
 8005cd0:	e002      	b.n	8005cd8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 80b9 	bne.w	8005e54 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d126      	bne.n	8005d38 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	4413      	add	r3, r2
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	00da      	lsls	r2, r3, #3
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e01a      	b.n	8005d6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d116      	bne.n	8005d6e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	4413      	add	r3, r2
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	00da      	lsls	r2, r3, #3
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d126      	bne.n	8005dca <HAL_PCD_EP_DB_Transmit+0x156>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	00da      	lsls	r2, r3, #3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e017      	b.n	8005dfa <HAL_PCD_EP_DB_Transmit+0x186>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d113      	bne.n	8005dfa <HAL_PCD_EP_DB_Transmit+0x186>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	623b      	str	r3, [r7, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	00da      	lsls	r2, r3, #3
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f00a f8f8 	bl	800fff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 82d2 	beq.w	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	827b      	strh	r3, [r7, #18]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	8a7b      	ldrh	r3, [r7, #18]
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
 8005e52:	e2b0      	b.n	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d021      	beq.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 8284 	bne.w	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d309      	bcc.n	8005eea <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	621a      	str	r2, [r3, #32]
 8005ee8:	e015      	b.n	8005f16 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f00:	e009      	b.n	8005f16 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d155      	bne.n	8005fca <HAL_PCD_EP_DB_Transmit+0x356>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	4413      	add	r3, r2
 8005f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f48:	2b3e      	cmp	r3, #62	; 0x3e
 8005f4a:	d916      	bls.n	8005f7a <HAL_PCD_EP_DB_Transmit+0x306>
 8005f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e043      	b.n	8006002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d112      	bne.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x332>
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e02d      	b.n	8006002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x348>
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	3301      	adds	r3, #1
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e01b      	b.n	8006002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d117      	bne.n	8006002 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	4413      	add	r3, r2
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	891a      	ldrh	r2, [r3, #8]
 800600e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	f006 fe9d 	bl	800cd50 <USB_WritePMA>
 8006016:	e1ce      	b.n	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	4413      	add	r3, r2
 8006032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800603c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006048:	429a      	cmp	r2, r3
 800604a:	d307      	bcc.n	800605c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006054:	1ad2      	subs	r2, r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	619a      	str	r2, [r3, #24]
 800605a:	e002      	b.n	8006062 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 80c4 	bne.w	80061f4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d126      	bne.n	80060c2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	66bb      	str	r3, [r7, #104]	; 0x68
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006088:	4413      	add	r3, r2
 800608a:	66bb      	str	r3, [r7, #104]	; 0x68
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	00da      	lsls	r2, r3, #3
 8006092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006094:	4413      	add	r3, r2
 8006096:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800609a:	667b      	str	r3, [r7, #100]	; 0x64
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e01a      	b.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d116      	bne.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x484>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	673b      	str	r3, [r7, #112]	; 0x70
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060de:	4413      	add	r3, r2
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	00da      	lsls	r2, r3, #3
 80060e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ea:	4413      	add	r3, r2
 80060ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	2200      	movs	r2, #0
 80060f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d12f      	bne.n	8006166 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800611e:	4413      	add	r3, r2
 8006120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	00da      	lsls	r2, r3, #3
 800612a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800612e:	4413      	add	r3, r2
 8006130:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615c:	b29a      	uxth	r2, r3
 800615e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	e017      	b.n	8006196 <HAL_PCD_EP_DB_Transmit+0x522>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d113      	bne.n	8006196 <HAL_PCD_EP_DB_Transmit+0x522>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006176:	b29b      	uxth	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800617c:	4413      	add	r3, r2
 800617e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00da      	lsls	r2, r3, #3
 8006186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006188:	4413      	add	r3, r2
 800618a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800618e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006192:	2200      	movs	r2, #0
 8006194:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f009 ff2a 	bl	800fff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8104 	bne.w	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]
 80061f2:	e0e0      	b.n	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d121      	bne.n	8006242 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80b4 	bne.w	80063b6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006256:	441a      	add	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006264:	441a      	add	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	d309      	bcc.n	800628a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006282:	1ad2      	subs	r2, r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	621a      	str	r2, [r3, #32]
 8006288:	e015      	b.n	80062b6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d107      	bne.n	80062a2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006296:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062a0:	e009      	b.n	80062b6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	663b      	str	r3, [r7, #96]	; 0x60
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d155      	bne.n	8006370 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d8:	4413      	add	r3, r2
 80062da:	65bb      	str	r3, [r7, #88]	; 0x58
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00da      	lsls	r2, r3, #3
 80062e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062ea:	657b      	str	r3, [r7, #84]	; 0x54
 80062ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ee:	2b3e      	cmp	r3, #62	; 0x3e
 80062f0:	d916      	bls.n	8006320 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80062f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	677b      	str	r3, [r7, #116]	; 0x74
 80062f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_PCD_EP_DB_Transmit+0x694>
 8006302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006304:	3b01      	subs	r3, #1
 8006306:	677b      	str	r3, [r7, #116]	; 0x74
 8006308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e040      	b.n	80063a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006322:	2b00      	cmp	r3, #0
 8006324:	d112      	bne.n	800634c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006330:	b29a      	uxth	r2, r3
 8006332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e02a      	b.n	80063a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	677b      	str	r3, [r7, #116]	; 0x74
 8006352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800635c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635e:	3301      	adds	r3, #1
 8006360:	677b      	str	r3, [r7, #116]	; 0x74
 8006362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006364:	b29b      	uxth	r3, r3
 8006366:	029b      	lsls	r3, r3, #10
 8006368:	b29a      	uxth	r2, r3
 800636a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e018      	b.n	80063a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d114      	bne.n	80063a2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006380:	b29b      	uxth	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006386:	4413      	add	r3, r2
 8006388:	663b      	str	r3, [r7, #96]	; 0x60
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	00da      	lsls	r2, r3, #3
 8006390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006392:	4413      	add	r3, r2
 8006394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639c:	b29a      	uxth	r2, r3
 800639e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6959      	ldr	r1, [r3, #20]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	895a      	ldrh	r2, [r3, #10]
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f006 fccd 	bl	800cd50 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d0:	823b      	strh	r3, [r7, #16]
 80063d2:	8a3b      	ldrh	r3, [r7, #16]
 80063d4:	f083 0310 	eor.w	r3, r3, #16
 80063d8:	823b      	strh	r3, [r7, #16]
 80063da:	8a3b      	ldrh	r3, [r7, #16]
 80063dc:	f083 0320 	eor.w	r3, r3, #32
 80063e0:	823b      	strh	r3, [r7, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	8a3b      	ldrh	r3, [r7, #16]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3788      	adds	r7, #136	; 0x88
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	817b      	strh	r3, [r7, #10]
 800641e:	4613      	mov	r3, r2
 8006420:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	3304      	adds	r3, #4
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e00a      	b.n	800645e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006448:	897a      	ldrh	r2, [r7, #10]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800645e:	893b      	ldrh	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2200      	movs	r2, #0
 8006468:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	b29a      	uxth	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	80da      	strh	r2, [r3, #6]
 8006472:	e00b      	b.n	800648c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	b29a      	uxth	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b29a      	uxth	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f043 0302 	orr.w	r3, r3, #2
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a04      	ldr	r2, [pc, #16]	; (800650c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fe:	6013      	str	r3, [r2, #0]
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40007000 	.word	0x40007000

08006510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <HAL_PWREx_GetVoltageRange+0x18>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40007000 	.word	0x40007000

0800652c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653a:	d130      	bne.n	800659e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800653c:	4b23      	ldr	r3, [pc, #140]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006548:	d038      	beq.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800654a:	4b20      	ldr	r3, [pc, #128]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2232      	movs	r2, #50	; 0x32
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0c9b      	lsrs	r3, r3, #18
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006570:	e002      	b.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b01      	subs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d102      	bne.n	800658c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f2      	bne.n	8006572 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d110      	bne.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00f      	b.n	80065be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065aa:	d007      	beq.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40007000 	.word	0x40007000
 80065d0:	2000000c 	.word	0x2000000c
 80065d4:	431bde83 	.word	0x431bde83

080065d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80065e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065e6:	6053      	str	r3, [r2, #4]
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40007000 	.word	0x40007000

080065f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f000 bc02 	b.w	8006e10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660c:	4b96      	ldr	r3, [pc, #600]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006616:	4b94      	ldr	r3, [pc, #592]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80e4 	beq.w	80067f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_RCC_OscConfig+0x4c>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b0c      	cmp	r3, #12
 8006638:	f040 808b 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	f040 8087 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006644:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_OscConfig+0x64>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e3d9      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_RCC_OscConfig+0x7e>
 800666c:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006674:	e005      	b.n	8006682 <HAL_RCC_OscConfig+0x8a>
 8006676:	4b7c      	ldr	r3, [pc, #496]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006682:	4293      	cmp	r3, r2
 8006684:	d223      	bcs.n	80066ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fd8c 	bl	80071a8 <RCC_SetFlashLatencyFromMSIRange>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e3ba      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	4b73      	ldr	r3, [pc, #460]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a72      	ldr	r2, [pc, #456]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b70      	ldr	r3, [pc, #448]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	496d      	ldr	r1, [pc, #436]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b8:	4b6b      	ldr	r3, [pc, #428]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	4968      	ldr	r1, [pc, #416]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	e025      	b.n	800671a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066ce:	4b66      	ldr	r3, [pc, #408]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a65      	ldr	r2, [pc, #404]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4960      	ldr	r1, [pc, #384]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ec:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	495b      	ldr	r1, [pc, #364]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fd4c 	bl	80071a8 <RCC_SetFlashLatencyFromMSIRange>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e37a      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671a:	f000 fc81 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800671e:	4602      	mov	r2, r0
 8006720:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4950      	ldr	r1, [pc, #320]	; (800686c <HAL_RCC_OscConfig+0x274>)
 800672c:	5ccb      	ldrb	r3, [r1, r3]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a4e      	ldr	r2, [pc, #312]	; (8006870 <HAL_RCC_OscConfig+0x278>)
 8006738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800673a:	4b4e      	ldr	r3, [pc, #312]	; (8006874 <HAL_RCC_OscConfig+0x27c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb fb90 	bl	8001e64 <HAL_InitTick>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d052      	beq.n	80067f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	e35e      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d032      	beq.n	80067c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a42      	ldr	r2, [pc, #264]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006766:	f7fb fbcd 	bl	8001f04 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800676e:	f7fb fbc9 	bl	8001f04 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e347      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006780:	4b39      	ldr	r3, [pc, #228]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a35      	ldr	r2, [pc, #212]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006792:	f043 0308 	orr.w	r3, r3, #8
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4b33      	ldr	r3, [pc, #204]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	4930      	ldr	r1, [pc, #192]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	492b      	ldr	r1, [pc, #172]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
 80067be:	e01a      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067c0:	4b29      	ldr	r3, [pc, #164]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a28      	ldr	r2, [pc, #160]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067cc:	f7fb fb9a 	bl	8001f04 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067d4:	f7fb fb96 	bl	8001f04 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e314      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e6:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x1dc>
 80067f2:	e000      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d073      	beq.n	80068ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d005      	beq.n	8006814 <HAL_RCC_OscConfig+0x21c>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d10e      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d063      	beq.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d15f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e2f1      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x24c>
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e025      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800684c:	d114      	bne.n	8006878 <HAL_RCC_OscConfig+0x280>
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a02      	ldr	r2, [pc, #8]	; (8006868 <HAL_RCC_OscConfig+0x270>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e013      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006868:	40021000 	.word	0x40021000
 800686c:	08011084 	.word	0x08011084
 8006870:	2000000c 	.word	0x2000000c
 8006874:	20000010 	.word	0x20000010
 8006878:	4ba0      	ldr	r3, [pc, #640]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a9f      	ldr	r2, [pc, #636]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b9d      	ldr	r3, [pc, #628]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a9c      	ldr	r2, [pc, #624]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800688a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fb fb34 	bl	8001f04 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fb fb30 	bl	8001f04 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	; 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e2ae      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b2:	4b92      	ldr	r3, [pc, #584]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x2a8>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fb fb20 	bl	8001f04 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fb fb1c 	bl	8001f04 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e29a      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068da:	4b88      	ldr	r3, [pc, #544]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x2d0>
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d060      	beq.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_OscConfig+0x310>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d119      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d116      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006908:	4b7c      	ldr	r3, [pc, #496]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_OscConfig+0x328>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e277      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006920:	4b76      	ldr	r3, [pc, #472]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	061b      	lsls	r3, r3, #24
 800692e:	4973      	ldr	r1, [pc, #460]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006934:	e040      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d023      	beq.n	8006986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800693e:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6e      	ldr	r2, [pc, #440]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fb fadb 	bl	8001f04 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006952:	f7fb fad7 	bl	8001f04 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e255      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b65      	ldr	r3, [pc, #404]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b62      	ldr	r3, [pc, #392]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	495f      	ldr	r1, [pc, #380]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	e018      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006986:	4b5d      	ldr	r3, [pc, #372]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5c      	ldr	r2, [pc, #368]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fb fab7 	bl	8001f04 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699a:	f7fb fab3 	bl	8001f04 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e231      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ac:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03c      	beq.n	8006a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01c      	beq.n	8006a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069cc:	4b4b      	ldr	r3, [pc, #300]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d2:	4a4a      	ldr	r2, [pc, #296]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fb fa92 	bl	8001f04 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fb fa8e 	bl	8001f04 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e20c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0ef      	beq.n	80069e4 <HAL_RCC_OscConfig+0x3ec>
 8006a04:	e01b      	b.n	8006a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fb fa75 	bl	8001f04 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fb fa71 	bl	8001f04 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e1ef      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1ef      	bne.n	8006a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a6 	beq.w	8006b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a60:	4a26      	ldr	r2, [pc, #152]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a66:	6593      	str	r3, [r2, #88]	; 0x58
 8006a68:	4b24      	ldr	r3, [pc, #144]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a78:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d118      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a90:	f7fb fa38 	bl	8001f04 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a98:	f7fb fa34 	bl	8001f04 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1b2      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d108      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4d8>
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ace:	e029      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d115      	bne.n	8006b04 <HAL_RCC_OscConfig+0x50c>
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aee:	4a03      	ldr	r2, [pc, #12]	; (8006afc <HAL_RCC_OscConfig+0x504>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006af8:	e014      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
 8006b04:	4b9a      	ldr	r3, [pc, #616]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	4a99      	ldr	r2, [pc, #612]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b14:	4b96      	ldr	r3, [pc, #600]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	4a95      	ldr	r2, [pc, #596]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fb f9ea 	bl	8001f04 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fb f9e6 	bl	8001f04 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e162      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4a:	4b89      	ldr	r3, [pc, #548]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0ed      	beq.n	8006b34 <HAL_RCC_OscConfig+0x53c>
 8006b58:	e015      	b.n	8006b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fb f9d3 	bl	8001f04 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b60:	e00a      	b.n	8006b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b62:	f7fb f9cf 	bl	8001f04 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e14b      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b78:	4b7d      	ldr	r3, [pc, #500]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ed      	bne.n	8006b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8c:	4b78      	ldr	r3, [pc, #480]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	4a77      	ldr	r2, [pc, #476]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01c      	beq.n	8006be6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bac:	4b70      	ldr	r3, [pc, #448]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb2:	4a6f      	ldr	r2, [pc, #444]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fb f9a2 	bl	8001f04 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc4:	f7fb f99e 	bl	8001f04 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e11c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd6:	4b66      	ldr	r3, [pc, #408]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ef      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x5cc>
 8006be4:	e01b      	b.n	8006c1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006be6:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bec:	4a60      	ldr	r2, [pc, #384]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf6:	f7fb f985 	bl	8001f04 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fb f981 	bl	8001f04 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0ff      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c10:	4b57      	ldr	r3, [pc, #348]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ef      	bne.n	8006bfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80f3 	beq.w	8006e0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	f040 80c9 	bne.w	8006dc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c32:	4b4f      	ldr	r3, [pc, #316]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0203 	and.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d12c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	3b01      	subs	r3, #1
 8006c52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d123      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d11b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d113      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	3b01      	subs	r3, #1
 8006c86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d109      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d06b      	beq.n	8006d78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d062      	beq.n	8006d6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0ac      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cc2:	f7fb f91f 	bl	8001f04 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cca:	f7fb f91b 	bl	8001f04 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e099      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f0      	bne.n	8006cca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce8:	4b21      	ldr	r3, [pc, #132]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	4b21      	ldr	r3, [pc, #132]	; (8006d74 <HAL_RCC_OscConfig+0x77c>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cf8:	3a01      	subs	r2, #1
 8006cfa:	0112      	lsls	r2, r2, #4
 8006cfc:	4311      	orrs	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d02:	0212      	lsls	r2, r2, #8
 8006d04:	4311      	orrs	r1, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d0a:	0852      	lsrs	r2, r2, #1
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0552      	lsls	r2, r2, #21
 8006d10:	4311      	orrs	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d16:	0852      	lsrs	r2, r2, #1
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	0652      	lsls	r2, r2, #25
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d22:	06d2      	lsls	r2, r2, #27
 8006d24:	430a      	orrs	r2, r1
 8006d26:	4912      	ldr	r1, [pc, #72]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d2c:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0f      	ldr	r2, [pc, #60]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d44:	f7fb f8de 	bl	8001f04 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4c:	f7fb f8da 	bl	8001f04 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e058      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d6a:	e050      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04f      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
 8006d70:	40021000 	.word	0x40021000
 8006d74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d78:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d144      	bne.n	8006e0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d84:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a23      	ldr	r2, [pc, #140]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d90:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d9c:	f7fb f8b2 	bl	8001f04 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da4:	f7fb f8ae 	bl	8001f04 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e02c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x7ac>
 8006dc2:	e024      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d01f      	beq.n	8006e0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd6:	f7fb f895 	bl	8001f04 <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dde:	f7fb f891 	bl	8001f04 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e00f      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f0      	bne.n	8006dde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	4905      	ldr	r1, [pc, #20]	; (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <HAL_RCC_OscConfig+0x824>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	60cb      	str	r3, [r1, #12]
 8006e08:	e001      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	feeefffc 	.word	0xfeeefffc

08006e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0e7      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e34:	4b75      	ldr	r3, [pc, #468]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d910      	bls.n	8006e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e42:	4b72      	ldr	r3, [pc, #456]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f023 0207 	bic.w	r2, r3, #7
 8006e4a:	4970      	ldr	r1, [pc, #448]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e52:	4b6e      	ldr	r3, [pc, #440]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0cf      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	4b66      	ldr	r3, [pc, #408]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d908      	bls.n	8006e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e80:	4b63      	ldr	r3, [pc, #396]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4960      	ldr	r1, [pc, #384]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d04c      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ea6:	4b5a      	ldr	r3, [pc, #360]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d121      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0a6      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d107      	bne.n	8006ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ebe:	4b54      	ldr	r3, [pc, #336]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d115      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e09a      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ed6:	4b4e      	ldr	r3, [pc, #312]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e08e      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ee6:	4b4a      	ldr	r3, [pc, #296]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e086      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ef6:	4b46      	ldr	r3, [pc, #280]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f023 0203 	bic.w	r2, r3, #3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4943      	ldr	r1, [pc, #268]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f08:	f7fa fffc 	bl	8001f04 <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f10:	f7fa fff8 	bl	8001f04 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e06e      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f26:	4b3a      	ldr	r3, [pc, #232]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 020c 	and.w	r2, r3, #12
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d1eb      	bne.n	8006f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d010      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	4b31      	ldr	r3, [pc, #196]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d208      	bcs.n	8006f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f54:	4b2e      	ldr	r3, [pc, #184]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	492b      	ldr	r1, [pc, #172]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d210      	bcs.n	8006f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f74:	4b25      	ldr	r3, [pc, #148]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 0207 	bic.w	r2, r3, #7
 8006f7c:	4923      	ldr	r1, [pc, #140]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f84:	4b21      	ldr	r3, [pc, #132]	; (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d001      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e036      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	4918      	ldr	r1, [pc, #96]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc0:	4b13      	ldr	r3, [pc, #76]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4910      	ldr	r1, [pc, #64]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fd4:	f000 f824 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	490b      	ldr	r1, [pc, #44]	; (8007014 <HAL_RCC_ClockConfig+0x1f4>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff0:	4a09      	ldr	r2, [pc, #36]	; (8007018 <HAL_RCC_ClockConfig+0x1f8>)
 8006ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <HAL_RCC_ClockConfig+0x1fc>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fa ff33 	bl	8001e64 <HAL_InitTick>
 8006ffe:	4603      	mov	r3, r0
 8007000:	72fb      	strb	r3, [r7, #11]

  return status;
 8007002:	7afb      	ldrb	r3, [r7, #11]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	40022000 	.word	0x40022000
 8007010:	40021000 	.word	0x40021000
 8007014:	08011084 	.word	0x08011084
 8007018:	2000000c 	.word	0x2000000c
 800701c:	20000010 	.word	0x20000010

08007020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	; 0x24
 8007024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800702e:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 030c 	and.w	r3, r3, #12
 8007036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007038:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0303 	and.w	r3, r3, #3
 8007040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x34>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b0c      	cmp	r3, #12
 800704c:	d121      	bne.n	8007092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d11e      	bne.n	8007092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007054:	4b34      	ldr	r3, [pc, #208]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007060:	4b31      	ldr	r3, [pc, #196]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	e005      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007070:	4b2d      	ldr	r3, [pc, #180]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800707c:	4a2b      	ldr	r2, [pc, #172]	; (800712c <HAL_RCC_GetSysClockFreq+0x10c>)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007090:	e00a      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d102      	bne.n	800709e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007098:	4b25      	ldr	r3, [pc, #148]	; (8007130 <HAL_RCC_GetSysClockFreq+0x110>)
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e004      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070a4:	4b23      	ldr	r3, [pc, #140]	; (8007134 <HAL_RCC_GetSysClockFreq+0x114>)
 80070a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d134      	bne.n	8007118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ae:	4b1e      	ldr	r3, [pc, #120]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d003      	beq.n	80070c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d003      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0xac>
 80070c4:	e005      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <HAL_RCC_GetSysClockFreq+0x110>)
 80070c8:	617b      	str	r3, [r7, #20]
      break;
 80070ca:	e005      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070cc:	4b19      	ldr	r3, [pc, #100]	; (8007134 <HAL_RCC_GetSysClockFreq+0x114>)
 80070ce:	617b      	str	r3, [r7, #20]
      break;
 80070d0:	e002      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	617b      	str	r3, [r7, #20]
      break;
 80070d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	3301      	adds	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	fb03 f202 	mul.w	r2, r3, r2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	0e5b      	lsrs	r3, r3, #25
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	3301      	adds	r3, #1
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007118:	69bb      	ldr	r3, [r7, #24]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40021000 	.word	0x40021000
 800712c:	0801109c 	.word	0x0801109c
 8007130:	00f42400 	.word	0x00f42400
 8007134:	007a1200 	.word	0x007a1200

08007138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <HAL_RCC_GetHCLKFreq+0x14>)
 800713e:	681b      	ldr	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2000000c 	.word	0x2000000c

08007150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007154:	f7ff fff0 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007158:	4602      	mov	r2, r0
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007166:	5ccb      	ldrb	r3, [r1, r3]
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007170:	4618      	mov	r0, r3
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40021000 	.word	0x40021000
 8007178:	08011094 	.word	0x08011094

0800717c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007180:	f7ff ffda 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0adb      	lsrs	r3, r3, #11
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4904      	ldr	r1, [pc, #16]	; (80071a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40021000 	.word	0x40021000
 80071a4:	08011094 	.word	0x08011094

080071a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071b4:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071c0:	f7ff f9a6 	bl	8006510 <HAL_PWREx_GetVoltageRange>
 80071c4:	6178      	str	r0, [r7, #20]
 80071c6:	e014      	b.n	80071f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071c8:	4b25      	ldr	r3, [pc, #148]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	4a24      	ldr	r2, [pc, #144]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d2:	6593      	str	r3, [r2, #88]	; 0x58
 80071d4:	4b22      	ldr	r3, [pc, #136]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071e0:	f7ff f996 	bl	8006510 <HAL_PWREx_GetVoltageRange>
 80071e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071e6:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ea:	4a1d      	ldr	r2, [pc, #116]	; (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f8:	d10b      	bne.n	8007212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b80      	cmp	r3, #128	; 0x80
 80071fe:	d919      	bls.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2ba0      	cmp	r3, #160	; 0xa0
 8007204:	d902      	bls.n	800720c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007206:	2302      	movs	r3, #2
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e013      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800720c:	2301      	movs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	e010      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b80      	cmp	r3, #128	; 0x80
 8007216:	d902      	bls.n	800721e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007218:	2303      	movs	r3, #3
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e00a      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d102      	bne.n	800722a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007224:	2302      	movs	r3, #2
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e004      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d101      	bne.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007230:	2301      	movs	r3, #1
 8007232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f023 0207 	bic.w	r2, r3, #7
 800723c:	4909      	ldr	r1, [pc, #36]	; (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d001      	beq.n	8007256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40021000 	.word	0x40021000
 8007264:	40022000 	.word	0x40022000

08007268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007270:	2300      	movs	r3, #0
 8007272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007274:	2300      	movs	r3, #0
 8007276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007280:	2b00      	cmp	r3, #0
 8007282:	d031      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800728c:	d01a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800728e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007292:	d814      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800729c:	d10f      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800729e:	4b5d      	ldr	r3, [pc, #372]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4a5c      	ldr	r2, [pc, #368]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072aa:	e00c      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f9de 	bl	8007674 <RCCEx_PLLSAI1_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072bc:	e003      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	74fb      	strb	r3, [r7, #19]
      break;
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80072c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c6:	7cfb      	ldrb	r3, [r7, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072cc:	4b51      	ldr	r3, [pc, #324]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	494e      	ldr	r1, [pc, #312]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80072e2:	e001      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 809e 	beq.w	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072f6:	2300      	movs	r3, #0
 80072f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072fa:	4b46      	ldr	r3, [pc, #280]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007310:	4b40      	ldr	r3, [pc, #256]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	4a3f      	ldr	r2, [pc, #252]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731a:	6593      	str	r3, [r2, #88]	; 0x58
 800731c:	4b3d      	ldr	r3, [pc, #244]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800731e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007328:	2301      	movs	r3, #1
 800732a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800732c:	4b3a      	ldr	r3, [pc, #232]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a39      	ldr	r2, [pc, #228]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007338:	f7fa fde4 	bl	8001f04 <HAL_GetTick>
 800733c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800733e:	e009      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007340:	f7fa fde0 	bl	8001f04 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d902      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	74fb      	strb	r3, [r7, #19]
        break;
 8007352:	e005      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ef      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007360:	7cfb      	ldrb	r3, [r7, #19]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d15a      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007366:	4b2b      	ldr	r3, [pc, #172]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01e      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	429a      	cmp	r2, r3
 8007380:	d019      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800738e:	4b21      	ldr	r3, [pc, #132]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800739e:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073ae:	4a19      	ldr	r2, [pc, #100]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d016      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c0:	f7fa fda0 	bl	8001f04 <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073c6:	e00b      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fa fd9c 	bl	8001f04 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d902      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	74fb      	strb	r3, [r7, #19]
            break;
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e0:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0ec      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f4:	4b07      	ldr	r3, [pc, #28]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007402:	4904      	ldr	r1, [pc, #16]	; (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800740a:	e009      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	74bb      	strb	r3, [r7, #18]
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007412:	bf00      	nop
 8007414:	40021000 	.word	0x40021000
 8007418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007420:	7c7b      	ldrb	r3, [r7, #17]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d105      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007426:	4b8a      	ldr	r3, [pc, #552]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	4a89      	ldr	r2, [pc, #548]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007430:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800743e:	4b84      	ldr	r3, [pc, #528]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007444:	f023 0203 	bic.w	r2, r3, #3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	4980      	ldr	r1, [pc, #512]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007460:	4b7b      	ldr	r3, [pc, #492]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007466:	f023 020c 	bic.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	4978      	ldr	r1, [pc, #480]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007482:	4b73      	ldr	r3, [pc, #460]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	496f      	ldr	r1, [pc, #444]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074a4:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	4967      	ldr	r1, [pc, #412]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074c6:	4b62      	ldr	r3, [pc, #392]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	495e      	ldr	r1, [pc, #376]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074e8:	4b59      	ldr	r3, [pc, #356]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4956      	ldr	r1, [pc, #344]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800750a:	4b51      	ldr	r3, [pc, #324]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	494d      	ldr	r1, [pc, #308]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d028      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800752c:	4b48      	ldr	r3, [pc, #288]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	4945      	ldr	r1, [pc, #276]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800754a:	d106      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800754c:	4b40      	ldr	r3, [pc, #256]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4a3f      	ldr	r2, [pc, #252]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007556:	60d3      	str	r3, [r2, #12]
 8007558:	e011      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007562:	d10c      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f882 	bl	8007674 <RCCEx_PLLSAI1_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d028      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800758a:	4b31      	ldr	r3, [pc, #196]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007598:	492d      	ldr	r1, [pc, #180]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a8:	d106      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075aa:	4b29      	ldr	r3, [pc, #164]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4a28      	ldr	r2, [pc, #160]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b4:	60d3      	str	r3, [r2, #12]
 80075b6:	e011      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3304      	adds	r3, #4
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f853 	bl	8007674 <RCCEx_PLLSAI1_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075d2:	7cfb      	ldrb	r3, [r7, #19]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01c      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f6:	4916      	ldr	r1, [pc, #88]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007606:	d10c      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	2102      	movs	r1, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f830 	bl	8007674 <RCCEx_PLLSAI1_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800761e:	7cfb      	ldrb	r3, [r7, #19]
 8007620:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800762e:	4b08      	ldr	r3, [pc, #32]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007634:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	4904      	ldr	r1, [pc, #16]	; (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007644:	7cbb      	ldrb	r3, [r7, #18]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40021000 	.word	0x40021000

08007654 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a04      	ldr	r2, [pc, #16]	; (8007670 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800765e:	f043 0304 	orr.w	r3, r3, #4
 8007662:	6013      	str	r3, [r2, #0]
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40021000 	.word	0x40021000

08007674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007682:	4b74      	ldr	r3, [pc, #464]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d018      	beq.n	80076c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800768e:	4b71      	ldr	r3, [pc, #452]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0203 	and.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d10d      	bne.n	80076ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
       ||
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d009      	beq.n	80076ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80076a6:	4b6b      	ldr	r3, [pc, #428]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
       ||
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d047      	beq.n	800774a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
 80076be:	e044      	b.n	800774a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d018      	beq.n	80076fa <RCCEx_PLLSAI1_Config+0x86>
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d825      	bhi.n	8007718 <RCCEx_PLLSAI1_Config+0xa4>
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d002      	beq.n	80076d6 <RCCEx_PLLSAI1_Config+0x62>
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d009      	beq.n	80076e8 <RCCEx_PLLSAI1_Config+0x74>
 80076d4:	e020      	b.n	8007718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076d6:	4b5f      	ldr	r3, [pc, #380]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d11d      	bne.n	800771e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e6:	e01a      	b.n	800771e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076e8:	4b5a      	ldr	r3, [pc, #360]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d116      	bne.n	8007722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076f8:	e013      	b.n	8007722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076fa:	4b56      	ldr	r3, [pc, #344]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10f      	bne.n	8007726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007706:	4b53      	ldr	r3, [pc, #332]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007716:	e006      	b.n	8007726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
      break;
 800771c:	e004      	b.n	8007728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800771e:	bf00      	nop
 8007720:	e002      	b.n	8007728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007722:	bf00      	nop
 8007724:	e000      	b.n	8007728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007726:	bf00      	nop
    }

    if(status == HAL_OK)
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800772e:	4b49      	ldr	r3, [pc, #292]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	3b01      	subs	r3, #1
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	430b      	orrs	r3, r1
 8007744:	4943      	ldr	r1, [pc, #268]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007746:	4313      	orrs	r3, r2
 8007748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d17c      	bne.n	800784a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007750:	4b40      	ldr	r3, [pc, #256]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a3f      	ldr	r2, [pc, #252]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800775a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775c:	f7fa fbd2 	bl	8001f04 <HAL_GetTick>
 8007760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007762:	e009      	b.n	8007778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007764:	f7fa fbce 	bl	8001f04 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d902      	bls.n	8007778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	73fb      	strb	r3, [r7, #15]
        break;
 8007776:	e005      	b.n	8007784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1ef      	bne.n	8007764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d15f      	bne.n	800784a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d110      	bne.n	80077b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007790:	4b30      	ldr	r3, [pc, #192]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6892      	ldr	r2, [r2, #8]
 80077a0:	0211      	lsls	r1, r2, #8
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68d2      	ldr	r2, [r2, #12]
 80077a6:	06d2      	lsls	r2, r2, #27
 80077a8:	430a      	orrs	r2, r1
 80077aa:	492a      	ldr	r1, [pc, #168]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	610b      	str	r3, [r1, #16]
 80077b0:	e027      	b.n	8007802 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d112      	bne.n	80077de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077b8:	4b26      	ldr	r3, [pc, #152]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80077c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6892      	ldr	r2, [r2, #8]
 80077c8:	0211      	lsls	r1, r2, #8
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6912      	ldr	r2, [r2, #16]
 80077ce:	0852      	lsrs	r2, r2, #1
 80077d0:	3a01      	subs	r2, #1
 80077d2:	0552      	lsls	r2, r2, #21
 80077d4:	430a      	orrs	r2, r1
 80077d6:	491f      	ldr	r1, [pc, #124]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
 80077dc:	e011      	b.n	8007802 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077de:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80077e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	0211      	lsls	r1, r2, #8
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6952      	ldr	r2, [r2, #20]
 80077f4:	0852      	lsrs	r2, r2, #1
 80077f6:	3a01      	subs	r2, #1
 80077f8:	0652      	lsls	r2, r2, #25
 80077fa:	430a      	orrs	r2, r1
 80077fc:	4915      	ldr	r1, [pc, #84]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a13      	ldr	r2, [pc, #76]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800780c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780e:	f7fa fb79 	bl	8001f04 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007814:	e009      	b.n	800782a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007816:	f7fa fb75 	bl	8001f04 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d902      	bls.n	800782a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	73fb      	strb	r3, [r7, #15]
          break;
 8007828:	e005      	b.n	8007836 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800782a:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0ef      	beq.n	8007816 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	4903      	ldr	r1, [pc, #12]	; (8007854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007846:	4313      	orrs	r3, r2
 8007848:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40021000 	.word	0x40021000

08007858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e095      	b.n	8007996 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787a:	d009      	beq.n	8007890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	61da      	str	r2, [r3, #28]
 8007882:	e005      	b.n	8007890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7f9 fef8 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d0:	d902      	bls.n	80078d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e002      	b.n	80078de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078e6:	d007      	beq.n	80078f8 <HAL_SPI_Init+0xa0>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078f0:	d002      	beq.n	80078f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	ea42 0103 	orr.w	r1, r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	0c1b      	lsrs	r3, r3, #16
 8007954:	f003 0204 	and.w	r2, r3, #4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007974:	ea42 0103 	orr.w	r1, r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d110      	bne.n	80079dc <HAL_SPI_Receive_IT+0x3c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079c2:	d10b      	bne.n	80079dc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f894 	bl	8007b00 <HAL_SPI_TransmitReceive_IT>
 80079d8:	4603      	mov	r3, r0
 80079da:	e089      	b.n	8007af0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_SPI_Receive_IT+0x4a>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e082      	b.n	8007af0 <HAL_SPI_Receive_IT+0x150>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d002      	beq.n	8007a04 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
 8007a00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a02:	e070      	b.n	8007ae6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_Receive_IT+0x70>
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a14:	e067      	b.n	8007ae6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a5a:	d90b      	bls.n	8007a74 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a6a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a22      	ldr	r2, [pc, #136]	; (8007af8 <HAL_SPI_Receive_IT+0x158>)
 8007a70:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a72:	e00a      	b.n	8007a8a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a82:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <HAL_SPI_Receive_IT+0x15c>)
 8007a88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a92:	d10f      	bne.n	8007ab4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ab2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007ac2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d008      	beq.n	8007ae4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e000      	b.n	8007ae6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007ae4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	080080ed 	.word	0x080080ed
 8007afc:	0800809d 	.word	0x0800809d

08007b00 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_SPI_TransmitReceive_IT+0x20>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e091      	b.n	8007c44 <HAL_SPI_TransmitReceive_IT+0x144>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b2e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b36:	7dbb      	ldrb	r3, [r7, #22]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d00d      	beq.n	8007b58 <HAL_SPI_TransmitReceive_IT+0x58>
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b42:	d106      	bne.n	8007b52 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_TransmitReceive_IT+0x52>
 8007b4c:	7dbb      	ldrb	r3, [r7, #22]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
 8007b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b56:	e070      	b.n	8007c3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007b64:	887b      	ldrh	r3, [r7, #2]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b6e:	e064      	b.n	8007c3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d003      	beq.n	8007b84 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2205      	movs	r2, #5
 8007b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	887a      	ldrh	r2, [r7, #2]
 8007b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	887a      	ldrh	r2, [r7, #2]
 8007ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	887a      	ldrh	r2, [r7, #2]
 8007bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bba:	d906      	bls.n	8007bca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a24      	ldr	r2, [pc, #144]	; (8007c50 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007bc0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a23      	ldr	r2, [pc, #140]	; (8007c54 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8007bc8:	e005      	b.n	8007bd6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4a22      	ldr	r2, [pc, #136]	; (8007c58 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007bce:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bde:	d802      	bhi.n	8007be6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007be0:	887b      	ldrh	r3, [r7, #2]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d908      	bls.n	8007bf8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bf4:	605a      	str	r2, [r3, #4]
 8007bf6:	e007      	b.n	8007c08 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c06:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007c16:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c22:	2b40      	cmp	r3, #64	; 0x40
 8007c24:	d008      	beq.n	8007c38 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e000      	b.n	8007c3a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007c38:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	08007fd7 	.word	0x08007fd7
 8007c54:	0800803d 	.word	0x0800803d
 8007c58:	08007e87 	.word	0x08007e87
 8007c5c:	08007f45 	.word	0x08007f45

08007c60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10e      	bne.n	8007ca0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
    return;
 8007c9e:	e0ce      	b.n	8007e3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_SPI_IRQHandler+0x5e>
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
    return;
 8007cbc:	e0bf      	b.n	8007e3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <HAL_SPI_IRQHandler+0x7e>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80b0 	beq.w	8007e3e <HAL_SPI_IRQHandler+0x1de>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80aa 	beq.w	8007e3e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d023      	beq.n	8007d3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d011      	beq.n	8007d24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d04:	f043 0204 	orr.w	r2, r3, #4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	e00b      	b.n	8007d3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d24:	2300      	movs	r3, #0
 8007d26:	613b      	str	r3, [r7, #16]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
        return;
 8007d3a:	e080      	b.n	8007e3e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d014      	beq.n	8007d70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4a:	f043 0201 	orr.w	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	f043 0208 	orr.w	r2, r3, #8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d04f      	beq.n	8007e3c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007daa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d104      	bne.n	8007dc8 <HAL_SPI_IRQHandler+0x168>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d034      	beq.n	8007e32 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0203 	bic.w	r2, r2, #3
 8007dd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de4:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <HAL_SPI_IRQHandler+0x1e4>)
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fb fc1f 	bl	8003630 <HAL_DMA_Abort_IT>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d016      	beq.n	8007e3a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <HAL_SPI_IRQHandler+0x1e4>)
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fb fc09 	bl	8003630 <HAL_DMA_Abort_IT>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007e30:	e003      	b.n	8007e3a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f808 	bl	8007e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e38:	e000      	b.n	8007e3c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007e3a:	bf00      	nop
    return;
 8007e3c:	bf00      	nop
  }
}
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	08007e5d 	.word	0x08007e5d

08007e48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff ffe5 	bl	8007e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d923      	bls.n	8007ee2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	b292      	uxth	r2, r2
 8007ea6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	1c9a      	adds	r2, r3, #2
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b02      	subs	r3, #2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d11f      	bne.n	8007f10 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ede:	605a      	str	r2, [r3, #4]
 8007ee0:	e016      	b.n	8007f10 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f103 020c 	add.w	r2, r3, #12
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10f      	bne.n	8007f3c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 faba 	bl	80084b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d912      	bls.n	8007f7c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	1c9a      	adds	r2, r3, #2
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b02      	subs	r3, #2
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f7a:	e012      	b.n	8007fa2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	7812      	ldrb	r2, [r2, #0]
 8007f88:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d110      	bne.n	8007fce <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa71 	bl	80084b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff0:	1c9a      	adds	r2, r3, #2
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10f      	bne.n	8008034 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008022:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa3e 	bl	80084b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	881a      	ldrh	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	1c9a      	adds	r2, r3, #2
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d110      	bne.n	8008094 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008080:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa0e 	bl	80084b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f103 020c 	add.w	r2, r3, #12
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa28 	bl	8008534 <SPI_CloseRx_ISR>
  }
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	b292      	uxth	r2, r2
 8008100:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa02 	bl	8008534 <SPI_CloseRx_ISR>
  }
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	4613      	mov	r3, r2
 8008146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008148:	f7f9 fedc 	bl	8001f04 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4413      	add	r3, r2
 8008156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008158:	f7f9 fed4 	bl	8001f04 <HAL_GetTick>
 800815c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800815e:	4b39      	ldr	r3, [pc, #228]	; (8008244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	015b      	lsls	r3, r3, #5
 8008164:	0d1b      	lsrs	r3, r3, #20
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	fb02 f303 	mul.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800816e:	e054      	b.n	800821a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d050      	beq.n	800821a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008178:	f7f9 fec4 	bl	8001f04 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	429a      	cmp	r2, r3
 8008186:	d902      	bls.n	800818e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d13d      	bne.n	800820a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800819c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081a6:	d111      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b0:	d004      	beq.n	80081bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ba:	d107      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d4:	d10f      	bne.n	80081f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e017      	b.n	800823a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3b01      	subs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d19b      	bne.n	8008170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	2000000c 	.word	0x2000000c

08008248 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	; 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800825a:	f7f9 fe53 	bl	8001f04 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	4413      	add	r3, r2
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800826a:	f7f9 fe4b 	bl	8001f04 <HAL_GetTick>
 800826e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008278:	4b3d      	ldr	r3, [pc, #244]	; (8008370 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	00da      	lsls	r2, r3, #3
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	0d1b      	lsrs	r3, r3, #20
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008290:	e060      	b.n	8008354 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008298:	d107      	bne.n	80082aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d050      	beq.n	8008354 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b2:	f7f9 fe27 	bl	8001f04 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082be:	429a      	cmp	r2, r3
 80082c0:	d902      	bls.n	80082c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d13d      	bne.n	8008344 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082e0:	d111      	bne.n	8008306 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ea:	d004      	beq.n	80082f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d107      	bne.n	8008306 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008304:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830e:	d10f      	bne.n	8008330 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800832e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e010      	b.n	8008366 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	3b01      	subs	r3, #1
 8008352:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689a      	ldr	r2, [r3, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d196      	bne.n	8008292 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3728      	adds	r7, #40	; 0x28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	2000000c 	.word	0x2000000c

08008374 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af02      	add	r7, sp, #8
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008388:	d111      	bne.n	80083ae <SPI_EndRxTransaction+0x3a>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008392:	d004      	beq.n	800839e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839c:	d107      	bne.n	80083ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2180      	movs	r1, #128	; 0x80
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff febd 	bl	8008138 <SPI_WaitFlagStateUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e023      	b.n	800841c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083dc:	d11d      	bne.n	800841a <SPI_EndRxTransaction+0xa6>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e6:	d004      	beq.n	80083f2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f0:	d113      	bne.n	800841a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff ff22 	bl	8008248 <SPI_WaitFifoStateUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800840e:	f043 0220 	orr.w	r2, r3, #32
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e000      	b.n	800841c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff ff03 	bl	8008248 <SPI_WaitFifoStateUntilTimeout>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800844c:	f043 0220 	orr.w	r2, r3, #32
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e027      	b.n	80084a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff fe68 	bl	8008138 <SPI_WaitFlagStateUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008472:	f043 0220 	orr.w	r2, r3, #32
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e014      	b.n	80084a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fedc 	bl	8008248 <SPI_WaitFifoStateUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849a:	f043 0220 	orr.w	r2, r3, #32
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e000      	b.n	80084a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b8:	f7f9 fd24 	bl	8001f04 <HAL_GetTick>
 80084bc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0220 	bic.w	r2, r2, #32
 80084cc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	2164      	movs	r1, #100	; 0x64
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff ffa6 	bl	8008424 <SPI_EndRxTxTransaction>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e2:	f043 0220 	orr.w	r2, r3, #32
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d115      	bne.n	800851e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d107      	bne.n	800850e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f9 f84a 	bl	80015a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800850c:	e00e      	b.n	800852c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7f9 f860 	bl	80015dc <HAL_SPI_TxRxCpltCallback>
}
 800851c:	e006      	b.n	800852c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fc8e 	bl	8007e48 <HAL_SPI_ErrorCallback>
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800854a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800854c:	f7f9 fcda 	bl	8001f04 <HAL_GetTick>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	2164      	movs	r1, #100	; 0x64
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff0c 	bl	8008374 <SPI_EndRxTransaction>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008566:	f043 0220 	orr.w	r2, r3, #32
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f9 f80e 	bl	80015a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008584:	e002      	b.n	800858c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fc5e 	bl	8007e48 <HAL_SPI_ErrorCallback>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e049      	b.n	800863a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f9 fad8 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f000 ff40 	bl	8009458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d001      	beq.n	800865c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e03b      	b.n	80086d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_TIM_Base_Start_IT+0x4e>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d004      	beq.n	8008692 <HAL_TIM_Base_Start_IT+0x4e>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a15      	ldr	r2, [pc, #84]	; (80086e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d115      	bne.n	80086be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800869a:	4013      	ands	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	d015      	beq.n	80086d0 <HAL_TIM_Base_Start_IT+0x8c>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086aa:	d011      	beq.n	80086d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086bc:	e008      	b.n	80086d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0201 	orr.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e000      	b.n	80086d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	40014000 	.word	0x40014000
 80086e8:	00010007 	.word	0x00010007

080086ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0201 	bic.w	r2, r2, #1
 8008702:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6a1a      	ldr	r2, [r3, #32]
 800870a:	f241 1311 	movw	r3, #4369	; 0x1111
 800870e:	4013      	ands	r3, r2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10f      	bne.n	8008734 <HAL_TIM_Base_Stop_IT+0x48>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	f240 4344 	movw	r3, #1092	; 0x444
 800871e:	4013      	ands	r3, r2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d107      	bne.n	8008734 <HAL_TIM_Base_Stop_IT+0x48>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e049      	b.n	80087f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f841 	bl	80087f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f000 fe65 	bl	8009458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <HAL_TIM_PWM_Start+0x24>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	bf14      	ite	ne
 8008828:	2301      	movne	r3, #1
 800882a:	2300      	moveq	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	e03c      	b.n	80088aa <HAL_TIM_PWM_Start+0x9e>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b04      	cmp	r3, #4
 8008834:	d109      	bne.n	800884a <HAL_TIM_PWM_Start+0x3e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b01      	cmp	r3, #1
 8008840:	bf14      	ite	ne
 8008842:	2301      	movne	r3, #1
 8008844:	2300      	moveq	r3, #0
 8008846:	b2db      	uxtb	r3, r3
 8008848:	e02f      	b.n	80088aa <HAL_TIM_PWM_Start+0x9e>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b08      	cmp	r3, #8
 800884e:	d109      	bne.n	8008864 <HAL_TIM_PWM_Start+0x58>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b01      	cmp	r3, #1
 800885a:	bf14      	ite	ne
 800885c:	2301      	movne	r3, #1
 800885e:	2300      	moveq	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	e022      	b.n	80088aa <HAL_TIM_PWM_Start+0x9e>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b0c      	cmp	r3, #12
 8008868:	d109      	bne.n	800887e <HAL_TIM_PWM_Start+0x72>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b01      	cmp	r3, #1
 8008874:	bf14      	ite	ne
 8008876:	2301      	movne	r3, #1
 8008878:	2300      	moveq	r3, #0
 800887a:	b2db      	uxtb	r3, r3
 800887c:	e015      	b.n	80088aa <HAL_TIM_PWM_Start+0x9e>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b10      	cmp	r3, #16
 8008882:	d109      	bne.n	8008898 <HAL_TIM_PWM_Start+0x8c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b01      	cmp	r3, #1
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	e008      	b.n	80088aa <HAL_TIM_PWM_Start+0x9e>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e07e      	b.n	80089b0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d104      	bne.n	80088c2 <HAL_TIM_PWM_Start+0xb6>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c0:	e023      	b.n	800890a <HAL_TIM_PWM_Start+0xfe>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d104      	bne.n	80088d2 <HAL_TIM_PWM_Start+0xc6>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d0:	e01b      	b.n	800890a <HAL_TIM_PWM_Start+0xfe>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d104      	bne.n	80088e2 <HAL_TIM_PWM_Start+0xd6>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e0:	e013      	b.n	800890a <HAL_TIM_PWM_Start+0xfe>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b0c      	cmp	r3, #12
 80088e6:	d104      	bne.n	80088f2 <HAL_TIM_PWM_Start+0xe6>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088f0:	e00b      	b.n	800890a <HAL_TIM_PWM_Start+0xfe>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d104      	bne.n	8008902 <HAL_TIM_PWM_Start+0xf6>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008900:	e003      	b.n	800890a <HAL_TIM_PWM_Start+0xfe>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2202      	movs	r2, #2
 8008906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2201      	movs	r2, #1
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f001 fa28 	bl	8009d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a26      	ldr	r2, [pc, #152]	; (80089b8 <HAL_TIM_PWM_Start+0x1ac>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_TIM_PWM_Start+0x12a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a25      	ldr	r2, [pc, #148]	; (80089bc <HAL_TIM_PWM_Start+0x1b0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_TIM_PWM_Start+0x12a>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a23      	ldr	r2, [pc, #140]	; (80089c0 <HAL_TIM_PWM_Start+0x1b4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d101      	bne.n	800893a <HAL_TIM_PWM_Start+0x12e>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <HAL_TIM_PWM_Start+0x130>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800894e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <HAL_TIM_PWM_Start+0x1ac>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d009      	beq.n	800896e <HAL_TIM_PWM_Start+0x162>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008962:	d004      	beq.n	800896e <HAL_TIM_PWM_Start+0x162>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a14      	ldr	r2, [pc, #80]	; (80089bc <HAL_TIM_PWM_Start+0x1b0>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d115      	bne.n	800899a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <HAL_TIM_PWM_Start+0x1b8>)
 8008976:	4013      	ands	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b06      	cmp	r3, #6
 800897e:	d015      	beq.n	80089ac <HAL_TIM_PWM_Start+0x1a0>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008986:	d011      	beq.n	80089ac <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008998:	e008      	b.n	80089ac <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0201 	orr.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e000      	b.n	80089ae <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40014400 	.word	0x40014400
 80089c4:	00010007 	.word	0x00010007

080089c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e049      	b.n	8008a6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f841 	bl	8008a76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f000 fd26 	bl	8009458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_IC_Start_IT+0x1e>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	e023      	b.n	8008af2 <HAL_TIM_IC_Start_IT+0x66>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d104      	bne.n	8008aba <HAL_TIM_IC_Start_IT+0x2e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e01b      	b.n	8008af2 <HAL_TIM_IC_Start_IT+0x66>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d104      	bne.n	8008aca <HAL_TIM_IC_Start_IT+0x3e>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	e013      	b.n	8008af2 <HAL_TIM_IC_Start_IT+0x66>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b0c      	cmp	r3, #12
 8008ace:	d104      	bne.n	8008ada <HAL_TIM_IC_Start_IT+0x4e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	e00b      	b.n	8008af2 <HAL_TIM_IC_Start_IT+0x66>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b10      	cmp	r3, #16
 8008ade:	d104      	bne.n	8008aea <HAL_TIM_IC_Start_IT+0x5e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	e003      	b.n	8008af2 <HAL_TIM_IC_Start_IT+0x66>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <HAL_TIM_IC_Start_IT+0x78>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	e013      	b.n	8008b2c <HAL_TIM_IC_Start_IT+0xa0>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d104      	bne.n	8008b14 <HAL_TIM_IC_Start_IT+0x88>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e00b      	b.n	8008b2c <HAL_TIM_IC_Start_IT+0xa0>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	d104      	bne.n	8008b24 <HAL_TIM_IC_Start_IT+0x98>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	e003      	b.n	8008b2c <HAL_TIM_IC_Start_IT+0xa0>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d102      	bne.n	8008b3a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b34:	7b7b      	ldrb	r3, [r7, #13]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d001      	beq.n	8008b3e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e0c9      	b.n	8008cd2 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_TIM_IC_Start_IT+0xc2>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b4c:	e023      	b.n	8008b96 <HAL_TIM_IC_Start_IT+0x10a>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d104      	bne.n	8008b5e <HAL_TIM_IC_Start_IT+0xd2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b5c:	e01b      	b.n	8008b96 <HAL_TIM_IC_Start_IT+0x10a>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d104      	bne.n	8008b6e <HAL_TIM_IC_Start_IT+0xe2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b6c:	e013      	b.n	8008b96 <HAL_TIM_IC_Start_IT+0x10a>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d104      	bne.n	8008b7e <HAL_TIM_IC_Start_IT+0xf2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b7c:	e00b      	b.n	8008b96 <HAL_TIM_IC_Start_IT+0x10a>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_IC_Start_IT+0x102>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b8c:	e003      	b.n	8008b96 <HAL_TIM_IC_Start_IT+0x10a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <HAL_TIM_IC_Start_IT+0x11a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba4:	e013      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x142>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d104      	bne.n	8008bb6 <HAL_TIM_IC_Start_IT+0x12a>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bb4:	e00b      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x142>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_IC_Start_IT+0x13a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bc4:	e003      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x142>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b0c      	cmp	r3, #12
 8008bd2:	d841      	bhi.n	8008c58 <HAL_TIM_IC_Start_IT+0x1cc>
 8008bd4:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <HAL_TIM_IC_Start_IT+0x150>)
 8008bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bda:	bf00      	nop
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008c59 	.word	0x08008c59
 8008be4:	08008c59 	.word	0x08008c59
 8008be8:	08008c59 	.word	0x08008c59
 8008bec:	08008c23 	.word	0x08008c23
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c59 	.word	0x08008c59
 8008bfc:	08008c35 	.word	0x08008c35
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008c59 	.word	0x08008c59
 8008c0c:	08008c47 	.word	0x08008c47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0202 	orr.w	r2, r2, #2
 8008c1e:	60da      	str	r2, [r3, #12]
      break;
 8008c20:	e01d      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0204 	orr.w	r2, r2, #4
 8008c30:	60da      	str	r2, [r3, #12]
      break;
 8008c32:	e014      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0208 	orr.w	r2, r2, #8
 8008c42:	60da      	str	r2, [r3, #12]
      break;
 8008c44:	e00b      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0210 	orr.w	r2, r2, #16
 8008c54:	60da      	str	r2, [r3, #12]
      break;
 8008c56:	e002      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d135      	bne.n	8008cd0 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 f87b 	bl	8009d68 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <HAL_TIM_IC_Start_IT+0x250>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d009      	beq.n	8008c90 <HAL_TIM_IC_Start_IT+0x204>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c84:	d004      	beq.n	8008c90 <HAL_TIM_IC_Start_IT+0x204>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <HAL_TIM_IC_Start_IT+0x254>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d115      	bne.n	8008cbc <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <HAL_TIM_IC_Start_IT+0x258>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b06      	cmp	r3, #6
 8008ca0:	d015      	beq.n	8008cce <HAL_TIM_IC_Start_IT+0x242>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca8:	d011      	beq.n	8008cce <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0201 	orr.w	r2, r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cba:	e008      	b.n	8008cce <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	e000      	b.n	8008cd0 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cce:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	40012c00 	.word	0x40012c00
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	00010007 	.word	0x00010007

08008ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d122      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d11b      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0202 	mvn.w	r2, #2
 8008d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7f8 fb62 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8008d30:	e005      	b.n	8008d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb71 	bl	800941a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb78 	bl	800942e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d122      	bne.n	8008d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d11b      	bne.n	8008d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0204 	mvn.w	r2, #4
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f8 fb38 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8008d84:	e005      	b.n	8008d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb47 	bl	800941a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb4e 	bl	800942e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d122      	bne.n	8008dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d11b      	bne.n	8008dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0208 	mvn.w	r2, #8
 8008dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7f8 fb0e 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8008dd8:	e005      	b.n	8008de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb1d 	bl	800941a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fb24 	bl	800942e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b10      	cmp	r3, #16
 8008df8:	d122      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d11b      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0210 	mvn.w	r2, #16
 8008e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2208      	movs	r2, #8
 8008e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f8 fae4 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8008e2c:	e005      	b.n	8008e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 faf3 	bl	800941a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fafa 	bl	800942e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d10e      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d107      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0201 	mvn.w	r2, #1
 8008e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f8 fb8c 	bl	8001584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e76:	2b80      	cmp	r3, #128	; 0x80
 8008e78:	d10e      	bne.n	8008e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e84:	2b80      	cmp	r3, #128	; 0x80
 8008e86:	d107      	bne.n	8008e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f876 	bl	8009f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea6:	d10e      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d107      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 f869 	bl	8009f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 faa8 	bl	8009442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d10e      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d107      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f06f 0220 	mvn.w	r2, #32
 8008f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f829 	bl	8009f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b086      	sub	sp, #24
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e088      	b.n	8009056 <HAL_TIM_IC_ConfigChannel+0x130>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d11b      	bne.n	8008f8a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008f62:	f000 fd5b 	bl	8009a1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 020c 	bic.w	r2, r2, #12
 8008f74:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6999      	ldr	r1, [r3, #24]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	619a      	str	r2, [r3, #24]
 8008f88:	e060      	b.n	800904c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d11c      	bne.n	8008fca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008fa0:	f000 fdc1 	bl	8009b26 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fb2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	021a      	lsls	r2, r3, #8
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	619a      	str	r2, [r3, #24]
 8008fc8:	e040      	b.n	800904c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d11b      	bne.n	8009008 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008fe0:	f000 fe0e 	bl	8009c00 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69da      	ldr	r2, [r3, #28]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 020c 	bic.w	r2, r2, #12
 8008ff2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69d9      	ldr	r1, [r3, #28]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	61da      	str	r2, [r3, #28]
 8009006:	e021      	b.n	800904c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b0c      	cmp	r3, #12
 800900c:	d11c      	bne.n	8009048 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800901e:	f000 fe2b 	bl	8009c78 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009030:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69d9      	ldr	r1, [r3, #28]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	021a      	lsls	r2, r3, #8
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	61da      	str	r2, [r3, #28]
 8009046:	e001      	b.n	800904c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009054:	7dfb      	ldrb	r3, [r7, #23]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800907a:	2302      	movs	r3, #2
 800907c:	e0ff      	b.n	800927e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b14      	cmp	r3, #20
 800908a:	f200 80f0 	bhi.w	800926e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090e9 	.word	0x080090e9
 8009098:	0800926f 	.word	0x0800926f
 800909c:	0800926f 	.word	0x0800926f
 80090a0:	0800926f 	.word	0x0800926f
 80090a4:	08009129 	.word	0x08009129
 80090a8:	0800926f 	.word	0x0800926f
 80090ac:	0800926f 	.word	0x0800926f
 80090b0:	0800926f 	.word	0x0800926f
 80090b4:	0800916b 	.word	0x0800916b
 80090b8:	0800926f 	.word	0x0800926f
 80090bc:	0800926f 	.word	0x0800926f
 80090c0:	0800926f 	.word	0x0800926f
 80090c4:	080091ab 	.word	0x080091ab
 80090c8:	0800926f 	.word	0x0800926f
 80090cc:	0800926f 	.word	0x0800926f
 80090d0:	0800926f 	.word	0x0800926f
 80090d4:	080091ed 	.word	0x080091ed
 80090d8:	0800926f 	.word	0x0800926f
 80090dc:	0800926f 	.word	0x0800926f
 80090e0:	0800926f 	.word	0x0800926f
 80090e4:	0800922d 	.word	0x0800922d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fa16 	bl	8009520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0208 	orr.w	r2, r2, #8
 8009102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0204 	bic.w	r2, r2, #4
 8009112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6999      	ldr	r1, [r3, #24]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	619a      	str	r2, [r3, #24]
      break;
 8009126:	e0a5      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68b9      	ldr	r1, [r7, #8]
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fa72 	bl	8009618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6999      	ldr	r1, [r3, #24]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	021a      	lsls	r2, r3, #8
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	619a      	str	r2, [r3, #24]
      break;
 8009168:	e084      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 facb 	bl	800970c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0208 	orr.w	r2, r2, #8
 8009184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0204 	bic.w	r2, r2, #4
 8009194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69d9      	ldr	r1, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691a      	ldr	r2, [r3, #16]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	61da      	str	r2, [r3, #28]
      break;
 80091a8:	e064      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fb23 	bl	80097fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69da      	ldr	r2, [r3, #28]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69d9      	ldr	r1, [r3, #28]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	021a      	lsls	r2, r3, #8
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	61da      	str	r2, [r3, #28]
      break;
 80091ea:	e043      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fb60 	bl	80098b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0208 	orr.w	r2, r2, #8
 8009206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0204 	bic.w	r2, r2, #4
 8009216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800922a:	e023      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fb98 	bl	8009968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	021a      	lsls	r2, r3, #8
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800926c:	e002      	b.n	8009274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	75fb      	strb	r3, [r7, #23]
      break;
 8009272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop

08009288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_TIM_ConfigClockSource+0x1c>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e0b6      	b.n	8009412 <HAL_TIM_ConfigClockSource+0x18a>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e0:	d03e      	beq.n	8009360 <HAL_TIM_ConfigClockSource+0xd8>
 80092e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e6:	f200 8087 	bhi.w	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 80092ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ee:	f000 8086 	beq.w	80093fe <HAL_TIM_ConfigClockSource+0x176>
 80092f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f6:	d87f      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 80092f8:	2b70      	cmp	r3, #112	; 0x70
 80092fa:	d01a      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0xaa>
 80092fc:	2b70      	cmp	r3, #112	; 0x70
 80092fe:	d87b      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009300:	2b60      	cmp	r3, #96	; 0x60
 8009302:	d050      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x11e>
 8009304:	2b60      	cmp	r3, #96	; 0x60
 8009306:	d877      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009308:	2b50      	cmp	r3, #80	; 0x50
 800930a:	d03c      	beq.n	8009386 <HAL_TIM_ConfigClockSource+0xfe>
 800930c:	2b50      	cmp	r3, #80	; 0x50
 800930e:	d873      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d058      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x13e>
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d86f      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009318:	2b30      	cmp	r3, #48	; 0x30
 800931a:	d064      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x15e>
 800931c:	2b30      	cmp	r3, #48	; 0x30
 800931e:	d86b      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009320:	2b20      	cmp	r3, #32
 8009322:	d060      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x15e>
 8009324:	2b20      	cmp	r3, #32
 8009326:	d867      	bhi.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d05c      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x15e>
 800932c:	2b10      	cmp	r3, #16
 800932e:	d05a      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x15e>
 8009330:	e062      	b.n	80093f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009342:	f000 fcf1 	bl	8009d28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	609a      	str	r2, [r3, #8]
      break;
 800935e:	e04f      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009370:	f000 fcda 	bl	8009d28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009382:	609a      	str	r2, [r3, #8]
      break;
 8009384:	e03c      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	461a      	mov	r2, r3
 8009394:	f000 fb98 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2150      	movs	r1, #80	; 0x50
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fca7 	bl	8009cf2 <TIM_ITRx_SetConfig>
      break;
 80093a4:	e02c      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093b2:	461a      	mov	r2, r3
 80093b4:	f000 fbf4 	bl	8009ba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2160      	movs	r1, #96	; 0x60
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fc97 	bl	8009cf2 <TIM_ITRx_SetConfig>
      break;
 80093c4:	e01c      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 fb78 	bl	8009ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2140      	movs	r1, #64	; 0x40
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fc87 	bl	8009cf2 <TIM_ITRx_SetConfig>
      break;
 80093e4:	e00c      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f000 fc7e 	bl	8009cf2 <TIM_ITRx_SetConfig>
      break;
 80093f6:	e003      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e000      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80093fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a2a      	ldr	r2, [pc, #168]	; (8009514 <TIM_Base_SetConfig+0xbc>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0x20>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009476:	d108      	bne.n	800948a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a21      	ldr	r2, [pc, #132]	; (8009514 <TIM_Base_SetConfig+0xbc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x52>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x52>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <TIM_Base_SetConfig+0xc0>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x52>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1d      	ldr	r2, [pc, #116]	; (800951c <TIM_Base_SetConfig+0xc4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <TIM_Base_SetConfig+0xbc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d007      	beq.n	80094f8 <TIM_Base_SetConfig+0xa0>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <TIM_Base_SetConfig+0xc0>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <TIM_Base_SetConfig+0xa0>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a0a      	ldr	r2, [pc, #40]	; (800951c <TIM_Base_SetConfig+0xc4>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d103      	bne.n	8009500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	615a      	str	r2, [r3, #20]
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40014000 	.word	0x40014000
 800951c:	40014400 	.word	0x40014400

08009520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f023 0302 	bic.w	r3, r3, #2
 800956c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a24      	ldr	r2, [pc, #144]	; (800960c <TIM_OC1_SetConfig+0xec>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d007      	beq.n	8009590 <TIM_OC1_SetConfig+0x70>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a23      	ldr	r2, [pc, #140]	; (8009610 <TIM_OC1_SetConfig+0xf0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d003      	beq.n	8009590 <TIM_OC1_SetConfig+0x70>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a22      	ldr	r2, [pc, #136]	; (8009614 <TIM_OC1_SetConfig+0xf4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d10c      	bne.n	80095aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f023 0308 	bic.w	r3, r3, #8
 8009596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f023 0304 	bic.w	r3, r3, #4
 80095a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a17      	ldr	r2, [pc, #92]	; (800960c <TIM_OC1_SetConfig+0xec>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <TIM_OC1_SetConfig+0xa2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a16      	ldr	r2, [pc, #88]	; (8009610 <TIM_OC1_SetConfig+0xf0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d003      	beq.n	80095c2 <TIM_OC1_SetConfig+0xa2>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a15      	ldr	r2, [pc, #84]	; (8009614 <TIM_OC1_SetConfig+0xf4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d111      	bne.n	80095e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	621a      	str	r2, [r3, #32]
}
 8009600:	bf00      	nop
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40012c00 	.word	0x40012c00
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400

08009618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	f023 0210 	bic.w	r2, r3, #16
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0320 	bic.w	r3, r3, #32
 8009666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a22      	ldr	r2, [pc, #136]	; (8009700 <TIM_OC2_SetConfig+0xe8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d10d      	bne.n	8009698 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a19      	ldr	r2, [pc, #100]	; (8009700 <TIM_OC2_SetConfig+0xe8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <TIM_OC2_SetConfig+0x98>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a18      	ldr	r2, [pc, #96]	; (8009704 <TIM_OC2_SetConfig+0xec>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_OC2_SetConfig+0x98>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <TIM_OC2_SetConfig+0xf0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d113      	bne.n	80096d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	621a      	str	r2, [r3, #32]
}
 80096f2:	bf00      	nop
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40012c00 	.word	0x40012c00
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400

0800970c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800973a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a21      	ldr	r2, [pc, #132]	; (80097f0 <TIM_OC3_SetConfig+0xe4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d10d      	bne.n	800978a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <TIM_OC3_SetConfig+0xe4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d007      	beq.n	80097a2 <TIM_OC3_SetConfig+0x96>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a17      	ldr	r2, [pc, #92]	; (80097f4 <TIM_OC3_SetConfig+0xe8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d003      	beq.n	80097a2 <TIM_OC3_SetConfig+0x96>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a16      	ldr	r2, [pc, #88]	; (80097f8 <TIM_OC3_SetConfig+0xec>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d113      	bne.n	80097ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	621a      	str	r2, [r3, #32]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40014400 	.word	0x40014400

080097fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800982a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800984a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	031b      	lsls	r3, r3, #12
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a14      	ldr	r2, [pc, #80]	; (80098ac <TIM_OC4_SetConfig+0xb0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <TIM_OC4_SetConfig+0x74>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <TIM_OC4_SetConfig+0xb4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_OC4_SetConfig+0x74>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a12      	ldr	r2, [pc, #72]	; (80098b4 <TIM_OC4_SetConfig+0xb8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d109      	bne.n	8009884 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	019b      	lsls	r3, r3, #6
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400

080098b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	041b      	lsls	r3, r3, #16
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a13      	ldr	r2, [pc, #76]	; (800995c <TIM_OC5_SetConfig+0xa4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_OC5_SetConfig+0x6a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a12      	ldr	r2, [pc, #72]	; (8009960 <TIM_OC5_SetConfig+0xa8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_OC5_SetConfig+0x6a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <TIM_OC5_SetConfig+0xac>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d109      	bne.n	8009936 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009928:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	021b      	lsls	r3, r3, #8
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	4313      	orrs	r3, r2
 8009934:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	621a      	str	r2, [r3, #32]
}
 8009950:	bf00      	nop
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	40012c00 	.word	0x40012c00
 8009960:	40014000 	.word	0x40014000
 8009964:	40014400 	.word	0x40014400

08009968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	051b      	lsls	r3, r3, #20
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a14      	ldr	r2, [pc, #80]	; (8009a10 <TIM_OC6_SetConfig+0xa8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d007      	beq.n	80099d4 <TIM_OC6_SetConfig+0x6c>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <TIM_OC6_SetConfig+0xac>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d003      	beq.n	80099d4 <TIM_OC6_SetConfig+0x6c>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a12      	ldr	r2, [pc, #72]	; (8009a18 <TIM_OC6_SetConfig+0xb0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d109      	bne.n	80099e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	029b      	lsls	r3, r3, #10
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	621a      	str	r2, [r3, #32]
}
 8009a02:	bf00      	nop
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	40012c00 	.word	0x40012c00
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400

08009a1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	f023 0201 	bic.w	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <TIM_TI1_SetConfig+0xa4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d007      	beq.n	8009a5a <TIM_TI1_SetConfig+0x3e>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a50:	d003      	beq.n	8009a5a <TIM_TI1_SetConfig+0x3e>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4a1b      	ldr	r2, [pc, #108]	; (8009ac4 <TIM_TI1_SetConfig+0xa8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d101      	bne.n	8009a5e <TIM_TI1_SetConfig+0x42>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e000      	b.n	8009a60 <TIM_TI1_SetConfig+0x44>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d008      	beq.n	8009a76 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	e003      	b.n	8009a7e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f043 0301 	orr.w	r3, r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f023 030a 	bic.w	r3, r3, #10
 8009a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f003 030a 	and.w	r3, r3, #10
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40012c00 	.word	0x40012c00
 8009ac4:	40014000 	.word	0x40014000

08009ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f023 0201 	bic.w	r2, r3, #1
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 030a 	bic.w	r3, r3, #10
 8009b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	f023 0210 	bic.w	r2, r3, #16
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	031b      	lsls	r3, r3, #12
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	621a      	str	r2, [r3, #32]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	f023 0210 	bic.w	r2, r3, #16
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	031b      	lsls	r3, r3, #12
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	621a      	str	r2, [r3, #32]
}
 8009bf4:	bf00      	nop
 8009bf6:	371c      	adds	r7, #28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009c50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	621a      	str	r2, [r3, #32]
}
 8009c6c:	bf00      	nop
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	031b      	lsls	r3, r3, #12
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009cca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	031b      	lsls	r3, r3, #12
 8009cd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	621a      	str	r2, [r3, #32]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f043 0307 	orr.w	r3, r3, #7
 8009d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	021a      	lsls	r2, r3, #8
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	609a      	str	r2, [r3, #8]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a1a      	ldr	r2, [r3, #32]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	401a      	ands	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1a      	ldr	r2, [r3, #32]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f003 031f 	and.w	r3, r3, #31
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	431a      	orrs	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e04f      	b.n	8009e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a21      	ldr	r2, [pc, #132]	; (8009e78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d108      	bne.n	8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a14      	ldr	r2, [pc, #80]	; (8009e78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d009      	beq.n	8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e34:	d004      	beq.n	8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a10      	ldr	r2, [pc, #64]	; (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10c      	bne.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	40012c00 	.word	0x40012c00
 8009e7c:	40014000 	.word	0x40014000

08009e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e060      	b.n	8009f5e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	041b      	lsls	r3, r3, #16
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a14      	ldr	r2, [pc, #80]	; (8009f6c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d115      	bne.n	8009f4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	051b      	lsls	r3, r3, #20
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	40012c00 	.word	0x40012c00

08009f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e040      	b.n	800a040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d106      	bne.n	8009fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7f7 feae 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2224      	movs	r2, #36	; 0x24
 8009fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0201 	bic.w	r2, r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f82c 	bl	800a048 <UART_SetConfig>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e022      	b.n	800a040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa4c 	bl	800a4a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fad3 	bl	800a5e4 <UART_CheckIdleState>
 800a03e:	4603      	mov	r3, r0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a04c:	b08a      	sub	sp, #40	; 0x28
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	431a      	orrs	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	431a      	orrs	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	4bb4      	ldr	r3, [pc, #720]	; (800a348 <UART_SetConfig+0x300>)
 800a078:	4013      	ands	r3, r2
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a080:	430b      	orrs	r3, r1
 800a082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68da      	ldr	r2, [r3, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4aa9      	ldr	r2, [pc, #676]	; (800a34c <UART_SetConfig+0x304>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d004      	beq.n	800a0b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4aa0      	ldr	r2, [pc, #640]	; (800a350 <UART_SetConfig+0x308>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d126      	bne.n	800a120 <UART_SetConfig+0xd8>
 800a0d2:	4ba0      	ldr	r3, [pc, #640]	; (800a354 <UART_SetConfig+0x30c>)
 800a0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d81b      	bhi.n	800a118 <UART_SetConfig+0xd0>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <UART_SetConfig+0xa0>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a0f9 	.word	0x0800a0f9
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a101 	.word	0x0800a101
 800a0f4:	0800a111 	.word	0x0800a111
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0fe:	e080      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a100:	2302      	movs	r3, #2
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a106:	e07c      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a10e:	e078      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a116:	e074      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a11e:	e070      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a8c      	ldr	r2, [pc, #560]	; (800a358 <UART_SetConfig+0x310>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d138      	bne.n	800a19c <UART_SetConfig+0x154>
 800a12a:	4b8a      	ldr	r3, [pc, #552]	; (800a354 <UART_SetConfig+0x30c>)
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	f003 030c 	and.w	r3, r3, #12
 800a134:	2b0c      	cmp	r3, #12
 800a136:	d82d      	bhi.n	800a194 <UART_SetConfig+0x14c>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0xf8>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a175 	.word	0x0800a175
 800a144:	0800a195 	.word	0x0800a195
 800a148:	0800a195 	.word	0x0800a195
 800a14c:	0800a195 	.word	0x0800a195
 800a150:	0800a185 	.word	0x0800a185
 800a154:	0800a195 	.word	0x0800a195
 800a158:	0800a195 	.word	0x0800a195
 800a15c:	0800a195 	.word	0x0800a195
 800a160:	0800a17d 	.word	0x0800a17d
 800a164:	0800a195 	.word	0x0800a195
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	0800a195 	.word	0x0800a195
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	2300      	movs	r3, #0
 800a176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a17a:	e042      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a17c:	2302      	movs	r3, #2
 800a17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a182:	e03e      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a184:	2304      	movs	r3, #4
 800a186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a18a:	e03a      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a18c:	2308      	movs	r3, #8
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a192:	e036      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a194:	2310      	movs	r3, #16
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a19a:	e032      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a6a      	ldr	r2, [pc, #424]	; (800a34c <UART_SetConfig+0x304>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d12a      	bne.n	800a1fc <UART_SetConfig+0x1b4>
 800a1a6:	4b6b      	ldr	r3, [pc, #428]	; (800a354 <UART_SetConfig+0x30c>)
 800a1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1b4:	d01a      	beq.n	800a1ec <UART_SetConfig+0x1a4>
 800a1b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1ba:	d81b      	bhi.n	800a1f4 <UART_SetConfig+0x1ac>
 800a1bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c0:	d00c      	beq.n	800a1dc <UART_SetConfig+0x194>
 800a1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c6:	d815      	bhi.n	800a1f4 <UART_SetConfig+0x1ac>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <UART_SetConfig+0x18c>
 800a1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d0:	d008      	beq.n	800a1e4 <UART_SetConfig+0x19c>
 800a1d2:	e00f      	b.n	800a1f4 <UART_SetConfig+0x1ac>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1da:	e012      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1e2:	e00e      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1ea:	e00a      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f2:	e006      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1fa:	e002      	b.n	800a202 <UART_SetConfig+0x1ba>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a51      	ldr	r2, [pc, #324]	; (800a34c <UART_SetConfig+0x304>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d17a      	bne.n	800a302 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a20c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a210:	2b08      	cmp	r3, #8
 800a212:	d824      	bhi.n	800a25e <UART_SetConfig+0x216>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <UART_SetConfig+0x1d4>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a25f 	.word	0x0800a25f
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a25f 	.word	0x0800a25f
 800a22c:	0800a24f 	.word	0x0800a24f
 800a230:	0800a25f 	.word	0x0800a25f
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	0800a25f 	.word	0x0800a25f
 800a23c:	0800a257 	.word	0x0800a257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a240:	f7fc ff86 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 800a244:	61f8      	str	r0, [r7, #28]
        break;
 800a246:	e010      	b.n	800a26a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a248:	4b44      	ldr	r3, [pc, #272]	; (800a35c <UART_SetConfig+0x314>)
 800a24a:	61fb      	str	r3, [r7, #28]
        break;
 800a24c:	e00d      	b.n	800a26a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24e:	f7fc fee7 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800a252:	61f8      	str	r0, [r7, #28]
        break;
 800a254:	e009      	b.n	800a26a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a25a:	61fb      	str	r3, [r7, #28]
        break;
 800a25c:	e005      	b.n	800a26a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8107 	beq.w	800a480 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	4413      	add	r3, r2
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d305      	bcc.n	800a28e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d903      	bls.n	800a296 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a294:	e0f4      	b.n	800a480 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	2200      	movs	r2, #0
 800a29a:	461c      	mov	r4, r3
 800a29c:	4615      	mov	r5, r2
 800a29e:	f04f 0200 	mov.w	r2, #0
 800a2a2:	f04f 0300 	mov.w	r3, #0
 800a2a6:	022b      	lsls	r3, r5, #8
 800a2a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a2ac:	0222      	lsls	r2, r4, #8
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6849      	ldr	r1, [r1, #4]
 800a2b2:	0849      	lsrs	r1, r1, #1
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	4688      	mov	r8, r1
 800a2b8:	4681      	mov	r9, r0
 800a2ba:	eb12 0a08 	adds.w	sl, r2, r8
 800a2be:	eb43 0b09 	adc.w	fp, r3, r9
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	4659      	mov	r1, fp
 800a2d4:	f7f5 ffcc 	bl	8000270 <__aeabi_uldivmod>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4613      	mov	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2e6:	d308      	bcc.n	800a2fa <UART_SetConfig+0x2b2>
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ee:	d204      	bcs.n	800a2fa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	60da      	str	r2, [r3, #12]
 800a2f8:	e0c2      	b.n	800a480 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a300:	e0be      	b.n	800a480 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30a:	d16a      	bne.n	800a3e2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a30c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a310:	2b08      	cmp	r3, #8
 800a312:	d834      	bhi.n	800a37e <UART_SetConfig+0x336>
 800a314:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0x2d4>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a361 	.word	0x0800a361
 800a324:	0800a369 	.word	0x0800a369
 800a328:	0800a37f 	.word	0x0800a37f
 800a32c:	0800a36f 	.word	0x0800a36f
 800a330:	0800a37f 	.word	0x0800a37f
 800a334:	0800a37f 	.word	0x0800a37f
 800a338:	0800a37f 	.word	0x0800a37f
 800a33c:	0800a377 	.word	0x0800a377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a340:	f7fc ff06 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 800a344:	61f8      	str	r0, [r7, #28]
        break;
 800a346:	e020      	b.n	800a38a <UART_SetConfig+0x342>
 800a348:	efff69f3 	.word	0xefff69f3
 800a34c:	40008000 	.word	0x40008000
 800a350:	40013800 	.word	0x40013800
 800a354:	40021000 	.word	0x40021000
 800a358:	40004400 	.word	0x40004400
 800a35c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a360:	f7fc ff0c 	bl	800717c <HAL_RCC_GetPCLK2Freq>
 800a364:	61f8      	str	r0, [r7, #28]
        break;
 800a366:	e010      	b.n	800a38a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a368:	4b4c      	ldr	r3, [pc, #304]	; (800a49c <UART_SetConfig+0x454>)
 800a36a:	61fb      	str	r3, [r7, #28]
        break;
 800a36c:	e00d      	b.n	800a38a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a36e:	f7fc fe57 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800a372:	61f8      	str	r0, [r7, #28]
        break;
 800a374:	e009      	b.n	800a38a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37a:	61fb      	str	r3, [r7, #28]
        break;
 800a37c:	e005      	b.n	800a38a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d077      	beq.n	800a480 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	005a      	lsls	r2, r3, #1
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	085b      	lsrs	r3, r3, #1
 800a39a:	441a      	add	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b0f      	cmp	r3, #15
 800a3aa:	d916      	bls.n	800a3da <UART_SetConfig+0x392>
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b2:	d212      	bcs.n	800a3da <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f023 030f 	bic.w	r3, r3, #15
 800a3bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	085b      	lsrs	r3, r3, #1
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	8afb      	ldrh	r3, [r7, #22]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	8afa      	ldrh	r2, [r7, #22]
 800a3d6:	60da      	str	r2, [r3, #12]
 800a3d8:	e052      	b.n	800a480 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a3e0:	e04e      	b.n	800a480 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d827      	bhi.n	800a43a <UART_SetConfig+0x3f2>
 800a3ea:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <UART_SetConfig+0x3a8>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a41d 	.word	0x0800a41d
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	0800a43b 	.word	0x0800a43b
 800a400:	0800a42b 	.word	0x0800a42b
 800a404:	0800a43b 	.word	0x0800a43b
 800a408:	0800a43b 	.word	0x0800a43b
 800a40c:	0800a43b 	.word	0x0800a43b
 800a410:	0800a433 	.word	0x0800a433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a414:	f7fc fe9c 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 800a418:	61f8      	str	r0, [r7, #28]
        break;
 800a41a:	e014      	b.n	800a446 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41c:	f7fc feae 	bl	800717c <HAL_RCC_GetPCLK2Freq>
 800a420:	61f8      	str	r0, [r7, #28]
        break;
 800a422:	e010      	b.n	800a446 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a424:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <UART_SetConfig+0x454>)
 800a426:	61fb      	str	r3, [r7, #28]
        break;
 800a428:	e00d      	b.n	800a446 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a42a:	f7fc fdf9 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800a42e:	61f8      	str	r0, [r7, #28]
        break;
 800a430:	e009      	b.n	800a446 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a436:	61fb      	str	r3, [r7, #28]
        break;
 800a438:	e005      	b.n	800a446 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a444:	bf00      	nop
    }

    if (pclk != 0U)
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	085a      	lsrs	r2, r3, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	441a      	add	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d909      	bls.n	800a47a <UART_SetConfig+0x432>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a46c:	d205      	bcs.n	800a47a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	b29a      	uxth	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60da      	str	r2, [r3, #12]
 800a478:	e002      	b.n	800a480 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a48c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a490:	4618      	mov	r0, r3
 800a492:	3728      	adds	r7, #40	; 0x28
 800a494:	46bd      	mov	sp, r7
 800a496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49a:	bf00      	nop
 800a49c:	00f42400 	.word	0x00f42400

0800a4a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a512:	f003 0308 	and.w	r3, r3, #8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	f003 0310 	and.w	r3, r3, #16
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01a      	beq.n	800a5b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a59e:	d10a      	bne.n	800a5b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	605a      	str	r2, [r3, #4]
  }
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5f4:	f7f7 fc86 	bl	8001f04 <HAL_GetTick>
 800a5f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b08      	cmp	r3, #8
 800a606:	d10e      	bne.n	800a626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f82d 	bl	800a676 <UART_WaitOnFlagUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e023      	b.n	800a66e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b04      	cmp	r3, #4
 800a632:	d10e      	bne.n	800a652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f817 	bl	800a676 <UART_WaitOnFlagUntilTimeout>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e00d      	b.n	800a66e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2220      	movs	r2, #32
 800a65c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b09c      	sub	sp, #112	; 0x70
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	4613      	mov	r3, r2
 800a684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a686:	e0a5      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68e:	f000 80a1 	beq.w	800a7d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a692:	f7f7 fc37 	bl	8001f04 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d302      	bcc.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d13e      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e6      	bne.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	f023 0301 	bic.w	r3, r3, #1
 800a6f0:	663b      	str	r3, [r7, #96]	; 0x60
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e067      	b.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d04f      	beq.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a742:	d147      	bne.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a74c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a762:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
 800a76e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e6      	bne.n	800a74e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	613b      	str	r3, [r7, #16]
   return(result);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	66bb      	str	r3, [r7, #104]	; 0x68
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3308      	adds	r3, #8
 800a79e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7a0:	623a      	str	r2, [r7, #32]
 800a7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	6a3a      	ldr	r2, [r7, #32]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e5      	bne.n	800a780 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e010      	b.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69da      	ldr	r2, [r3, #28]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4013      	ands	r3, r2
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	bf0c      	ite	eq
 800a7e4:	2301      	moveq	r3, #1
 800a7e6:	2300      	movne	r3, #0
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	f43f af4a 	beq.w	800a688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3770      	adds	r7, #112	; 0x70
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a7fe:	b084      	sub	sp, #16
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	f107 0014 	add.w	r0, r7, #20
 800a80c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	b004      	add	sp, #16
 800a81e:	4770      	bx	lr

0800a820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a830:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a834:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	b29a      	uxth	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a84e:	b480      	push	{r7}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a856:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a85a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a862:	b29a      	uxth	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	b29b      	uxth	r3, r3
 800a868:	43db      	mvns	r3, r3
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	4013      	ands	r3, r2
 800a86e:	b29a      	uxth	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a89e:	b084      	sub	sp, #16
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	f107 0014 	add.w	r0, r7, #20
 800a8ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	b004      	add	sp, #16
 800a8de:	4770      	bx	lr

0800a8e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b09d      	sub	sp, #116	; 0x74
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a906:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	78db      	ldrb	r3, [r3, #3]
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d81f      	bhi.n	800a952 <USB_ActivateEndpoint+0x72>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <USB_ActivateEndpoint+0x38>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a929 	.word	0x0800a929
 800a91c:	0800a945 	.word	0x0800a945
 800a920:	0800a95b 	.word	0x0800a95b
 800a924:	0800a937 	.word	0x0800a937
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a928:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a92c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a930:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a934:	e012      	b.n	800a95c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a936:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a93a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a93e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a942:	e00b      	b.n	800a95c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a944:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a94c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a950:	e004      	b.n	800a95c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a958:	e000      	b.n	800a95c <USB_ActivateEndpoint+0x7c>
      break;
 800a95a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	441a      	add	r2, r3
 800a966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	b21b      	sxth	r3, r3
 800a98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a996:	b21a      	sxth	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	b21b      	sxth	r3, r3
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	b21b      	sxth	r3, r3
 800a9a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	441a      	add	r2, r3
 800a9b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a9b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	7b1b      	ldrb	r3, [r3, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 816e 	bne.w	800acae <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	785b      	ldrb	r3, [r3, #1]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8084 	beq.w	800aae4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	00da      	lsls	r2, r3, #3
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	88db      	ldrh	r3, [r3, #6]
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	827b      	strh	r3, [r7, #18]
 800aa1e:	8a7b      	ldrh	r3, [r7, #18]
 800aa20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01b      	beq.n	800aa60 <USB_ActivateEndpoint+0x180>
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3e:	823b      	strh	r3, [r7, #16]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	441a      	add	r2, r3
 800aa4a:	8a3b      	ldrh	r3, [r7, #16]
 800aa4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	78db      	ldrb	r3, [r3, #3]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d020      	beq.n	800aaaa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7e:	81bb      	strh	r3, [r7, #12]
 800aa80:	89bb      	ldrh	r3, [r7, #12]
 800aa82:	f083 0320 	eor.w	r3, r3, #32
 800aa86:	81bb      	strh	r3, [r7, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	441a      	add	r2, r3
 800aa92:	89bb      	ldrh	r3, [r7, #12]
 800aa94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	8013      	strh	r3, [r2, #0]
 800aaa8:	e2cb      	b.n	800b042 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aac0:	81fb      	strh	r3, [r7, #14]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	441a      	add	r2, r3
 800aacc:	89fb      	ldrh	r3, [r7, #14]
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]
 800aae2:	e2ae      	b.n	800b042 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	633b      	str	r3, [r7, #48]	; 0x30
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	4413      	add	r3, r2
 800aaf6:	633b      	str	r3, [r7, #48]	; 0x30
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	00da      	lsls	r2, r3, #3
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	4413      	add	r3, r2
 800ab02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	085b      	lsrs	r3, r3, #1
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	461a      	mov	r2, r3
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	4413      	add	r3, r2
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	00da      	lsls	r2, r3, #3
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	4413      	add	r3, r2
 800ab36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b3e      	cmp	r3, #62	; 0x3e
 800ab42:	d918      	bls.n	800ab76 <USB_ActivateEndpoint+0x296>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f003 031f 	and.w	r3, r3, #31
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <USB_ActivateEndpoint+0x27e>
 800ab58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	029b      	lsls	r3, r3, #10
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	801a      	strh	r2, [r3, #0]
 800ab74:	e029      	b.n	800abca <USB_ActivateEndpoint+0x2ea>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d112      	bne.n	800aba4 <USB_ActivateEndpoint+0x2c4>
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	801a      	strh	r2, [r3, #0]
 800aba2:	e012      	b.n	800abca <USB_ActivateEndpoint+0x2ea>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	085b      	lsrs	r3, r3, #1
 800abaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <USB_ActivateEndpoint+0x2de>
 800abb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abba:	3301      	adds	r3, #1
 800abbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800abbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	029b      	lsls	r3, r3, #10
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	847b      	strh	r3, [r7, #34]	; 0x22
 800abd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d01b      	beq.n	800ac1a <USB_ActivateEndpoint+0x33a>
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf8:	843b      	strh	r3, [r7, #32]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	441a      	add	r2, r3
 800ac04:	8c3b      	ldrh	r3, [r7, #32]
 800ac06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d124      	bne.n	800ac6c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac38:	83bb      	strh	r3, [r7, #28]
 800ac3a:	8bbb      	ldrh	r3, [r7, #28]
 800ac3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac40:	83bb      	strh	r3, [r7, #28]
 800ac42:	8bbb      	ldrh	r3, [r7, #28]
 800ac44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac48:	83bb      	strh	r3, [r7, #28]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	441a      	add	r2, r3
 800ac54:	8bbb      	ldrh	r3, [r7, #28]
 800ac56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	8013      	strh	r3, [r2, #0]
 800ac6a:	e1ea      	b.n	800b042 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac82:	83fb      	strh	r3, [r7, #30]
 800ac84:	8bfb      	ldrh	r3, [r7, #30]
 800ac86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac8a:	83fb      	strh	r3, [r7, #30]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	441a      	add	r2, r3
 800ac96:	8bfb      	ldrh	r3, [r7, #30]
 800ac98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	8013      	strh	r3, [r2, #0]
 800acac:	e1c9      	b.n	800b042 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	78db      	ldrb	r3, [r3, #3]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d11e      	bne.n	800acf4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800accc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800acde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800acea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acee:	b29b      	uxth	r3, r3
 800acf0:	8013      	strh	r3, [r2, #0]
 800acf2:	e01d      	b.n	800ad30 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	441a      	add	r2, r3
 800ad18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad40:	4413      	add	r3, r2
 800ad42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	00da      	lsls	r2, r3, #3
 800ad4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad52:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	891b      	ldrh	r3, [r3, #8]
 800ad58:	085b      	lsrs	r3, r3, #1
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad62:	801a      	strh	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	657b      	str	r3, [r7, #84]	; 0x54
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad74:	4413      	add	r3, r2
 800ad76:	657b      	str	r3, [r7, #84]	; 0x54
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	00da      	lsls	r2, r3, #3
 800ad7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad80:	4413      	add	r3, r2
 800ad82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad86:	653b      	str	r3, [r7, #80]	; 0x50
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	895b      	ldrh	r3, [r3, #10]
 800ad8c:	085b      	lsrs	r3, r3, #1
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8093 	bne.w	800aec8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800adb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01b      	beq.n	800adf6 <USB_ActivateEndpoint+0x516>
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	441a      	add	r2, r3
 800ade0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ade2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d01b      	beq.n	800ae46 <USB_ActivateEndpoint+0x566>
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae24:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	441a      	add	r2, r3
 800ae30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5c:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae64:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae6c:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	441a      	add	r2, r3
 800ae78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aea4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	441a      	add	r2, r3
 800aeb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	8013      	strh	r3, [r2, #0]
 800aec6:	e0bc      	b.n	800b042 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aedc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d01d      	beq.n	800af20 <USB_ActivateEndpoint+0x640>
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aefa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	441a      	add	r2, r3
 800af08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01d      	beq.n	800af78 <USB_ActivateEndpoint+0x698>
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	441a      	add	r2, r3
 800af60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800af64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af74:	b29b      	uxth	r3, r3
 800af76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	78db      	ldrb	r3, [r3, #3]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d024      	beq.n	800afca <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800af9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af9e:	f083 0320 	eor.w	r3, r3, #32
 800afa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	441a      	add	r2, r3
 800afb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	8013      	strh	r3, [r2, #0]
 800afc8:	e01d      	b.n	800b006 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	441a      	add	r2, r3
 800afee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800affa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800affe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b002:	b29b      	uxth	r3, r3
 800b004:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	441a      	add	r2, r3
 800b02a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03e:	b29b      	uxth	r3, r3
 800b040:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b042:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b046:	4618      	mov	r0, r3
 800b048:	3774      	adds	r7, #116	; 0x74
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop

0800b054 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b054:	b480      	push	{r7}
 800b056:	b08d      	sub	sp, #52	; 0x34
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	7b1b      	ldrb	r3, [r3, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f040 808e 	bne.w	800b184 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d044      	beq.n	800b0fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	81bb      	strh	r3, [r7, #12]
 800b07e:	89bb      	ldrh	r3, [r7, #12]
 800b080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01b      	beq.n	800b0c0 <USB_DeactivateEndpoint+0x6c>
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09e:	817b      	strh	r3, [r7, #10]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	441a      	add	r2, r3
 800b0aa:	897b      	ldrh	r3, [r7, #10]
 800b0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d6:	813b      	strh	r3, [r7, #8]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	441a      	add	r2, r3
 800b0e2:	893b      	ldrh	r3, [r7, #8]
 800b0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	8013      	strh	r3, [r2, #0]
 800b0f8:	e192      	b.n	800b420 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	827b      	strh	r3, [r7, #18]
 800b108:	8a7b      	ldrh	r3, [r7, #18]
 800b10a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01b      	beq.n	800b14a <USB_DeactivateEndpoint+0xf6>
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b128:	823b      	strh	r3, [r7, #16]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	441a      	add	r2, r3
 800b134:	8a3b      	ldrh	r3, [r7, #16]
 800b136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b13a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b13e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b146:	b29b      	uxth	r3, r3
 800b148:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	b29b      	uxth	r3, r3
 800b158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b160:	81fb      	strh	r3, [r7, #14]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	441a      	add	r2, r3
 800b16c:	89fb      	ldrh	r3, [r7, #14]
 800b16e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b17e:	b29b      	uxth	r3, r3
 800b180:	8013      	strh	r3, [r2, #0]
 800b182:	e14d      	b.n	800b420 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	785b      	ldrb	r3, [r3, #1]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 80a5 	bne.w	800b2d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	843b      	strh	r3, [r7, #32]
 800b19c:	8c3b      	ldrh	r3, [r7, #32]
 800b19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01b      	beq.n	800b1de <USB_DeactivateEndpoint+0x18a>
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1bc:	83fb      	strh	r3, [r7, #30]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	441a      	add	r2, r3
 800b1c8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	83bb      	strh	r3, [r7, #28]
 800b1ec:	8bbb      	ldrh	r3, [r7, #28]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01b      	beq.n	800b22e <USB_DeactivateEndpoint+0x1da>
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29b      	uxth	r3, r3
 800b204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20c:	837b      	strh	r3, [r7, #26]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	441a      	add	r2, r3
 800b218:	8b7b      	ldrh	r3, [r7, #26]
 800b21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b244:	833b      	strh	r3, [r7, #24]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	441a      	add	r2, r3
 800b250:	8b3b      	ldrh	r3, [r7, #24]
 800b252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b25a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b25e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b262:	b29b      	uxth	r3, r3
 800b264:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27c:	82fb      	strh	r3, [r7, #22]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	441a      	add	r2, r3
 800b288:	8afb      	ldrh	r3, [r7, #22]
 800b28a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b28e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b4:	82bb      	strh	r3, [r7, #20]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	441a      	add	r2, r3
 800b2c0:	8abb      	ldrh	r3, [r7, #20]
 800b2c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	8013      	strh	r3, [r2, #0]
 800b2d6:	e0a3      	b.n	800b420 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b2e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01b      	beq.n	800b328 <USB_DeactivateEndpoint+0x2d4>
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b306:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	441a      	add	r2, r3
 800b312:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b31c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b324:	b29b      	uxth	r3, r3
 800b326:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b336:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01b      	beq.n	800b378 <USB_DeactivateEndpoint+0x324>
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b356:	853b      	strh	r3, [r7, #40]	; 0x28
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	441a      	add	r2, r3
 800b362:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b36c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b374:	b29b      	uxth	r3, r3
 800b376:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	441a      	add	r2, r3
 800b39a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b39c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	441a      	add	r2, r3
 800b3d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	441a      	add	r2, r3
 800b40a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b40c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3734      	adds	r7, #52	; 0x34
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b0c2      	sub	sp, #264	; 0x108
 800b432:	af00      	add	r7, sp, #0
 800b434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b43c:	6018      	str	r0, [r3, #0]
 800b43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b446:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b01      	cmp	r3, #1
 800b456:	f040 867b 	bne.w	800c150 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	429a      	cmp	r2, r3
 800b474:	d908      	bls.n	800b488 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b486:	e007      	b.n	800b498 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	7b1b      	ldrb	r3, [r3, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d13a      	bne.n	800b51e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b4a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6959      	ldr	r1, [r3, #20]
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	88da      	ldrh	r2, [r3, #6]
 800b4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	f001 fc3e 	bl	800cd50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	00da      	lsls	r2, r3, #3
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	4413      	add	r3, r2
 800b50a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	801a      	strh	r2, [r3, #0]
 800b51a:	f000 bde3 	b.w	800c0e4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	78db      	ldrb	r3, [r3, #3]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	f040 843a 	bne.w	800bda4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6a1a      	ldr	r2, [r3, #32]
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	429a      	cmp	r2, r3
 800b54a:	f240 83b7 	bls.w	800bcbc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b574:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	441a      	add	r2, r3
 800b592:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b59a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b59e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6a1a      	ldr	r2, [r3, #32]
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ba:	1ad2      	subs	r2, r2, r3
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 81b3 	beq.w	800b956 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d16d      	bne.n	800b6e8 <USB_EPStartXfer+0x2ba>
 800b60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28
 800b618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b626:	b29b      	uxth	r3, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	4413      	add	r3, r2
 800b62e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	00da      	lsls	r2, r3, #3
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	4413      	add	r3, r2
 800b642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	2b3e      	cmp	r3, #62	; 0x3e
 800b64e:	d91c      	bls.n	800b68a <USB_EPStartXfer+0x25c>
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	095b      	lsrs	r3, r3, #5
 800b656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65e:	f003 031f 	and.w	r3, r3, #31
 800b662:	2b00      	cmp	r3, #0
 800b664:	d104      	bne.n	800b670 <USB_EPStartXfer+0x242>
 800b666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b66a:	3b01      	subs	r3, #1
 800b66c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b670:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b674:	b29b      	uxth	r3, r3
 800b676:	029b      	lsls	r3, r3, #10
 800b678:	b29b      	uxth	r3, r3
 800b67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b682:	b29a      	uxth	r2, r3
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	801a      	strh	r2, [r3, #0]
 800b688:	e053      	b.n	800b732 <USB_EPStartXfer+0x304>
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d112      	bne.n	800b6b8 <USB_EPStartXfer+0x28a>
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	b29b      	uxth	r3, r3
 800b698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	801a      	strh	r2, [r3, #0]
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	e03c      	b.n	800b732 <USB_EPStartXfer+0x304>
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	085b      	lsrs	r3, r3, #1
 800b6be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d004      	beq.n	800b6d8 <USB_EPStartXfer+0x2aa>
 800b6ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	029b      	lsls	r3, r3, #10
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	e024      	b.n	800b732 <USB_EPStartXfer+0x304>
 800b6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d11c      	bne.n	800b732 <USB_EPStartXfer+0x304>
 800b6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b706:	b29b      	uxth	r3, r3
 800b708:	461a      	mov	r2, r3
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	4413      	add	r3, r2
 800b70e:	633b      	str	r3, [r7, #48]	; 0x30
 800b710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	00da      	lsls	r2, r3, #3
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	4413      	add	r3, r2
 800b722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b726:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	895b      	ldrh	r3, [r3, #10]
 800b73e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6959      	ldr	r1, [r3, #20]
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	b29b      	uxth	r3, r3
 800b754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b75c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b760:	6800      	ldr	r0, [r0, #0]
 800b762:	f001 faf5 	bl	800cd50 <USB_WritePMA>
            ep->xfer_buff += len;
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	695a      	ldr	r2, [r3, #20]
 800b772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b776:	441a      	add	r2, r3
 800b778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6a1a      	ldr	r2, [r3, #32]
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d90f      	bls.n	800b7c0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6a1a      	ldr	r2, [r3, #32]
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	621a      	str	r2, [r3, #32]
 800b7be:	e00e      	b.n	800b7de <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d16d      	bne.n	800b8ca <USB_EPStartXfer+0x49c>
 800b7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b808:	b29b      	uxth	r3, r3
 800b80a:	461a      	mov	r2, r3
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	4413      	add	r3, r2
 800b810:	61bb      	str	r3, [r7, #24]
 800b812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	00da      	lsls	r2, r3, #3
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	4413      	add	r3, r2
 800b824:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82e:	2b3e      	cmp	r3, #62	; 0x3e
 800b830:	d91c      	bls.n	800b86c <USB_EPStartXfer+0x43e>
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	095b      	lsrs	r3, r3, #5
 800b838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	f003 031f 	and.w	r3, r3, #31
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <USB_EPStartXfer+0x424>
 800b848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b84c:	3b01      	subs	r3, #1
 800b84e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b856:	b29b      	uxth	r3, r3
 800b858:	029b      	lsls	r3, r3, #10
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b864:	b29a      	uxth	r2, r3
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	e059      	b.n	800b920 <USB_EPStartXfer+0x4f2>
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	2b00      	cmp	r3, #0
 800b872:	d112      	bne.n	800b89a <USB_EPStartXfer+0x46c>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b87e:	b29a      	uxth	r2, r3
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	801a      	strh	r2, [r3, #0]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b88e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b892:	b29a      	uxth	r2, r3
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	801a      	strh	r2, [r3, #0]
 800b898:	e042      	b.n	800b920 <USB_EPStartXfer+0x4f2>
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	085b      	lsrs	r3, r3, #1
 800b8a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d004      	beq.n	800b8ba <USB_EPStartXfer+0x48c>
 800b8b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	029b      	lsls	r3, r3, #10
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	e02a      	b.n	800b920 <USB_EPStartXfer+0x4f2>
 800b8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	785b      	ldrb	r3, [r3, #1]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d122      	bne.n	800b920 <USB_EPStartXfer+0x4f2>
 800b8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	623b      	str	r3, [r7, #32]
 800b8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	00da      	lsls	r2, r3, #3
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	4413      	add	r3, r2
 800b910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b914:	61fb      	str	r3, [r7, #28]
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	891b      	ldrh	r3, [r3, #8]
 800b92c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6959      	ldr	r1, [r3, #20]
 800b93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b940:	b29b      	uxth	r3, r3
 800b942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b946:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b94a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b94e:	6800      	ldr	r0, [r0, #0]
 800b950:	f001 f9fe 	bl	800cd50 <USB_WritePMA>
 800b954:	e3c6      	b.n	800c0e4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d16d      	bne.n	800ba42 <USB_EPStartXfer+0x614>
 800b966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	64bb      	str	r3, [r7, #72]	; 0x48
 800b972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b980:	b29b      	uxth	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b986:	4413      	add	r3, r2
 800b988:	64bb      	str	r3, [r7, #72]	; 0x48
 800b98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	00da      	lsls	r2, r3, #3
 800b998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b99a:	4413      	add	r3, r2
 800b99c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a6:	2b3e      	cmp	r3, #62	; 0x3e
 800b9a8:	d91c      	bls.n	800b9e4 <USB_EPStartXfer+0x5b6>
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b8:	f003 031f 	and.w	r3, r3, #31
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <USB_EPStartXfer+0x59c>
 800b9c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	029b      	lsls	r3, r3, #10
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e0:	801a      	strh	r2, [r3, #0]
 800b9e2:	e059      	b.n	800ba98 <USB_EPStartXfer+0x66a>
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d112      	bne.n	800ba12 <USB_EPStartXfer+0x5e4>
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fa:	801a      	strh	r2, [r3, #0]
 800b9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba0e:	801a      	strh	r2, [r3, #0]
 800ba10:	e042      	b.n	800ba98 <USB_EPStartXfer+0x66a>
 800ba12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <USB_EPStartXfer+0x604>
 800ba28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	029b      	lsls	r3, r3, #10
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	801a      	strh	r2, [r3, #0]
 800ba40:	e02a      	b.n	800ba98 <USB_EPStartXfer+0x66a>
 800ba42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d122      	bne.n	800ba98 <USB_EPStartXfer+0x66a>
 800ba52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ba5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	461a      	mov	r2, r3
 800ba70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba72:	4413      	add	r3, r2
 800ba74:	653b      	str	r3, [r7, #80]	; 0x50
 800ba76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	00da      	lsls	r2, r3, #3
 800ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba86:	4413      	add	r3, r2
 800ba88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	891b      	ldrh	r3, [r3, #8]
 800baa4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800baa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	6959      	ldr	r1, [r3, #20]
 800bab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800babe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bac2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bac6:	6800      	ldr	r0, [r0, #0]
 800bac8:	f001 f942 	bl	800cd50 <USB_WritePMA>
            ep->xfer_buff += len;
 800bacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	695a      	ldr	r2, [r3, #20]
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	441a      	add	r2, r3
 800bade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800baea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6a1a      	ldr	r2, [r3, #32]
 800baf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d90f      	bls.n	800bb26 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800bb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	1ad2      	subs	r2, r2, r3
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	621a      	str	r2, [r3, #32]
 800bb24:	e00e      	b.n	800bb44 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2200      	movs	r2, #0
 800bb42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	643b      	str	r3, [r7, #64]	; 0x40
 800bb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	785b      	ldrb	r3, [r3, #1]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d16d      	bne.n	800bc3c <USB_EPStartXfer+0x80e>
 800bb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	4413      	add	r3, r2
 800bb82:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	00da      	lsls	r2, r3, #3
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	4413      	add	r3, r2
 800bb96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	2b3e      	cmp	r3, #62	; 0x3e
 800bba2:	d91c      	bls.n	800bbde <USB_EPStartXfer+0x7b0>
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba8:	095b      	lsrs	r3, r3, #5
 800bbaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb2:	f003 031f 	and.w	r3, r3, #31
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <USB_EPStartXfer+0x796>
 800bbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	029b      	lsls	r3, r3, #10
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e053      	b.n	800bc86 <USB_EPStartXfer+0x858>
 800bbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d112      	bne.n	800bc0c <USB_EPStartXfer+0x7de>
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	801a      	strh	r2, [r3, #0]
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	801a      	strh	r2, [r3, #0]
 800bc0a:	e03c      	b.n	800bc86 <USB_EPStartXfer+0x858>
 800bc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc10:	085b      	lsrs	r3, r3, #1
 800bc12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <USB_EPStartXfer+0x7fe>
 800bc22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc26:	3301      	adds	r3, #1
 800bc28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	029b      	lsls	r3, r3, #10
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	801a      	strh	r2, [r3, #0]
 800bc3a:	e024      	b.n	800bc86 <USB_EPStartXfer+0x858>
 800bc3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	785b      	ldrb	r3, [r3, #1]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d11c      	bne.n	800bc86 <USB_EPStartXfer+0x858>
 800bc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc60:	4413      	add	r3, r2
 800bc62:	643b      	str	r3, [r7, #64]	; 0x40
 800bc64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	00da      	lsls	r2, r3, #3
 800bc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc74:	4413      	add	r3, r2
 800bc76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	895b      	ldrh	r3, [r3, #10]
 800bc92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6959      	ldr	r1, [r3, #20]
 800bca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bcac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bcb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bcb4:	6800      	ldr	r0, [r0, #0]
 800bcb6:	f001 f84b 	bl	800cd50 <USB_WritePMA>
 800bcba:	e213      	b.n	800c0e4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bcbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bcee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	441a      	add	r2, r3
 800bd10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bd14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	461a      	mov	r2, r3
 800bd46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd48:	4413      	add	r3, r2
 800bd4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	00da      	lsls	r2, r3, #3
 800bd5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd62:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	891b      	ldrh	r3, [r3, #8]
 800bd7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6959      	ldr	r1, [r3, #20]
 800bd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd9c:	6800      	ldr	r0, [r0, #0]
 800bd9e:	f000 ffd7 	bl	800cd50 <USB_WritePMA>
 800bda2:	e19f      	b.n	800c0e4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bda4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6a1a      	ldr	r2, [r3, #32]
 800bdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb4:	1ad2      	subs	r2, r2, r3
 800bdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bdc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 80bc 	beq.w	800bf62 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	673b      	str	r3, [r7, #112]	; 0x70
 800bdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	785b      	ldrb	r3, [r3, #1]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d16d      	bne.n	800bee2 <USB_EPStartXfer+0xab4>
 800be06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	66bb      	str	r3, [r7, #104]	; 0x68
 800be12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be20:	b29b      	uxth	r3, r3
 800be22:	461a      	mov	r2, r3
 800be24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be26:	4413      	add	r3, r2
 800be28:	66bb      	str	r3, [r7, #104]	; 0x68
 800be2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	00da      	lsls	r2, r3, #3
 800be38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be3a:	4413      	add	r3, r2
 800be3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be40:	667b      	str	r3, [r7, #100]	; 0x64
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	2b3e      	cmp	r3, #62	; 0x3e
 800be48:	d91c      	bls.n	800be84 <USB_EPStartXfer+0xa56>
 800be4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4e:	095b      	lsrs	r3, r3, #5
 800be50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be58:	f003 031f 	and.w	r3, r3, #31
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <USB_EPStartXfer+0xa3c>
 800be60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be64:	3b01      	subs	r3, #1
 800be66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be6e:	b29b      	uxth	r3, r3
 800be70:	029b      	lsls	r3, r3, #10
 800be72:	b29b      	uxth	r3, r3
 800be74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be80:	801a      	strh	r2, [r3, #0]
 800be82:	e053      	b.n	800bf2c <USB_EPStartXfer+0xafe>
 800be84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d112      	bne.n	800beb2 <USB_EPStartXfer+0xa84>
 800be8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	b29b      	uxth	r3, r3
 800be92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be96:	b29a      	uxth	r2, r3
 800be98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9a:	801a      	strh	r2, [r3, #0]
 800be9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beaa:	b29a      	uxth	r2, r3
 800beac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beae:	801a      	strh	r2, [r3, #0]
 800beb0:	e03c      	b.n	800bf2c <USB_EPStartXfer+0xafe>
 800beb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d004      	beq.n	800bed2 <USB_EPStartXfer+0xaa4>
 800bec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800becc:	3301      	adds	r3, #1
 800bece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bed2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	029b      	lsls	r3, r3, #10
 800beda:	b29a      	uxth	r2, r3
 800bedc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bede:	801a      	strh	r2, [r3, #0]
 800bee0:	e024      	b.n	800bf2c <USB_EPStartXfer+0xafe>
 800bee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	785b      	ldrb	r3, [r3, #1]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d11c      	bne.n	800bf2c <USB_EPStartXfer+0xafe>
 800bef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf06:	4413      	add	r3, r2
 800bf08:	673b      	str	r3, [r7, #112]	; 0x70
 800bf0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	00da      	lsls	r2, r3, #3
 800bf18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	895b      	ldrh	r3, [r3, #10]
 800bf38:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6959      	ldr	r1, [r3, #20]
 800bf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf5a:	6800      	ldr	r0, [r0, #0]
 800bf5c:	f000 fef8 	bl	800cd50 <USB_WritePMA>
 800bf60:	e0c0      	b.n	800c0e4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d16d      	bne.n	800c04e <USB_EPStartXfer+0xc20>
 800bf72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf92:	4413      	add	r3, r2
 800bf94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	00da      	lsls	r2, r3, #3
 800bfa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfa6:	4413      	add	r3, r2
 800bfa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfac:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfb2:	2b3e      	cmp	r3, #62	; 0x3e
 800bfb4:	d91c      	bls.n	800bff0 <USB_EPStartXfer+0xbc2>
 800bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfba:	095b      	lsrs	r3, r3, #5
 800bfbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc4:	f003 031f 	and.w	r3, r3, #31
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d104      	bne.n	800bfd6 <USB_EPStartXfer+0xba8>
 800bfcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	029b      	lsls	r3, r3, #10
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	e05f      	b.n	800c0b0 <USB_EPStartXfer+0xc82>
 800bff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d112      	bne.n	800c01e <USB_EPStartXfer+0xbf0>
 800bff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c002:	b29a      	uxth	r2, r3
 800c004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c006:	801a      	strh	r2, [r3, #0]
 800c008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c016:	b29a      	uxth	r2, r3
 800c018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c01a:	801a      	strh	r2, [r3, #0]
 800c01c:	e048      	b.n	800c0b0 <USB_EPStartXfer+0xc82>
 800c01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c022:	085b      	lsrs	r3, r3, #1
 800c024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d004      	beq.n	800c03e <USB_EPStartXfer+0xc10>
 800c034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c038:	3301      	adds	r3, #1
 800c03a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c03e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c042:	b29b      	uxth	r3, r3
 800c044:	029b      	lsls	r3, r3, #10
 800c046:	b29a      	uxth	r2, r3
 800c048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c04a:	801a      	strh	r2, [r3, #0]
 800c04c:	e030      	b.n	800c0b0 <USB_EPStartXfer+0xc82>
 800c04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d128      	bne.n	800c0b0 <USB_EPStartXfer+0xc82>
 800c05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c06c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c082:	4413      	add	r3, r2
 800c084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	00da      	lsls	r2, r3, #3
 800c096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c09a:	4413      	add	r3, r2
 800c09c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c0ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	891b      	ldrh	r3, [r3, #8]
 800c0bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6959      	ldr	r1, [r3, #20]
 800c0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c0d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c0da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c0de:	6800      	ldr	r0, [r0, #0]
 800c0e0:	f000 fe36 	bl	800cd50 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c10a:	817b      	strh	r3, [r7, #10]
 800c10c:	897b      	ldrh	r3, [r7, #10]
 800c10e:	f083 0310 	eor.w	r3, r3, #16
 800c112:	817b      	strh	r3, [r7, #10]
 800c114:	897b      	ldrh	r3, [r7, #10]
 800c116:	f083 0320 	eor.w	r3, r3, #32
 800c11a:	817b      	strh	r3, [r7, #10]
 800c11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	441a      	add	r2, r3
 800c136:	897b      	ldrh	r3, [r7, #10]
 800c138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8013      	strh	r3, [r2, #0]
 800c14c:	f000 bc9f 	b.w	800ca8e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	7b1b      	ldrb	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f040 80ae 	bne.w	800c2be <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	699a      	ldr	r2, [r3, #24]
 800c16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d917      	bls.n	800c1ae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800c17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c19e:	1ad2      	subs	r2, r2, r3
 800c1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	619a      	str	r2, [r3, #24]
 800c1ac:	e00e      	b.n	800c1cc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800c1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	00da      	lsls	r2, r3, #3
 800c204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c208:	4413      	add	r3, r2
 800c20a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c20e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c216:	2b3e      	cmp	r3, #62	; 0x3e
 800c218:	d91d      	bls.n	800c256 <USB_EPStartXfer+0xe28>
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21e:	095b      	lsrs	r3, r3, #5
 800c220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c228:	f003 031f 	and.w	r3, r3, #31
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d104      	bne.n	800c23a <USB_EPStartXfer+0xe0c>
 800c230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c234:	3b01      	subs	r3, #1
 800c236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c23a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c23e:	b29b      	uxth	r3, r3
 800c240:	029b      	lsls	r3, r3, #10
 800c242:	b29b      	uxth	r3, r3
 800c244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c252:	801a      	strh	r2, [r3, #0]
 800c254:	e3e1      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d116      	bne.n	800c28c <USB_EPStartXfer+0xe5e>
 800c25e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	b29b      	uxth	r3, r3
 800c266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c270:	801a      	strh	r2, [r3, #0]
 800c272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c27e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c282:	b29a      	uxth	r2, r3
 800c284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c288:	801a      	strh	r2, [r3, #0]
 800c28a:	e3c6      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c290:	085b      	lsrs	r3, r3, #1
 800c292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d004      	beq.n	800c2ac <USB_EPStartXfer+0xe7e>
 800c2a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	029b      	lsls	r3, r3, #10
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2ba:	801a      	strh	r2, [r3, #0]
 800c2bc:	e3ad      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	78db      	ldrb	r3, [r3, #3]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	f040 8200 	bne.w	800c6d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 8091 	bne.w	800c404 <USB_EPStartXfer+0xfd6>
 800c2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	461a      	mov	r2, r3
 800c302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c306:	4413      	add	r3, r2
 800c308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	00da      	lsls	r2, r3, #3
 800c31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c31e:	4413      	add	r3, r2
 800c320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	2b3e      	cmp	r3, #62	; 0x3e
 800c336:	d925      	bls.n	800c384 <USB_EPStartXfer+0xf56>
 800c338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	095b      	lsrs	r3, r3, #5
 800c346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f003 031f 	and.w	r3, r3, #31
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <USB_EPStartXfer+0xf3a>
 800c35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c362:	3b01      	subs	r3, #1
 800c364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	029b      	lsls	r3, r3, #10
 800c370:	b29b      	uxth	r3, r3
 800c372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c380:	801a      	strh	r2, [r3, #0]
 800c382:	e074      	b.n	800c46e <USB_EPStartXfer+0x1040>
 800c384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d116      	bne.n	800c3c2 <USB_EPStartXfer+0xf94>
 800c394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3a6:	801a      	strh	r2, [r3, #0]
 800c3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3be:	801a      	strh	r2, [r3, #0]
 800c3c0:	e055      	b.n	800c46e <USB_EPStartXfer+0x1040>
 800c3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	085b      	lsrs	r3, r3, #1
 800c3d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <USB_EPStartXfer+0xfc4>
 800c3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	029b      	lsls	r3, r3, #10
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c400:	801a      	strh	r2, [r3, #0]
 800c402:	e034      	b.n	800c46e <USB_EPStartXfer+0x1040>
 800c404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	785b      	ldrb	r3, [r3, #1]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d12c      	bne.n	800c46e <USB_EPStartXfer+0x1040>
 800c414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c430:	b29b      	uxth	r3, r3
 800c432:	461a      	mov	r2, r3
 800c434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c438:	4413      	add	r3, r2
 800c43a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	00da      	lsls	r2, r3, #3
 800c44c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c450:	4413      	add	r3, r2
 800c452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	b29a      	uxth	r2, r3
 800c468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c46c:	801a      	strh	r2, [r3, #0]
 800c46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f040 8091 	bne.w	800c5b0 <USB_EPStartXfer+0x1182>
 800c48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	00da      	lsls	r2, r3, #3
 800c4c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	2b3e      	cmp	r3, #62	; 0x3e
 800c4e2:	d925      	bls.n	800c530 <USB_EPStartXfer+0x1102>
 800c4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	095b      	lsrs	r3, r3, #5
 800c4f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 031f 	and.w	r3, r3, #31
 800c506:	2b00      	cmp	r3, #0
 800c508:	d104      	bne.n	800c514 <USB_EPStartXfer+0x10e6>
 800c50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50e:	3b01      	subs	r3, #1
 800c510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c518:	b29b      	uxth	r3, r3
 800c51a:	029b      	lsls	r3, r3, #10
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c526:	b29a      	uxth	r2, r3
 800c528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c52c:	801a      	strh	r2, [r3, #0]
 800c52e:	e06d      	b.n	800c60c <USB_EPStartXfer+0x11de>
 800c530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d116      	bne.n	800c56e <USB_EPStartXfer+0x1140>
 800c540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	b29b      	uxth	r3, r3
 800c548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c552:	801a      	strh	r2, [r3, #0]
 800c554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c564:	b29a      	uxth	r2, r3
 800c566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	e04e      	b.n	800c60c <USB_EPStartXfer+0x11de>
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	085b      	lsrs	r3, r3, #1
 800c57c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d004      	beq.n	800c59e <USB_EPStartXfer+0x1170>
 800c594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c598:	3301      	adds	r3, #1
 800c59a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	029b      	lsls	r3, r3, #10
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ac:	801a      	strh	r2, [r3, #0]
 800c5ae:	e02d      	b.n	800c60c <USB_EPStartXfer+0x11de>
 800c5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	785b      	ldrb	r3, [r3, #1]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d125      	bne.n	800c60c <USB_EPStartXfer+0x11de>
 800c5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	00da      	lsls	r2, r3, #3
 800c5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	b29a      	uxth	r2, r3
 800c606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c60a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81fe 	beq.w	800ca1a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c63e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d005      	beq.n	800c656 <USB_EPStartXfer+0x1228>
 800c64a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10d      	bne.n	800c672 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c656:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c65a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f040 81db 	bne.w	800ca1a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 81d4 	bne.w	800ca1a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c698:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	441a      	add	r2, r3
 800c6b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c6ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	8013      	strh	r3, [r2, #0]
 800c6ce:	e1a4      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	78db      	ldrb	r3, [r3, #3]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	f040 819a 	bne.w	800ca16 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699a      	ldr	r2, [r3, #24]
 800c6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d917      	bls.n	800c72e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	619a      	str	r2, [r3, #24]
 800c72c:	e00e      	b.n	800c74c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2200      	movs	r2, #0
 800c74a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	785b      	ldrb	r3, [r3, #1]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d178      	bne.n	800c84e <USB_EPStartXfer+0x1420>
 800c75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c778:	b29b      	uxth	r3, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c780:	4413      	add	r3, r2
 800c782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	00da      	lsls	r2, r3, #3
 800c794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c798:	4413      	add	r3, r2
 800c79a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c79e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a6:	2b3e      	cmp	r3, #62	; 0x3e
 800c7a8:	d91d      	bls.n	800c7e6 <USB_EPStartXfer+0x13b8>
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	095b      	lsrs	r3, r3, #5
 800c7b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7b8:	f003 031f 	and.w	r3, r3, #31
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d104      	bne.n	800c7ca <USB_EPStartXfer+0x139c>
 800c7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	029b      	lsls	r3, r3, #10
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7e2:	801a      	strh	r2, [r3, #0]
 800c7e4:	e064      	b.n	800c8b0 <USB_EPStartXfer+0x1482>
 800c7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d116      	bne.n	800c81c <USB_EPStartXfer+0x13ee>
 800c7ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c800:	801a      	strh	r2, [r3, #0]
 800c802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c812:	b29a      	uxth	r2, r3
 800c814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c818:	801a      	strh	r2, [r3, #0]
 800c81a:	e049      	b.n	800c8b0 <USB_EPStartXfer+0x1482>
 800c81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c820:	085b      	lsrs	r3, r3, #1
 800c822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c82a:	f003 0301 	and.w	r3, r3, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d004      	beq.n	800c83c <USB_EPStartXfer+0x140e>
 800c832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c836:	3301      	adds	r3, #1
 800c838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c840:	b29b      	uxth	r3, r3
 800c842:	029b      	lsls	r3, r3, #10
 800c844:	b29a      	uxth	r2, r3
 800c846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c84a:	801a      	strh	r2, [r3, #0]
 800c84c:	e030      	b.n	800c8b0 <USB_EPStartXfer+0x1482>
 800c84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	785b      	ldrb	r3, [r3, #1]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d128      	bne.n	800c8b0 <USB_EPStartXfer+0x1482>
 800c85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c882:	4413      	add	r3, r2
 800c884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	00da      	lsls	r2, r3, #3
 800c896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c89a:	4413      	add	r3, r2
 800c89c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c8ae:	801a      	strh	r2, [r3, #0]
 800c8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	785b      	ldrb	r3, [r3, #1]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d178      	bne.n	800c9c0 <USB_EPStartXfer+0x1592>
 800c8ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	00da      	lsls	r2, r3, #3
 800c906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c90a:	4413      	add	r3, r2
 800c90c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c918:	2b3e      	cmp	r3, #62	; 0x3e
 800c91a:	d91d      	bls.n	800c958 <USB_EPStartXfer+0x152a>
 800c91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c920:	095b      	lsrs	r3, r3, #5
 800c922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92a:	f003 031f 	and.w	r3, r3, #31
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d104      	bne.n	800c93c <USB_EPStartXfer+0x150e>
 800c932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c936:	3b01      	subs	r3, #1
 800c938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c93c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c940:	b29b      	uxth	r3, r3
 800c942:	029b      	lsls	r3, r3, #10
 800c944:	b29b      	uxth	r3, r3
 800c946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c94e:	b29a      	uxth	r2, r3
 800c950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c954:	801a      	strh	r2, [r3, #0]
 800c956:	e060      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d116      	bne.n	800c98e <USB_EPStartXfer+0x1560>
 800c960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	b29b      	uxth	r3, r3
 800c968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c972:	801a      	strh	r2, [r3, #0]
 800c974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c984:	b29a      	uxth	r2, r3
 800c986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c98a:	801a      	strh	r2, [r3, #0]
 800c98c:	e045      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c992:	085b      	lsrs	r3, r3, #1
 800c994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d004      	beq.n	800c9ae <USB_EPStartXfer+0x1580>
 800c9a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	029b      	lsls	r3, r3, #10
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c9bc:	801a      	strh	r2, [r3, #0]
 800c9be:	e02c      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d124      	bne.n	800ca1a <USB_EPStartXfer+0x15ec>
 800c9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	00da      	lsls	r2, r3, #3
 800c9fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c9fe:	4413      	add	r3, r2
 800ca00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca12:	801a      	strh	r2, [r3, #0]
 800ca14:	e001      	b.n	800ca1a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e03a      	b.n	800ca90 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ca58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ca5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	441a      	add	r2, r3
 800ca76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ca7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b085      	sub	sp, #20
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d020      	beq.n	800caee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cabe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac2:	81bb      	strh	r3, [r7, #12]
 800cac4:	89bb      	ldrh	r3, [r7, #12]
 800cac6:	f083 0310 	eor.w	r3, r3, #16
 800caca:	81bb      	strh	r3, [r7, #12]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	441a      	add	r2, r3
 800cad6:	89bb      	ldrh	r3, [r7, #12]
 800cad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cadc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae8:	b29b      	uxth	r3, r3
 800caea:	8013      	strh	r3, [r2, #0]
 800caec:	e01f      	b.n	800cb2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb04:	81fb      	strh	r3, [r7, #14]
 800cb06:	89fb      	ldrh	r3, [r7, #14]
 800cb08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb0c:	81fb      	strh	r3, [r7, #14]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	441a      	add	r2, r3
 800cb18:	89fb      	ldrh	r3, [r7, #14]
 800cb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	7b1b      	ldrb	r3, [r3, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f040 809d 	bne.w	800cc8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	785b      	ldrb	r3, [r3, #1]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d04c      	beq.n	800cbf2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	823b      	strh	r3, [r7, #16]
 800cb66:	8a3b      	ldrh	r3, [r7, #16]
 800cb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d01b      	beq.n	800cba8 <USB_EPClearStall+0x6c>
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb86:	81fb      	strh	r3, [r7, #14]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	441a      	add	r2, r3
 800cb92:	89fb      	ldrh	r3, [r7, #14]
 800cb94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	78db      	ldrb	r3, [r3, #3]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d06c      	beq.n	800cc8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc6:	81bb      	strh	r3, [r7, #12]
 800cbc8:	89bb      	ldrh	r3, [r7, #12]
 800cbca:	f083 0320 	eor.w	r3, r3, #32
 800cbce:	81bb      	strh	r3, [r7, #12]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	441a      	add	r2, r3
 800cbda:	89bb      	ldrh	r3, [r7, #12]
 800cbdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	8013      	strh	r3, [r2, #0]
 800cbf0:	e04b      	b.n	800cc8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	82fb      	strh	r3, [r7, #22]
 800cc00:	8afb      	ldrh	r3, [r7, #22]
 800cc02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d01b      	beq.n	800cc42 <USB_EPClearStall+0x106>
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc20:	82bb      	strh	r3, [r7, #20]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	441a      	add	r2, r3
 800cc2c:	8abb      	ldrh	r3, [r7, #20]
 800cc2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc58:	827b      	strh	r3, [r7, #18]
 800cc5a:	8a7b      	ldrh	r3, [r7, #18]
 800cc5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc60:	827b      	strh	r3, [r7, #18]
 800cc62:	8a7b      	ldrh	r3, [r7, #18]
 800cc64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cc68:	827b      	strh	r3, [r7, #18]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	441a      	add	r2, r3
 800cc74:	8a7b      	ldrh	r3, [r7, #18]
 800cc76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	371c      	adds	r7, #28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cca4:	78fb      	ldrb	r3, [r7, #3]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d103      	bne.n	800ccb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2280      	movs	r2, #128	; 0x80
 800ccae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b08b      	sub	sp, #44	; 0x2c
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	460b      	mov	r3, r1
 800cd60:	80fb      	strh	r3, [r7, #6]
 800cd62:	4613      	mov	r3, r2
 800cd64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cd66:	88bb      	ldrh	r3, [r7, #4]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	085b      	lsrs	r3, r3, #1
 800cd6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd76:	88fa      	ldrh	r2, [r7, #6]
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd80:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
 800cd86:	e01b      	b.n	800cdc0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	3301      	adds	r3, #1
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	b21a      	sxth	r2, r3
 800cd98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b21b      	sxth	r3, r3
 800cda0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	8a7a      	ldrh	r2, [r7, #18]
 800cda6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	3302      	adds	r3, #2
 800cdac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e0      	bne.n	800cd88 <USB_WritePMA+0x38>
  }
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	372c      	adds	r7, #44	; 0x2c
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b08b      	sub	sp, #44	; 0x2c
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4611      	mov	r1, r2
 800cde0:	461a      	mov	r2, r3
 800cde2:	460b      	mov	r3, r1
 800cde4:	80fb      	strh	r3, [r7, #6]
 800cde6:	4613      	mov	r3, r2
 800cde8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cdea:	88bb      	ldrh	r3, [r7, #4]
 800cdec:	085b      	lsrs	r3, r3, #1
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cdfa:	88fa      	ldrh	r2, [r7, #6]
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce04:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
 800ce0a:	e018      	b.n	800ce3e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	3302      	adds	r3, #2
 800ce18:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	3301      	adds	r3, #1
 800ce26:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	0a1b      	lsrs	r3, r3, #8
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	3301      	adds	r3, #1
 800ce36:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e3      	bne.n	800ce0c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ce44:	88bb      	ldrh	r3, [r7, #4]
 800ce46:	f003 0301 	and.w	r3, r3, #1
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d007      	beq.n	800ce60 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	701a      	strb	r2, [r3, #0]
  }
}
 800ce60:	bf00      	nop
 800ce62:	372c      	adds	r7, #44	; 0x2c
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 800ce6c:	b490      	push	{r4, r7}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	4608      	mov	r0, r1
 800ce76:	4611      	mov	r1, r2
 800ce78:	461a      	mov	r2, r3
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	70fb      	strb	r3, [r7, #3]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70bb      	strb	r3, [r7, #2]
 800ce82:	4613      	mov	r3, r2
 800ce84:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 800ce86:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 800ce88:	7e3b      	ldrb	r3, [r7, #24]
 800ce8a:	4423      	add	r3, r4
 800ce8c:	b2dc      	uxtb	r4, r3
  tmp--;
 800ce8e:	4623      	mov	r3, r4
 800ce90:	3b01      	subs	r3, #1
 800ce92:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800cea0:	73fa      	strb	r2, [r7, #15]
 800cea2:	73bb      	strb	r3, [r7, #14]
 800cea4:	78bb      	ldrb	r3, [r7, #2]
 800cea6:	737b      	strb	r3, [r7, #13]
 800cea8:	4623      	mov	r3, r4
 800ceaa:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 800ceac:	7bba      	ldrb	r2, [r7, #14]
 800ceae:	7b7b      	ldrb	r3, [r7, #13]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d30d      	bcc.n	800ced0 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 800ceb4:	7bfa      	ldrb	r2, [r7, #15]
 800ceb6:	7b3b      	ldrb	r3, [r7, #12]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d801      	bhi.n	800cec0 <u8g_IsBBXIntersection+0x54>
      return 1;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e014      	b.n	800ceea <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 800cec0:	7b7a      	ldrb	r2, [r7, #13]
 800cec2:	7b3b      	ldrb	r3, [r7, #12]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d901      	bls.n	800cecc <u8g_IsBBXIntersection+0x60>
	return 1;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e00e      	b.n	800ceea <u8g_IsBBXIntersection+0x7e>
	return 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	e00c      	b.n	800ceea <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 800ced0:	7bfa      	ldrb	r2, [r7, #15]
 800ced2:	7b3b      	ldrb	r3, [r7, #12]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d807      	bhi.n	800cee8 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 800ced8:	7b7a      	ldrb	r2, [r7, #13]
 800ceda:	7b3b      	ldrb	r3, [r7, #12]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d901      	bls.n	800cee4 <u8g_IsBBXIntersection+0x78>
	return 1;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e002      	b.n	800ceea <u8g_IsBBXIntersection+0x7e>
	return 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e000      	b.n	800ceea <u8g_IsBBXIntersection+0x7e>
      return 0;
 800cee8:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <u8g_IsBBXIntersection+0x86>
    return 0; 
 800ceee:	2300      	movs	r3, #0
 800cef0:	e032      	b.n	800cf58 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 800cef2:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 800cef4:	787b      	ldrb	r3, [r7, #1]
 800cef6:	4423      	add	r3, r4
 800cef8:	b2dc      	uxtb	r4, r3
  tmp--;
 800cefa:	4623      	mov	r3, r4
 800cefc:	3b01      	subs	r3, #1
 800cefe:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf0c:	72fa      	strb	r2, [r7, #11]
 800cf0e:	72bb      	strb	r3, [r7, #10]
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	727b      	strb	r3, [r7, #9]
 800cf14:	4623      	mov	r3, r4
 800cf16:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 800cf18:	7aba      	ldrb	r2, [r7, #10]
 800cf1a:	7a7b      	ldrb	r3, [r7, #9]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d30d      	bcc.n	800cf3c <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 800cf20:	7afa      	ldrb	r2, [r7, #11]
 800cf22:	7a3b      	ldrb	r3, [r7, #8]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d801      	bhi.n	800cf2c <u8g_IsBBXIntersection+0xc0>
      return 1;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e014      	b.n	800cf56 <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 800cf2c:	7a7a      	ldrb	r2, [r7, #9]
 800cf2e:	7a3b      	ldrb	r3, [r7, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d901      	bls.n	800cf38 <u8g_IsBBXIntersection+0xcc>
	return 1;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e00e      	b.n	800cf56 <u8g_IsBBXIntersection+0xea>
	return 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e00c      	b.n	800cf56 <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 800cf3c:	7afa      	ldrb	r2, [r7, #11]
 800cf3e:	7a3b      	ldrb	r3, [r7, #8]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d807      	bhi.n	800cf54 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 800cf44:	7a7a      	ldrb	r2, [r7, #9]
 800cf46:	7a3b      	ldrb	r3, [r7, #8]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d901      	bls.n	800cf50 <u8g_IsBBXIntersection+0xe4>
	return 1;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e002      	b.n	800cf56 <u8g_IsBBXIntersection+0xea>
	return 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e000      	b.n	800cf56 <u8g_IsBBXIntersection+0xea>
      return 0;
 800cf54:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800cf56:	bf00      	nop
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bc90      	pop	{r4, r7}
 800cf60:	4770      	bx	lr

0800cf62 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 800cf62:	b590      	push	{r4, r7, lr}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	689c      	ldr	r4, [r3, #8]
 800cf74:	79fa      	ldrb	r2, [r7, #7]
 800cf76:	2300      	movs	r3, #0
 800cf78:	2101      	movs	r1, #1
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	47a0      	blx	r4
 800cf7e:	4603      	mov	r3, r0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd90      	pop	{r4, r7, pc}

0800cf88 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 800cf88:	b590      	push	{r4, r7, lr}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	4613      	mov	r3, r2
 800cf94:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	689c      	ldr	r4, [r3, #8]
 800cf9a:	79fa      	ldrb	r2, [r7, #7]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2103      	movs	r1, #3
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	47a0      	blx	r4
}
 800cfa4:	bf00      	nop
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}

0800cfac <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 800cfac:	b590      	push	{r4, r7, lr}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	689c      	ldr	r4, [r3, #8]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2104      	movs	r1, #4
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	47a0      	blx	r4
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd90      	pop	{r4, r7, pc}

0800cfcc <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	689c      	ldr	r4, [r3, #8]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	2201      	movs	r2, #1
 800cfde:	2104      	movs	r1, #4
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	47a0      	blx	r4
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd90      	pop	{r4, r7, pc}

0800cfec <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	689c      	ldr	r4, [r3, #8]
 800cffe:	79fa      	ldrb	r2, [r7, #7]
 800d000:	2300      	movs	r3, #0
 800d002:	2102      	movs	r1, #2
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	47a0      	blx	r4
}
 800d008:	bf00      	nop
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}

0800d010 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 800d010:	b590      	push	{r4, r7, lr}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	4613      	mov	r3, r2
 800d01c:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	689c      	ldr	r4, [r3, #8]
 800d022:	79fa      	ldrb	r2, [r7, #7]
 800d024:	2300      	movs	r3, #0
 800d026:	2105      	movs	r1, #5
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	47a0      	blx	r4
 800d02c:	4603      	mov	r3, r0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	bd90      	pop	{r4, r7, pc}

0800d036 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 800d036:	b590      	push	{r4, r7, lr}
 800d038:	b085      	sub	sp, #20
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	60b9      	str	r1, [r7, #8]
 800d040:	603b      	str	r3, [r7, #0]
 800d042:	4613      	mov	r3, r2
 800d044:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	689c      	ldr	r4, [r3, #8]
 800d04a:	79fa      	ldrb	r2, [r7, #7]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2106      	movs	r1, #6
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	47a0      	blx	r4
 800d054:	4603      	mov	r3, r0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd90      	pop	{r4, r7, pc}

0800d05e <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	60b9      	str	r1, [r7, #8]
 800d068:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d110      	bne.n	800d09c <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 800d07a:	7dbb      	ldrb	r3, [r7, #22]
 800d07c:	2bff      	cmp	r3, #255	; 0xff
 800d07e:	d00a      	beq.n	800d096 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 800d080:	7dbb      	ldrb	r3, [r7, #22]
 800d082:	461a      	mov	r2, r3
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7ff ffc2 	bl	800d010 <u8g_WriteByte>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d160      	bne.n	800d154 <u8g_WriteEscSeqP+0xf6>
          return 0;
 800d092:	2300      	movs	r3, #0
 800d094:	e064      	b.n	800d160 <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 800d096:	2301      	movs	r3, #1
 800d098:	75fb      	strb	r3, [r7, #23]
 800d09a:	e05b      	b.n	800d154 <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 800d09c:	7dbb      	ldrb	r3, [r7, #22]
 800d09e:	2bff      	cmp	r3, #255	; 0xff
 800d0a0:	d10a      	bne.n	800d0b8 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 800d0a2:	7dbb      	ldrb	r3, [r7, #22]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f7ff ffb1 	bl	800d010 <u8g_WriteByte>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d14d      	bne.n	800d150 <u8g_WriteEscSeqP+0xf2>
          return 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e053      	b.n	800d160 <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 800d0b8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ba:	2bfe      	cmp	r3, #254	; 0xfe
 800d0bc:	d04e      	beq.n	800d15c <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 800d0be:	7dbb      	ldrb	r3, [r7, #22]
 800d0c0:	2bef      	cmp	r3, #239	; 0xef
 800d0c2:	d845      	bhi.n	800d150 <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 800d0c4:	7dbb      	ldrb	r3, [r7, #22]
 800d0c6:	2bdf      	cmp	r3, #223	; 0xdf
 800d0c8:	d909      	bls.n	800d0de <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 800d0ca:	7dbb      	ldrb	r3, [r7, #22]
 800d0cc:	f003 030f 	and.w	r3, r3, #15
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff ff88 	bl	800cfec <u8g_SetAddress>
 800d0dc:	e038      	b.n	800d150 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 800d0de:	7dbb      	ldrb	r3, [r7, #22]
 800d0e0:	2bcf      	cmp	r3, #207	; 0xcf
 800d0e2:	d909      	bls.n	800d0f8 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 800d0e4:	7dbb      	ldrb	r3, [r7, #22]
 800d0e6:	f003 030f 	and.w	r3, r3, #15
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f7ff ff49 	bl	800cf88 <u8g_SetChipSelect>
 800d0f6:	e02b      	b.n	800d150 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 800d0f8:	7dbb      	ldrb	r3, [r7, #22]
 800d0fa:	2bbf      	cmp	r3, #191	; 0xbf
 800d0fc:	d91c      	bls.n	800d138 <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff ff53 	bl	800cfac <u8g_SetResetLow>
        value &= 0x0f;
 800d106:	7dbb      	ldrb	r3, [r7, #22]
 800d108:	f003 030f 	and.w	r3, r3, #15
 800d10c:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 800d10e:	7dbb      	ldrb	r3, [r7, #22]
 800d110:	011b      	lsls	r3, r3, #4
 800d112:	75bb      	strb	r3, [r7, #22]
        value+=2;
 800d114:	7dbb      	ldrb	r3, [r7, #22]
 800d116:	3302      	adds	r3, #2
 800d118:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 800d11a:	7dbb      	ldrb	r3, [r7, #22]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f3 fe8a 	bl	8000e38 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7ff ff50 	bl	800cfcc <u8g_SetResetHigh>
        u8g_Delay(value);
 800d12c:	7dbb      	ldrb	r3, [r7, #22]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4618      	mov	r0, r3
 800d132:	f7f3 fe81 	bl	8000e38 <u8g_Delay>
 800d136:	e00b      	b.n	800d150 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 800d138:	7dbb      	ldrb	r3, [r7, #22]
 800d13a:	2bbd      	cmp	r3, #189	; 0xbd
 800d13c:	d808      	bhi.n	800d150 <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 800d13e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d142:	2b00      	cmp	r3, #0
 800d144:	db04      	blt.n	800d150 <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 800d146:	7dbb      	ldrb	r3, [r7, #22]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f3 fe74 	bl	8000e38 <u8g_Delay>
      }
      is_escape = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3301      	adds	r3, #1
 800d158:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 800d15a:	e788      	b.n	800d06e <u8g_WriteEscSeqP+0x10>
        break;
 800d15c:	bf00      	nop
  }
  return 1;
 800d15e:	2301      	movs	r3, #1
}
 800d160:	4618      	mov	r0, r3
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	460b      	mov	r3, r1
 800d174:	72fb      	strb	r3, [r7, #11]
 800d176:	4613      	mov	r3, r2
 800d178:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800d17a:	7afb      	ldrb	r3, [r7, #11]
 800d17c:	2b06      	cmp	r3, #6
 800d17e:	d811      	bhi.n	800d1a4 <u8g_com_null_fn+0x3c>
 800d180:	a201      	add	r2, pc, #4	; (adr r2, 800d188 <u8g_com_null_fn+0x20>)
 800d182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d186:	bf00      	nop
 800d188:	0800d1a5 	.word	0x0800d1a5
 800d18c:	0800d1a5 	.word	0x0800d1a5
 800d190:	0800d1a5 	.word	0x0800d1a5
 800d194:	0800d1a5 	.word	0x0800d1a5
 800d198:	0800d1a5 	.word	0x0800d1a5
 800d19c:	0800d1a5 	.word	0x0800d1a5
 800d1a0:	0800d1a5 	.word	0x0800d1a5
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 800d1a4:	2301      	movs	r3, #1
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop

0800d1b4 <u8g_dev_sh1106_128x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	3b0a      	subs	r3, #10
 800d1c8:	2b0b      	cmp	r3, #11
 800d1ca:	d878      	bhi.n	800d2be <u8g_dev_sh1106_128x64_fn+0x10a>
 800d1cc:	a201      	add	r2, pc, #4	; (adr r2, 800d1d4 <u8g_dev_sh1106_128x64_fn+0x20>)
 800d1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d2:	bf00      	nop
 800d1d4:	0800d205 	.word	0x0800d205
 800d1d8:	0800d2bf 	.word	0x0800d2bf
 800d1dc:	0800d2bf 	.word	0x0800d2bf
 800d1e0:	0800d2bf 	.word	0x0800d2bf
 800d1e4:	0800d2bf 	.word	0x0800d2bf
 800d1e8:	0800d285 	.word	0x0800d285
 800d1ec:	0800d269 	.word	0x0800d269
 800d1f0:	0800d277 	.word	0x0800d277
 800d1f4:	0800d2bf 	.word	0x0800d2bf
 800d1f8:	0800d2bf 	.word	0x0800d2bf
 800d1fc:	0800d2bf 	.word	0x0800d2bf
 800d200:	0800d21b 	.word	0x0800d21b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 800d204:	2202      	movs	r2, #2
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff feaa 	bl	800cf62 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800d20e:	4a31      	ldr	r2, [pc, #196]	; (800d2d4 <u8g_dev_sh1106_128x64_fn+0x120>)
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff ff23 	bl	800d05e <u8g_WriteEscSeqP>
      break;
 800d218:	e051      	b.n	800d2be <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 800d220:	4a2d      	ldr	r2, [pc, #180]	; (800d2d8 <u8g_dev_sh1106_128x64_fn+0x124>)
 800d222:	68b9      	ldr	r1, [r7, #8]
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7ff ff1a 	bl	800d05e <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	791b      	ldrb	r3, [r3, #4]
 800d22e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800d232:	b2db      	uxtb	r3, r3
 800d234:	461a      	mov	r2, r3
 800d236:	68b9      	ldr	r1, [r7, #8]
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7ff fee9 	bl	800d010 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800d23e:	2201      	movs	r2, #1
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f7ff fed2 	bl	800cfec <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	68f9      	ldr	r1, [r7, #12]
 800d24c:	6978      	ldr	r0, [r7, #20]
 800d24e:	f000 fe73 	bl	800df38 <u8g_pb_WriteBuffer>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <u8g_dev_sh1106_128x64_fn+0xa8>
          return 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	e037      	b.n	800d2cc <u8g_dev_sh1106_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 800d25c:	2200      	movs	r2, #0
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff fe91 	bl	800cf88 <u8g_SetChipSelect>
      }
      break;
 800d266:	e02a      	b.n	800d2be <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 800d268:	4a1c      	ldr	r2, [pc, #112]	; (800d2dc <u8g_dev_sh1106_128x64_fn+0x128>)
 800d26a:	68b9      	ldr	r1, [r7, #8]
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f7ff fef6 	bl	800d05e <u8g_WriteEscSeqP>
      return 1;
 800d272:	2301      	movs	r3, #1
 800d274:	e02a      	b.n	800d2cc <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800d276:	4a1a      	ldr	r2, [pc, #104]	; (800d2e0 <u8g_dev_sh1106_128x64_fn+0x12c>)
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f7ff feef 	bl	800d05e <u8g_WriteEscSeqP>
      return 1;
 800d280:	2301      	movs	r3, #1
 800d282:	e023      	b.n	800d2cc <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 800d284:	2201      	movs	r2, #1
 800d286:	68b9      	ldr	r1, [r7, #8]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f7ff fe7d 	bl	800cf88 <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 800d28e:	2200      	movs	r2, #0
 800d290:	68b9      	ldr	r1, [r7, #8]
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f7ff feaa 	bl	800cfec <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 800d298:	2281      	movs	r2, #129	; 0x81
 800d29a:	68b9      	ldr	r1, [r7, #8]
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f7ff feb7 	bl	800d010 <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f7ff feb0 	bl	800d010 <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	68b9      	ldr	r1, [r7, #8]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff fe67 	bl	800cf88 <u8g_SetChipSelect>
	return 1;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e006      	b.n	800d2cc <u8g_dev_sh1106_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800d2be:	79fa      	ldrb	r2, [r7, #7]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 fef5 	bl	800e0b4 <u8g_dev_pb8v1_base_fn>
 800d2ca:	4603      	mov	r3, r0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	080110cc 	.word	0x080110cc
 800d2d8:	080110f4 	.word	0x080110f4
 800d2dc:	080110fc 	.word	0x080110fc
 800d2e0:	08011108 	.word	0x08011108

0800d2e4 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	4413      	add	r3, r2
 800d31a:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	81fb      	strh	r3, [r7, #14]
    font++;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3301      	adds	r3, #1
 800d326:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800d328:	89fb      	ldrh	r3, [r7, #14]
 800d32a:	021b      	lsls	r3, r3, #8
 800d32c:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	b29a      	uxth	r2, r3
 800d334:	89fb      	ldrh	r3, [r7, #14]
 800d336:	4413      	add	r3, r2
 800d338:	81fb      	strh	r3, [r7, #14]
    return pos;
 800d33a:	89fb      	ldrh	r3, [r7, #14]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 800d350:	2100      	movs	r1, #0
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7ff ffc6 	bl	800d2e4 <u8g_font_get_byte>
 800d358:	4603      	mov	r3, r0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff ffec 	bl	800d348 <u8g_font_GetFormat>
 800d370:	4603      	mov	r3, r0
 800d372:	2b02      	cmp	r3, #2
 800d374:	d00a      	beq.n	800d38c <u8g_font_GetFontGlyphStructureSize+0x2a>
 800d376:	2b02      	cmp	r3, #2
 800d378:	dc0a      	bgt.n	800d390 <u8g_font_GetFontGlyphStructureSize+0x2e>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <u8g_font_GetFontGlyphStructureSize+0x22>
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d002      	beq.n	800d388 <u8g_font_GetFontGlyphStructureSize+0x26>
 800d382:	e005      	b.n	800d390 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 800d384:	2306      	movs	r3, #6
 800d386:	e004      	b.n	800d392 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 800d388:	2303      	movs	r3, #3
 800d38a:	e002      	b.n	800d392 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 800d38c:	2306      	movs	r3, #6
 800d38e:	e000      	b.n	800d392 <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 800d390:	2303      	movs	r3, #3
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 800d3a2:	2105      	movs	r1, #5
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff ff9d 	bl	800d2e4 <u8g_font_get_byte>
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 800d3bc:	2106      	movs	r1, #6
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff ffa2 	bl	800d308 <u8g_font_get_word>
 800d3c4:	4603      	mov	r3, r0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 800d3d6:	2108      	movs	r1, #8
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff ff95 	bl	800d308 <u8g_font_get_word>
 800d3de:	4603      	mov	r3, r0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 800d3f0:	210a      	movs	r1, #10
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff ff76 	bl	800d2e4 <u8g_font_get_byte>
 800d3f8:	4603      	mov	r3, r0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b082      	sub	sp, #8
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 800d40a:	210b      	movs	r1, #11
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ff69 	bl	800d2e4 <u8g_font_get_byte>
 800d412:	4603      	mov	r3, r0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 800d424:	210c      	movs	r1, #12
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff ff5c 	bl	800d2e4 <u8g_font_get_byte>
 800d42c:	4603      	mov	r3, r0
 800d42e:	b25b      	sxtb	r3, r3
}
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 800d440:	210d      	movs	r1, #13
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7ff ff4e 	bl	800d2e4 <u8g_font_get_byte>
 800d448:	4603      	mov	r3, r0
 800d44a:	b25b      	sxtb	r3, r3
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 800d45c:	210e      	movs	r1, #14
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff ff40 	bl	800d2e4 <u8g_font_get_byte>
 800d464:	4603      	mov	r3, r0
 800d466:	b25b      	sxtb	r3, r3
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 800d478:	210f      	movs	r1, #15
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ff32 	bl	800d2e4 <u8g_font_get_byte>
 800d480:	4603      	mov	r3, r0
 800d482:	b25b      	sxtb	r3, r3
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 800d494:	2110      	movs	r1, #16
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff ff24 	bl	800d2e4 <u8g_font_get_byte>
 800d49c:	4603      	mov	r3, r0
 800d49e:	b25b      	sxtb	r3, r3
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff ff55 	bl	800d362 <u8g_font_GetFontGlyphStructureSize>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	4413      	add	r3, r2
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff ff36 	bl	800d348 <u8g_font_GetFormat>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <u8g_CopyGlyphDataToCache+0x1e>
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d11c      	bne.n	800d520 <u8g_CopyGlyphDataToCache+0x58>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781a      	ldrb	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	781a      	ldrb	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	3303      	adds	r3, #3
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	b25a      	sxtb	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	3304      	adds	r3, #4
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b25a      	sxtb	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	3305      	adds	r3, #5
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	b25a      	sxtb	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	779a      	strb	r2, [r3, #30]
      break;
 800d51e:	e036      	b.n	800d58e <u8g_CopyGlyphDataToCache+0xc6>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 800d526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d52a:	f003 030f 	and.w	r3, r3, #15
 800d52e:	b25a      	sxtb	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	3b02      	subs	r3, #2
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	b25a      	sxtb	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	091b      	lsrs	r3, r3, #4
 800d54a:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 800d54c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	f003 030f 	and.w	r3, r3, #15
 800d562:	b2da      	uxtb	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
 800d56c:	091b      	lsrs	r3, r3, #4
 800d56e:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7bfa      	ldrb	r2, [r7, #15]
 800d574:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	3302      	adds	r3, #2
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
 800d580:	091b      	lsrs	r3, r3, #4
 800d582:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 800d584:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	771a      	strb	r2, [r3, #28]
    
      
      break;
 800d58c:	bf00      	nop
  }
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	779a      	strb	r2, [r3, #30]
}
 800d5be:	bf00      	nop
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b086      	sub	sp, #24
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff feb1 	bl	800d348 <u8g_font_GetFormat>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff feb7 	bl	800d362 <u8g_font_GetFontGlyphStructureSize>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 800d5f8:	23ff      	movs	r3, #255	; 0xff
 800d5fa:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 800d5fc:	7c3b      	ldrb	r3, [r7, #16]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d101      	bne.n	800d606 <u8g_GetGlyph+0x3c>
    mask = 15;
 800d602:	230f      	movs	r3, #15
 800d604:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff feec 	bl	800d3e8 <u8g_font_GetFontStartEncoding>
 800d610:	4603      	mov	r3, r0
 800d612:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fef2 	bl	800d402 <u8g_font_GetFontEndEncoding>
 800d61e:	4603      	mov	r3, r0
 800d620:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff fed1 	bl	800d3ce <u8g_font_GetEncoding97Pos>
 800d62c:	4603      	mov	r3, r0
 800d62e:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	2b60      	cmp	r3, #96	; 0x60
 800d634:	d909      	bls.n	800d64a <u8g_GetGlyph+0x80>
 800d636:	89bb      	ldrh	r3, [r7, #12]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d006      	beq.n	800d64a <u8g_GetGlyph+0x80>
  {
    p+= pos;
 800d63c:	89bb      	ldrh	r3, [r7, #12]
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	4413      	add	r3, r2
 800d642:	617b      	str	r3, [r7, #20]
    start = 97;
 800d644:	2361      	movs	r3, #97	; 0x61
 800d646:	74fb      	strb	r3, [r7, #19]
 800d648:	e016      	b.n	800d678 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff feb0 	bl	800d3b4 <u8g_font_GetEncoding65Pos>
 800d654:	4603      	mov	r3, r0
 800d656:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	2b40      	cmp	r3, #64	; 0x40
 800d65c:	d909      	bls.n	800d672 <u8g_GetGlyph+0xa8>
 800d65e:	89bb      	ldrh	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 800d664:	89bb      	ldrh	r3, [r7, #12]
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4413      	add	r3, r2
 800d66a:	617b      	str	r3, [r7, #20]
      start = 65;
 800d66c:	2341      	movs	r3, #65	; 0x41
 800d66e:	74fb      	strb	r3, [r7, #19]
 800d670:	e002      	b.n	800d678 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	3311      	adds	r3, #17
 800d676:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 800d678:	78fa      	ldrb	r2, [r7, #3]
 800d67a:	7bbb      	ldrb	r3, [r7, #14]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d904      	bls.n	800d68a <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff ff88 	bl	800d596 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 800d686:	2300      	movs	r3, #0
 800d688:	e032      	b.n	800d6f0 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 800d68a:	7cfb      	ldrb	r3, [r7, #19]
 800d68c:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 800d68e:	7cba      	ldrb	r2, [r7, #18]
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	429a      	cmp	r2, r3
 800d694:	d828      	bhi.n	800d6e8 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2bff      	cmp	r3, #255	; 0xff
 800d69c:	d103      	bne.n	800d6a6 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	e017      	b.n	800d6d6 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 800d6a6:	7cba      	ldrb	r2, [r7, #18]
 800d6a8:	78fb      	ldrb	r3, [r7, #3]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d105      	bne.n	800d6ba <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 800d6ae:	6979      	ldr	r1, [r7, #20]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ff09 	bl	800d4c8 <u8g_CopyGlyphDataToCache>
          return p;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	e01a      	b.n	800d6f0 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	3302      	adds	r3, #2
 800d6be:	781a      	ldrb	r2, [r3, #0]
 800d6c0:	7c7b      	ldrb	r3, [r7, #17]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	697a      	ldr	r2, [r7, #20]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 800d6d6:	7cba      	ldrb	r2, [r7, #18]
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d003      	beq.n	800d6e6 <u8g_GetGlyph+0x11c>
        break;
      i++;
 800d6de:	7cbb      	ldrb	r3, [r7, #18]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800d6e4:	e7d7      	b.n	800d696 <u8g_GetGlyph+0xcc>
        break;
 800d6e6:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ff54 	bl	800d596 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	4608      	mov	r0, r1
 800d702:	4611      	mov	r1, r2
 800d704:	461a      	mov	r2, r3
 800d706:	4603      	mov	r3, r0
 800d708:	70fb      	strb	r3, [r7, #3]
 800d70a:	460b      	mov	r3, r1
 800d70c:	70bb      	strb	r3, [r7, #2]
 800d70e:	4613      	mov	r3, r2
 800d710:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 800d712:	787b      	ldrb	r3, [r7, #1]
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff ff57 	bl	800d5ca <u8g_GetGlyph>
 800d71c:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <u8g_draw_glyph+0x30>
      return 0;
 800d724:	2300      	movs	r3, #0
 800d726:	e06d      	b.n	800d804 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	68f9      	ldr	r1, [r7, #12]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff feba 	bl	800d4a8 <u8g_font_GetGlyphDataStart>
 800d734:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7fdb      	ldrb	r3, [r3, #31]
 800d73a:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d742:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f993 301d 	ldrsb.w	r3, [r3, #29]
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	4413      	add	r3, r2
 800d750:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	78ba      	ldrb	r2, [r7, #2]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	70bb      	strb	r3, [r7, #2]
  y--;
 800d760:	78bb      	ldrb	r3, [r7, #2]
 800d762:	3b01      	subs	r3, #1
 800d764:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 800d766:	78ba      	ldrb	r2, [r7, #2]
 800d768:	7abb      	ldrb	r3, [r7, #10]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	3301      	adds	r3, #1
 800d770:	b2da      	uxtb	r2, r3
 800d772:	7af8      	ldrb	r0, [r7, #11]
 800d774:	78f9      	ldrb	r1, [r7, #3]
 800d776:	7abb      	ldrb	r3, [r7, #10]
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4603      	mov	r3, r0
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff fb75 	bl	800ce6c <u8g_IsBBXIntersection>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d103      	bne.n	800d790 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800d78e:	e039      	b.n	800d804 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 800d790:	7afb      	ldrb	r3, [r7, #11]
 800d792:	3307      	adds	r3, #7
 800d794:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	08db      	lsrs	r3, r3, #3
 800d79a:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 800d79c:	78bb      	ldrb	r3, [r7, #2]
 800d79e:	743b      	strb	r3, [r7, #16]
  iy -= h;
 800d7a0:	7c3a      	ldrb	r2, [r7, #16]
 800d7a2:	7abb      	ldrb	r3, [r7, #10]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	743b      	strb	r3, [r7, #16]
  iy++;
 800d7a8:	7c3b      	ldrb	r3, [r7, #16]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	74bb      	strb	r3, [r7, #18]
 800d7b2:	e020      	b.n	800d7f6 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 800d7b4:	78fb      	ldrb	r3, [r7, #3]
 800d7b6:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	74fb      	strb	r3, [r7, #19]
 800d7bc:	e011      	b.n	800d7e2 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	7c3a      	ldrb	r2, [r7, #16]
 800d7c4:	7c79      	ldrb	r1, [r7, #17]
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fa8c 	bl	800dce8 <u8g_Draw8Pixel>
      data++;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
      ix+=8;
 800d7d6:	7c7b      	ldrb	r3, [r7, #17]
 800d7d8:	3308      	adds	r3, #8
 800d7da:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800d7dc:	7cfb      	ldrb	r3, [r7, #19]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	74fb      	strb	r3, [r7, #19]
 800d7e2:	7cfa      	ldrb	r2, [r7, #19]
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d3e9      	bcc.n	800d7be <u8g_draw_glyph+0xc6>
    }
    iy++;
 800d7ea:	7c3b      	ldrb	r3, [r7, #16]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 800d7f0:	7cbb      	ldrb	r3, [r7, #18]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	74bb      	strb	r3, [r7, #18]
 800d7f6:	7cba      	ldrb	r2, [r7, #18]
 800d7f8:	7abb      	ldrb	r3, [r7, #10]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d3da      	bcc.n	800d7b4 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3718      	adds	r7, #24
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	72fb      	strb	r3, [r7, #11]
 800d81a:	4613      	mov	r3, r2
 800d81c:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	4798      	blx	r3
 800d82a:	4603      	mov	r3, r0
 800d82c:	461a      	mov	r2, r3
 800d82e:	7abb      	ldrb	r3, [r7, #10]
 800d830:	4413      	add	r3, r2
 800d832:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 800d834:	e013      	b.n	800d85e <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	7aba      	ldrb	r2, [r7, #10]
 800d83c:	7af9      	ldrb	r1, [r7, #11]
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7ff ff5a 	bl	800d6f8 <u8g_draw_glyph>
 800d844:	4603      	mov	r3, r0
 800d846:	75bb      	strb	r3, [r7, #22]
    x += d;
 800d848:	7dba      	ldrb	r2, [r7, #22]
 800d84a:	7afb      	ldrb	r3, [r7, #11]
 800d84c:	4413      	add	r3, r2
 800d84e:	72fb      	strb	r3, [r7, #11]
    t += d;
 800d850:	7dba      	ldrb	r2, [r7, #22]
 800d852:	7dfb      	ldrb	r3, [r7, #23]
 800d854:	4413      	add	r3, r2
 800d856:	75fb      	strb	r3, [r7, #23]
    s++;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3301      	adds	r3, #1
 800d85c:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e7      	bne.n	800d836 <u8g_DrawStr+0x2a>
  }
  return t;
 800d866:	7dfb      	ldrb	r3, [r7, #23]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d06b      	beq.n	800d958 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d886:	2b00      	cmp	r3, #0
 800d888:	d114      	bne.n	800d8b4 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff fd83 	bl	800d39a <u8g_font_GetCapitalAHeight>
 800d894:	4603      	mov	r3, r0
 800d896:	b25a      	sxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fdba 	bl	800d41c <u8g_font_GetLowerGDescent>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800d8b2:	e02d      	b.n	800d910 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d114      	bne.n	800d8e8 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fdd4 	bl	800d470 <u8g_font_GetFontXAscent>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fdd8 	bl	800d48c <u8g_font_GetFontXDescent>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	461a      	mov	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800d8e6:	e013      	b.n	800d910 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff fda3 	bl	800d438 <u8g_font_GetFontAscent>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff fda7 	bl	800d454 <u8g_font_GetFontDescent>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800d916:	b21a      	sxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800d91e:	b21b      	sxth	r3, r3
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	b21b      	sxth	r3, r3
 800d924:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d92c:	2b40      	cmp	r3, #64	; 0x40
 800d92e:	d00d      	beq.n	800d94c <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 800d930:	89fb      	ldrh	r3, [r7, #14]
 800d932:	b2db      	uxtb	r3, r3
 800d934:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	89fa      	ldrh	r2, [r7, #14]
 800d940:	fb12 f303 	smulbb	r3, r2, r3
 800d944:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 800d946:	89fb      	ldrh	r3, [r7, #14]
 800d948:	099b      	lsrs	r3, r3, #6
 800d94a:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 800d94c:	89fb      	ldrh	r3, [r7, #14]
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d956:	e000      	b.n	800d95a <u8g_UpdateRefHeight+0xea>
    return;
 800d958:	bf00      	nop
}
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  return 0;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
	...

0800d978 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a04      	ldr	r2, [pc, #16]	; (800d994 <u8g_SetFontPosBaseline+0x1c>)
 800d984:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	0800d961 	.word	0x0800d961

0800d998 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d008      	beq.n	800d9be <u8g_SetFont+0x26>
  {
    u8g->font = font;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7ff ff5c 	bl	800d870 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff ffdd 	bl	800d978 <u8g_SetFontPosBaseline>
  }
}
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800d9c6:	b590      	push	{r4, r7, lr}
 800d9c8:	b085      	sub	sp, #20
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	60f8      	str	r0, [r7, #12]
 800d9ce:	60b9      	str	r1, [r7, #8]
 800d9d0:	603b      	str	r3, [r7, #0]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	681c      	ldr	r4, [r3, #0]
 800d9da:	79fa      	ldrb	r2, [r7, #7]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	68b9      	ldr	r1, [r7, #8]
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	47a0      	blx	r4
 800d9e4:	4603      	mov	r3, r0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd90      	pop	{r4, r7, pc}

0800d9ee <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fc:	2002      	movs	r0, #2
 800d9fe:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 800da00:	2300      	movs	r3, #0
 800da02:	220a      	movs	r2, #10
 800da04:	6839      	ldr	r1, [r7, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7ff ffdd 	bl	800d9c6 <u8g_call_dev_fn>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da14:	2003      	movs	r0, #3
 800da16:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1c:	2000      	movs	r0, #0
 800da1e:	4798      	blx	r3
  return r;
 800da20:	7bfb      	ldrb	r3, [r7, #15]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da38:	2002      	movs	r0, #2
 800da3a:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da40:	2001      	movs	r0, #1
 800da42:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 800da44:	2300      	movs	r3, #0
 800da46:	2214      	movs	r2, #20
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ffbb 	bl	800d9c6 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3338      	adds	r3, #56	; 0x38
 800da54:	2217      	movs	r2, #23
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff ffb4 	bl	800d9c6 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da62:	2000      	movs	r0, #0
 800da64:	4798      	blx	r3
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7c:	2002      	movs	r0, #2
 800da7e:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	2001      	movs	r0, #1
 800da86:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 800da88:	2300      	movs	r3, #0
 800da8a:	2215      	movs	r2, #21
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff ff99 	bl	800d9c6 <u8g_call_dev_fn>
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d006      	beq.n	800daac <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3338      	adds	r3, #56	; 0x38
 800daa2:	2217      	movs	r2, #23
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7ff ff8d 	bl	800d9c6 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab0:	2000      	movs	r0, #0
 800dab2:	4798      	blx	r3
  return r;
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b086      	sub	sp, #24
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	60f8      	str	r0, [r7, #12]
 800dac6:	60b9      	str	r1, [r7, #8]
 800dac8:	4611      	mov	r1, r2
 800daca:	461a      	mov	r2, r3
 800dacc:	460b      	mov	r3, r1
 800dace:	71fb      	strb	r3, [r7, #7]
 800dad0:	4613      	mov	r3, r2
 800dad2:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	332d      	adds	r3, #45	; 0x2d
 800dad8:	617b      	str	r3, [r7, #20]
  arg->x = x;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	79fa      	ldrb	r2, [r7, #7]
 800dade:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	79ba      	ldrb	r2, [r7, #6]
 800dae4:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800daec:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800daf4:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	223b      	movs	r2, #59	; 0x3b
 800dafa:	68b9      	ldr	r1, [r7, #8]
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff ff62 	bl	800d9c6 <u8g_call_dev_fn>
}
 800db02:	bf00      	nop
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
 800db12:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800db14:	f107 030f 	add.w	r3, r7, #15
 800db18:	2246      	movs	r2, #70	; 0x46
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff ff52 	bl	800d9c6 <u8g_call_dev_fn>
  return r;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800db36:	f107 030f 	add.w	r3, r7, #15
 800db3a:	2247      	movs	r2, #71	; 0x47
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ff41 	bl	800d9c6 <u8g_call_dev_fn>
  return r;
 800db44:	7bfb      	ldrb	r3, [r7, #15]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 800db58:	2300      	movs	r3, #0
 800db5a:	2248      	movs	r2, #72	; 0x48
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff ff31 	bl	800d9c6 <u8g_call_dev_fn>
 800db64:	4603      	mov	r3, r0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff ffc4 	bl	800db0a <u8g_GetWidthLL>
 800db82:	4603      	mov	r3, r0
 800db84:	461a      	mov	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff ffcb 	bl	800db2c <u8g_GetHeightLL>
 800db96:	4603      	mov	r3, r0
 800db98:	461a      	mov	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	4619      	mov	r1, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff ffd2 	bl	800db4e <u8g_GetModeLL>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	461a      	mov	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6859      	ldr	r1, [r3, #4]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3338      	adds	r3, #56	; 0x38
 800dbba:	2217      	movs	r2, #23
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ff02 	bl	800d9c6 <u8g_call_dev_fn>
}
 800dbc2:	bf00      	nop
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2222      	movs	r2, #34	; 0x22
 800dbf0:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f891 	bl	800dd22 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff feb9 	bl	800d978 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2240      	movs	r2, #64	; 0x40
 800dc22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a02      	ldr	r2, [pc, #8]	; (800dc3c <u8g_init_data+0x70>)
 800dc32:	635a      	str	r2, [r3, #52]	; 0x34

}
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	0800e255 	.word	0x0800e255

0800dc40 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fecd 	bl	800d9ee <u8g_InitLL>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <u8g_Begin+0x1e>
    return 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	e003      	b.n	800dc66 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff ff85 	bl	800db6e <u8g_UpdateDimension>
  return 1;
 800dc64:	2301      	movs	r3, #1
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7ff ffa6 	bl	800dbcc <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7ff ffd6 	bl	800dc40 <u8g_Begin>
 800dc94:	4603      	mov	r3, r0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff febc 	bl	800da2a <u8g_FirstPageLL>
}
 800dcb2:	bf00      	nop
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff fec8 	bl	800da6e <u8g_NextPageLL>
 800dcde:	4603      	mov	r3, r0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	4611      	mov	r1, r2
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	70fb      	strb	r3, [r7, #3]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	70bb      	strb	r3, [r7, #2]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6859      	ldr	r1, [r3, #4]
 800dd06:	78b8      	ldrb	r0, [r7, #2]
 800dd08:	78fa      	ldrb	r2, [r7, #3]
 800dd0a:	7c3b      	ldrb	r3, [r7, #16]
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	787b      	ldrb	r3, [r7, #1]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	4603      	mov	r3, r0
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f7ff fed2 	bl	800dabe <u8g_Draw8PixelLL>
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 800dd22:	b480      	push	{r7}
 800dd24:	b083      	sub	sp, #12
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	78fa      	ldrb	r2, [r7, #3]
 800dd32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 800dd36:	bf00      	nop
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b083      	sub	sp, #12
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	781a      	ldrb	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	78db      	ldrb	r3, [r3, #3]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	711a      	strb	r2, [r3, #4]
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 800dd76:	b490      	push	{r4, r7}
 800dd78:	b082      	sub	sp, #8
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	789a      	ldrb	r2, [r3, #2]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	4413      	add	r3, r2
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	789a      	ldrb	r2, [r3, #2]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	785b      	ldrb	r3, [r3, #1]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d301      	bcc.n	800dd9e <u8g_page_Next+0x28>
    return 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e018      	b.n	800ddd0 <u8g_page_Next+0x5a>
  p->page++;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	3301      	adds	r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	4423      	add	r3, r4
 800ddb4:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	785b      	ldrb	r3, [r3, #1]
 800ddba:	429c      	cmp	r4, r3
 800ddbc:	d304      	bcc.n	800ddc8 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	785c      	ldrb	r4, [r3, #1]
    y1--;
 800ddc2:	4623      	mov	r3, r4
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4622      	mov	r2, r4
 800ddcc:	70da      	strb	r2, [r3, #3]
  
  return 1;
 800ddce:	2301      	movs	r3, #1
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bc90      	pop	{r4, r7}
 800ddd8:	4770      	bx	lr

0800ddda <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b085      	sub	sp, #20
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	795b      	ldrb	r3, [r3, #5]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	60fa      	str	r2, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	429a      	cmp	r2, r3
 800de08:	d1f6      	bne.n	800ddf8 <u8g_pb_Clear+0x1e>
}
 800de0a:	bf00      	nop
 800de0c:	bf00      	nop
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
 800de24:	4613      	mov	r3, r2
 800de26:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	78db      	ldrb	r3, [r3, #3]
 800de2c:	78fa      	ldrb	r2, [r7, #3]
 800de2e:	429a      	cmp	r2, r3
 800de30:	bf94      	ite	ls
 800de32:	2301      	movls	r3, #1
 800de34:	2300      	movhi	r3, #0
 800de36:	b2db      	uxtb	r3, r3
 800de38:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	789b      	ldrb	r3, [r3, #2]
 800de3e:	78ba      	ldrb	r2, [r7, #2]
 800de40:	429a      	cmp	r2, r3
 800de42:	bf2c      	ite	cs
 800de44:	2301      	movcs	r3, #1
 800de46:	2300      	movcc	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 800de4c:	78fa      	ldrb	r2, [r7, #3]
 800de4e:	78bb      	ldrb	r3, [r7, #2]
 800de50:	429a      	cmp	r2, r3
 800de52:	bf8c      	ite	hi
 800de54:	2301      	movhi	r3, #1
 800de56:	2300      	movls	r3, #0
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 800de5c:	7bfb      	ldrb	r3, [r7, #15]
 800de5e:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 800de60:	7bfa      	ldrb	r2, [r7, #15]
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	4013      	ands	r3, r2
 800de66:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 800de68:	7bba      	ldrb	r2, [r7, #14]
 800de6a:	7b7b      	ldrb	r3, [r7, #13]
 800de6c:	4013      	ands	r3, r2
 800de6e:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 800de70:	7b7a      	ldrb	r2, [r7, #13]
 800de72:	7b3b      	ldrb	r3, [r7, #12]
 800de74:	4013      	ands	r3, r2
 800de76:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 800de78:	7bfa      	ldrb	r2, [r7, #15]
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 800de80:	7bfa      	ldrb	r2, [r7, #15]
 800de82:	7b7b      	ldrb	r3, [r7, #13]
 800de84:	4313      	orrs	r3, r2
 800de86:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	f003 0301 	and.w	r3, r3, #1
 800de8e:	b2db      	uxtb	r3, r3
}
 800de90:	4618      	mov	r0, r3
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2200      	movs	r2, #0
 800deaa:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	789a      	ldrb	r2, [r3, #2]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	795a      	ldrb	r2, [r3, #5]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	709a      	strb	r2, [r3, #2]
  box->x1--;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	789b      	ldrb	r3, [r3, #2]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	78da      	ldrb	r2, [r3, #3]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	70da      	strb	r2, [r3, #3]
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	785b      	ldrb	r3, [r3, #1]
 800deea:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 800deec:	7bfb      	ldrb	r3, [r7, #15]
 800deee:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	78db      	ldrb	r3, [r3, #3]
 800def4:	2b03      	cmp	r3, #3
 800def6:	d813      	bhi.n	800df20 <u8g_pb_Is8PixelVisible+0x44>
 800def8:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <u8g_pb_Is8PixelVisible+0x24>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df21 	.word	0x0800df21
 800df04:	0800df11 	.word	0x0800df11
 800df08:	0800df21 	.word	0x0800df21
 800df0c:	0800df19 	.word	0x0800df19
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 800df10:	7bbb      	ldrb	r3, [r7, #14]
 800df12:	3308      	adds	r3, #8
 800df14:	73bb      	strb	r3, [r7, #14]
      break;
 800df16:	e003      	b.n	800df20 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	3b08      	subs	r3, #8
 800df1c:	73fb      	strb	r3, [r7, #15]
      break;
 800df1e:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 800df20:	7bba      	ldrb	r2, [r7, #14]
 800df22:	7bfb      	ldrb	r3, [r7, #15]
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff ff76 	bl	800de18 <u8g_pb_IsYIntersection>
 800df2c:	4603      	mov	r3, r0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3710      	adds	r7, #16
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop

0800df38 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	795a      	ldrb	r2, [r3, #5]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	68b8      	ldr	r0, [r7, #8]
 800df50:	f7ff f871 	bl	800d036 <u8g_WriteSequence>
 800df54:	4603      	mov	r3, r0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 800df5e:	b490      	push	{r4, r7}
 800df60:	b084      	sub	sp, #16
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	4608      	mov	r0, r1
 800df68:	4611      	mov	r1, r2
 800df6a:	461a      	mov	r2, r3
 800df6c:	4603      	mov	r3, r0
 800df6e:	70fb      	strb	r3, [r7, #3]
 800df70:	460b      	mov	r3, r1
 800df72:	70bb      	strb	r3, [r7, #2]
 800df74:	4613      	mov	r3, r2
 800df76:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	789b      	ldrb	r3, [r3, #2]
 800df82:	78ba      	ldrb	r2, [r7, #2]
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 800df88:	2401      	movs	r4, #1
  y &= 0x07;
 800df8a:	78bb      	ldrb	r3, [r7, #2]
 800df8c:	f003 0307 	and.w	r3, r3, #7
 800df90:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 800df92:	4622      	mov	r2, r4
 800df94:	78bb      	ldrb	r3, [r7, #2]
 800df96:	fa02 f303 	lsl.w	r3, r2, r3
 800df9a:	b2dc      	uxtb	r4, r3
  ptr += x;
 800df9c:	78fb      	ldrb	r3, [r7, #3]
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 800dfa4:	787b      	ldrb	r3, [r7, #1]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d006      	beq.n	800dfb8 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	4323      	orrs	r3, r4
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 800dfb6:	e007      	b.n	800dfc8 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 800dfb8:	43e3      	mvns	r3, r4
 800dfba:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	4023      	ands	r3, r4
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	701a      	strb	r2, [r3, #0]
}
 800dfc8:	bf00      	nop
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bc90      	pop	{r4, r7}
 800dfd0:	4770      	bx	lr

0800dfd2 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	785a      	ldrb	r2, [r3, #1]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	789b      	ldrb	r3, [r3, #2]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d315      	bcc.n	800e014 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	785a      	ldrb	r2, [r3, #1]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	78db      	ldrb	r3, [r3, #3]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d811      	bhi.n	800e018 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	795b      	ldrb	r3, [r3, #5]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d20d      	bcs.n	800e01c <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	7819      	ldrb	r1, [r3, #0]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	785a      	ldrb	r2, [r3, #1]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	791b      	ldrb	r3, [r3, #4]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff ffa6 	bl	800df5e <u8g_pb8v1_set_pixel>
 800e012:	e004      	b.n	800e01e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800e014:	bf00      	nop
 800e016:	e002      	b.n	800e01e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800e018:	bf00      	nop
 800e01a:	e000      	b.n	800e01e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800e01c:	bf00      	nop
}
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	78db      	ldrb	r3, [r3, #3]
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d81a      	bhi.n	800e078 <u8g_pb8v1_Set8PixelOpt2+0x54>
 800e042:	a201      	add	r2, pc, #4	; (adr r2, 800e048 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 800e044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e048:	0800e059 	.word	0x0800e059
 800e04c:	0800e061 	.word	0x0800e061
 800e050:	0800e069 	.word	0x0800e069
 800e054:	0800e071 	.word	0x0800e071
  {
    case 0: dx++; break;
 800e058:	7bfb      	ldrb	r3, [r7, #15]
 800e05a:	3301      	adds	r3, #1
 800e05c:	73fb      	strb	r3, [r7, #15]
 800e05e:	e00b      	b.n	800e078 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 800e060:	7bbb      	ldrb	r3, [r7, #14]
 800e062:	3301      	adds	r3, #1
 800e064:	73bb      	strb	r3, [r7, #14]
 800e066:	e007      	b.n	800e078 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	73fb      	strb	r3, [r7, #15]
 800e06e:	e003      	b.n	800e078 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 800e070:	7bbb      	ldrb	r3, [r7, #14]
 800e072:	3b01      	subs	r3, #1
 800e074:	73bb      	strb	r3, [r7, #14]
 800e076:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 800e078:	b263      	sxtb	r3, r4
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	da03      	bge.n	800e086 <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 800e07e:	6839      	ldr	r1, [r7, #0]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff ffa6 	bl	800dfd2 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
 800e08c:	4413      	add	r3, r2
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	785a      	ldrb	r2, [r3, #1]
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	4413      	add	r3, r2
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 800e0a2:	0063      	lsls	r3, r4, #1
 800e0a4:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 800e0a6:	2c00      	cmp	r4, #0
 800e0a8:	d1e6      	bne.n	800e078 <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 800e0aa:	bf00      	nop
 800e0ac:	bf00      	nop
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd90      	pop	{r4, r7, pc}

0800e0b4 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	603b      	str	r3, [r7, #0]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	617b      	str	r3, [r7, #20]
  switch(msg)
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	3b0a      	subs	r3, #10
 800e0ce:	2b3e      	cmp	r3, #62	; 0x3e
 800e0d0:	f200 80ba 	bhi.w	800e248 <u8g_dev_pb8v1_base_fn+0x194>
 800e0d4:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <u8g_dev_pb8v1_base_fn+0x28>)
 800e0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0da:	bf00      	nop
 800e0dc:	0800e249 	.word	0x0800e249
 800e0e0:	0800e249 	.word	0x0800e249
 800e0e4:	0800e249 	.word	0x0800e249
 800e0e8:	0800e249 	.word	0x0800e249
 800e0ec:	0800e249 	.word	0x0800e249
 800e0f0:	0800e249 	.word	0x0800e249
 800e0f4:	0800e249 	.word	0x0800e249
 800e0f8:	0800e249 	.word	0x0800e249
 800e0fc:	0800e249 	.word	0x0800e249
 800e100:	0800e249 	.word	0x0800e249
 800e104:	0800e1fb 	.word	0x0800e1fb
 800e108:	0800e20b 	.word	0x0800e20b
 800e10c:	0800e249 	.word	0x0800e249
 800e110:	0800e225 	.word	0x0800e225
 800e114:	0800e249 	.word	0x0800e249
 800e118:	0800e249 	.word	0x0800e249
 800e11c:	0800e249 	.word	0x0800e249
 800e120:	0800e249 	.word	0x0800e249
 800e124:	0800e249 	.word	0x0800e249
 800e128:	0800e249 	.word	0x0800e249
 800e12c:	0800e249 	.word	0x0800e249
 800e130:	0800e249 	.word	0x0800e249
 800e134:	0800e249 	.word	0x0800e249
 800e138:	0800e249 	.word	0x0800e249
 800e13c:	0800e249 	.word	0x0800e249
 800e140:	0800e249 	.word	0x0800e249
 800e144:	0800e249 	.word	0x0800e249
 800e148:	0800e249 	.word	0x0800e249
 800e14c:	0800e249 	.word	0x0800e249
 800e150:	0800e249 	.word	0x0800e249
 800e154:	0800e249 	.word	0x0800e249
 800e158:	0800e249 	.word	0x0800e249
 800e15c:	0800e249 	.word	0x0800e249
 800e160:	0800e249 	.word	0x0800e249
 800e164:	0800e249 	.word	0x0800e249
 800e168:	0800e249 	.word	0x0800e249
 800e16c:	0800e249 	.word	0x0800e249
 800e170:	0800e249 	.word	0x0800e249
 800e174:	0800e249 	.word	0x0800e249
 800e178:	0800e249 	.word	0x0800e249
 800e17c:	0800e1f1 	.word	0x0800e1f1
 800e180:	0800e249 	.word	0x0800e249
 800e184:	0800e249 	.word	0x0800e249
 800e188:	0800e249 	.word	0x0800e249
 800e18c:	0800e249 	.word	0x0800e249
 800e190:	0800e249 	.word	0x0800e249
 800e194:	0800e249 	.word	0x0800e249
 800e198:	0800e249 	.word	0x0800e249
 800e19c:	0800e249 	.word	0x0800e249
 800e1a0:	0800e1d9 	.word	0x0800e1d9
 800e1a4:	0800e249 	.word	0x0800e249
 800e1a8:	0800e249 	.word	0x0800e249
 800e1ac:	0800e249 	.word	0x0800e249
 800e1b0:	0800e249 	.word	0x0800e249
 800e1b4:	0800e249 	.word	0x0800e249
 800e1b8:	0800e249 	.word	0x0800e249
 800e1bc:	0800e249 	.word	0x0800e249
 800e1c0:	0800e249 	.word	0x0800e249
 800e1c4:	0800e249 	.word	0x0800e249
 800e1c8:	0800e249 	.word	0x0800e249
 800e1cc:	0800e22f 	.word	0x0800e22f
 800e1d0:	0800e239 	.word	0x0800e239
 800e1d4:	0800e243 	.word	0x0800e243
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6978      	ldr	r0, [r7, #20]
 800e1dc:	f7ff fe7e 	bl	800dedc <u8g_pb_Is8PixelVisible>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d02f      	beq.n	800e246 <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6978      	ldr	r0, [r7, #20]
 800e1ea:	f7ff ff1b 	bl	800e024 <u8g_pb8v1_Set8PixelOpt2>
      break;
 800e1ee:	e02a      	b.n	800e246 <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f7ff feed 	bl	800dfd2 <u8g_pb8v1_SetPixel>
      break;
 800e1f8:	e026      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 800e1fa:	6978      	ldr	r0, [r7, #20]
 800e1fc:	f7ff fded 	bl	800ddda <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff fd9d 	bl	800dd42 <u8g_page_First>
      break;
 800e208:	e01e      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7ff fdb2 	bl	800dd76 <u8g_page_Next>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	e016      	b.n	800e24a <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 800e21c:	6978      	ldr	r0, [r7, #20]
 800e21e:	f7ff fddc 	bl	800ddda <u8g_pb_Clear>
      break;
 800e222:	e011      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	f7ff fe38 	bl	800de9c <u8g_pb_GetPageBox>
      break;
 800e22c:	e00c      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	795a      	ldrb	r2, [r3, #5]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	701a      	strb	r2, [r3, #0]
      break;
 800e236:	e007      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	785a      	ldrb	r2, [r3, #1]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	701a      	strb	r2, [r3, #0]
      break;
 800e240:	e002      	b.n	800e248 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 800e242:	2301      	movs	r3, #1
 800e244:	e001      	b.n	800e24a <u8g_dev_pb8v1_base_fn+0x196>
      break;
 800e246:	bf00      	nop
  }
  return 1;
 800e248:	2301      	movs	r3, #1
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop

0800e254 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 800e25e:	bf00      	nop
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b084      	sub	sp, #16
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	460b      	mov	r3, r1
 800e274:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e276:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e27a:	f002 f9cb 	bl	8010614 <USBD_static_malloc>
 800e27e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d105      	bne.n	800e292 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e28e:	2302      	movs	r3, #2
 800e290:	e066      	b.n	800e360 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	7c1b      	ldrb	r3, [r3, #16]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d119      	bne.n	800e2d6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	2181      	movs	r1, #129	; 0x81
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 ffb4 	bl	8010218 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	2101      	movs	r1, #1
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f001 ffaa 	bl	8010218 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2210      	movs	r2, #16
 800e2d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e2d4:	e016      	b.n	800e304 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2d6:	2340      	movs	r3, #64	; 0x40
 800e2d8:	2202      	movs	r2, #2
 800e2da:	2181      	movs	r1, #129	; 0x81
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 ff9b 	bl	8010218 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2e8:	2340      	movs	r3, #64	; 0x40
 800e2ea:	2202      	movs	r2, #2
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f001 ff92 	bl	8010218 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2210      	movs	r2, #16
 800e300:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e304:	2308      	movs	r3, #8
 800e306:	2203      	movs	r2, #3
 800e308:	2182      	movs	r1, #130	; 0x82
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 ff84 	bl	8010218 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	7c1b      	ldrb	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d109      	bne.n	800e34e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e340:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e344:	2101      	movs	r1, #1
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f002 f8e2 	bl	8010510 <USBD_LL_PrepareReceive>
 800e34c:	e007      	b.n	800e35e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e354:	2340      	movs	r3, #64	; 0x40
 800e356:	2101      	movs	r1, #1
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f002 f8d9 	bl	8010510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	460b      	mov	r3, r1
 800e372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e374:	2181      	movs	r1, #129	; 0x81
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 ff8c 	bl	8010294 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e382:	2101      	movs	r1, #1
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f001 ff85 	bl	8010294 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e392:	2182      	movs	r1, #130	; 0x82
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f001 ff7d 	bl	8010294 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00e      	beq.n	800e3d2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f002 f933 	bl	8010630 <USBD_static_free>
    pdev->pClassData = NULL;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e400:	2303      	movs	r3, #3
 800e402:	e0af      	b.n	800e564 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d03f      	beq.n	800e490 <USBD_CDC_Setup+0xb4>
 800e410:	2b20      	cmp	r3, #32
 800e412:	f040 809f 	bne.w	800e554 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	88db      	ldrh	r3, [r3, #6]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d02e      	beq.n	800e47c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	b25b      	sxtb	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	da16      	bge.n	800e456 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e434:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	88d2      	ldrh	r2, [r2, #6]
 800e43a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	88db      	ldrh	r3, [r3, #6]
 800e440:	2b07      	cmp	r3, #7
 800e442:	bf28      	it	cs
 800e444:	2307      	movcs	r3, #7
 800e446:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	89fa      	ldrh	r2, [r7, #14]
 800e44c:	4619      	mov	r1, r3
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f001 facf 	bl	800f9f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e454:	e085      	b.n	800e562 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	785a      	ldrb	r2, [r3, #1]
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	88db      	ldrh	r3, [r3, #6]
 800e464:	b2da      	uxtb	r2, r3
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e46c:	6939      	ldr	r1, [r7, #16]
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	88db      	ldrh	r3, [r3, #6]
 800e472:	461a      	mov	r2, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f001 fae8 	bl	800fa4a <USBD_CtlPrepareRx>
      break;
 800e47a:	e072      	b.n	800e562 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	7850      	ldrb	r0, [r2, #1]
 800e488:	2200      	movs	r2, #0
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	4798      	blx	r3
      break;
 800e48e:	e068      	b.n	800e562 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b0b      	cmp	r3, #11
 800e496:	d852      	bhi.n	800e53e <USBD_CDC_Setup+0x162>
 800e498:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <USBD_CDC_Setup+0xc4>)
 800e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49e:	bf00      	nop
 800e4a0:	0800e4d1 	.word	0x0800e4d1
 800e4a4:	0800e54d 	.word	0x0800e54d
 800e4a8:	0800e53f 	.word	0x0800e53f
 800e4ac:	0800e53f 	.word	0x0800e53f
 800e4b0:	0800e53f 	.word	0x0800e53f
 800e4b4:	0800e53f 	.word	0x0800e53f
 800e4b8:	0800e53f 	.word	0x0800e53f
 800e4bc:	0800e53f 	.word	0x0800e53f
 800e4c0:	0800e53f 	.word	0x0800e53f
 800e4c4:	0800e53f 	.word	0x0800e53f
 800e4c8:	0800e4fb 	.word	0x0800e4fb
 800e4cc:	0800e525 	.word	0x0800e525
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b03      	cmp	r3, #3
 800e4da:	d107      	bne.n	800e4ec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e4dc:	f107 030a 	add.w	r3, r7, #10
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f001 fa84 	bl	800f9f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e4ea:	e032      	b.n	800e552 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 fa0e 	bl	800f910 <USBD_CtlError>
            ret = USBD_FAIL;
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	75fb      	strb	r3, [r7, #23]
          break;
 800e4f8:	e02b      	b.n	800e552 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b03      	cmp	r3, #3
 800e504:	d107      	bne.n	800e516 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e506:	f107 030d 	add.w	r3, r7, #13
 800e50a:	2201      	movs	r2, #1
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f001 fa6f 	bl	800f9f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e514:	e01d      	b.n	800e552 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f001 f9f9 	bl	800f910 <USBD_CtlError>
            ret = USBD_FAIL;
 800e51e:	2303      	movs	r3, #3
 800e520:	75fb      	strb	r3, [r7, #23]
          break;
 800e522:	e016      	b.n	800e552 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	2b03      	cmp	r3, #3
 800e52e:	d00f      	beq.n	800e550 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f001 f9ec 	bl	800f910 <USBD_CtlError>
            ret = USBD_FAIL;
 800e538:	2303      	movs	r3, #3
 800e53a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e53c:	e008      	b.n	800e550 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e53e:	6839      	ldr	r1, [r7, #0]
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f001 f9e5 	bl	800f910 <USBD_CtlError>
          ret = USBD_FAIL;
 800e546:	2303      	movs	r3, #3
 800e548:	75fb      	strb	r3, [r7, #23]
          break;
 800e54a:	e002      	b.n	800e552 <USBD_CDC_Setup+0x176>
          break;
 800e54c:	bf00      	nop
 800e54e:	e008      	b.n	800e562 <USBD_CDC_Setup+0x186>
          break;
 800e550:	bf00      	nop
      }
      break;
 800e552:	e006      	b.n	800e562 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f001 f9da 	bl	800f910 <USBD_CtlError>
      ret = USBD_FAIL;
 800e55c:	2303      	movs	r3, #3
 800e55e:	75fb      	strb	r3, [r7, #23]
      break;
 800e560:	bf00      	nop
  }

  return (uint8_t)ret;
 800e562:	7dfb      	ldrb	r3, [r7, #23]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e57e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e04f      	b.n	800e62e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e594:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e596:	78fa      	ldrb	r2, [r7, #3]
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4613      	mov	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	440b      	add	r3, r1
 800e5a4:	3318      	adds	r3, #24
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d029      	beq.n	800e600 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e5ac:	78fa      	ldrb	r2, [r7, #3]
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	440b      	add	r3, r1
 800e5ba:	3318      	adds	r3, #24
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	78f9      	ldrb	r1, [r7, #3]
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	440b      	add	r3, r1
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	4403      	add	r3, r0
 800e5cc:	333c      	adds	r3, #60	; 0x3c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e5d4:	fb01 f303 	mul.w	r3, r1, r3
 800e5d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d110      	bne.n	800e600 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e5de:	78fa      	ldrb	r2, [r7, #3]
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	440b      	add	r3, r1
 800e5ec:	3318      	adds	r3, #24
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e5f2:	78f9      	ldrb	r1, [r7, #3]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 ff51 	bl	80104a0 <USBD_LL_Transmit>
 800e5fe:	e015      	b.n	800e62c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2200      	movs	r2, #0
 800e604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00b      	beq.n	800e62c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e622:	68ba      	ldr	r2, [r7, #8]
 800e624:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e628:	78fa      	ldrb	r2, [r7, #3]
 800e62a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b084      	sub	sp, #16
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e648:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e654:	2303      	movs	r3, #3
 800e656:	e015      	b.n	800e684 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e658:	78fb      	ldrb	r3, [r7, #3]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f001 ff8f 	bl	8010580 <USBD_LL_GetRxDataSize>
 800e662:	4602      	mov	r2, r0
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e67e:	4611      	mov	r1, r2
 800e680:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e69a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d101      	bne.n	800e6a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e01b      	b.n	800e6de <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d015      	beq.n	800e6dc <USBD_CDC_EP0_RxReady+0x50>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e6b6:	2bff      	cmp	r3, #255	; 0xff
 800e6b8:	d010      	beq.n	800e6dc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e6c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e6d0:	b292      	uxth	r2, r2
 800e6d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	22ff      	movs	r2, #255	; 0xff
 800e6d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2243      	movs	r2, #67	; 0x43
 800e6f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e6f6:	4b03      	ldr	r3, [pc, #12]	; (800e704 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr
 800e704:	200000b8 	.word	0x200000b8

0800e708 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2243      	movs	r2, #67	; 0x43
 800e714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e716:	4b03      	ldr	r3, [pc, #12]	; (800e724 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000074 	.word	0x20000074

0800e728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2243      	movs	r2, #67	; 0x43
 800e734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e736:	4b03      	ldr	r3, [pc, #12]	; (800e744 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	200000fc 	.word	0x200000fc

0800e748 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	220a      	movs	r2, #10
 800e754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e756:	4b03      	ldr	r3, [pc, #12]	; (800e764 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	20000030 	.word	0x20000030

0800e768 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e778:	2303      	movs	r3, #3
 800e77a:	e004      	b.n	800e786 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e792:	b480      	push	{r7}
 800e794:	b087      	sub	sp, #28
 800e796:	af00      	add	r7, sp, #0
 800e798:	60f8      	str	r0, [r7, #12]
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	e008      	b.n	800e7c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b085      	sub	sp, #20
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e004      	b.n	800e7f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e80e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e810:	2301      	movs	r3, #1
 800e812:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e81e:	2303      	movs	r3, #3
 800e820:	e01a      	b.n	800e858 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d114      	bne.n	800e856 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	2201      	movs	r2, #1
 800e830:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e84a:	2181      	movs	r1, #129	; 0x81
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 fe27 	bl	80104a0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e856:	7bfb      	ldrb	r3, [r7, #15]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e86e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e016      	b.n	800e8ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7c1b      	ldrb	r3, [r3, #16]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d109      	bne.n	800e89a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e88c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e890:	2101      	movs	r1, #1
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f001 fe3c 	bl	8010510 <USBD_LL_PrepareReceive>
 800e898:	e007      	b.n	800e8aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8a0:	2340      	movs	r3, #64	; 0x40
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fe33 	bl	8010510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d101      	bne.n	800e8cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	e01f      	b.n	800e90c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d003      	beq.n	800e8f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	79fa      	ldrb	r2, [r7, #7]
 800e8fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f001 fbf5 	bl	80100f0 <USBD_LL_Init>
 800e906:	4603      	mov	r3, r0
 800e908:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3718      	adds	r7, #24
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e91e:	2300      	movs	r3, #0
 800e920:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d101      	bne.n	800e92c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e928:	2303      	movs	r3, #3
 800e92a:	e016      	b.n	800e95a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00b      	beq.n	800e958 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	f107 020e 	add.w	r2, r7, #14
 800e94c:	4610      	mov	r0, r2
 800e94e:	4798      	blx	r3
 800e950:	4602      	mov	r2, r0
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b082      	sub	sp, #8
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f001 fc22 	bl	80101b4 <USBD_LL_Start>
 800e970:	4603      	mov	r3, r0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e97a:	b480      	push	{r7}
 800e97c:	b083      	sub	sp, #12
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	460b      	mov	r3, r1
 800e99a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e99c:	2303      	movs	r3, #3
 800e99e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	78fa      	ldrb	r2, [r7, #3]
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	4798      	blx	r3
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d007      	beq.n	800e9ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	78fa      	ldrb	r2, [r7, #3]
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	4798      	blx	r3
  }

  return USBD_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 ff46 	bl	800f89c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ea1e:	461a      	mov	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea2c:	f003 031f 	and.w	r3, r3, #31
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d01a      	beq.n	800ea6a <USBD_LL_SetupStage+0x72>
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d822      	bhi.n	800ea7e <USBD_LL_SetupStage+0x86>
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <USBD_LL_SetupStage+0x4a>
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d00a      	beq.n	800ea56 <USBD_LL_SetupStage+0x5e>
 800ea40:	e01d      	b.n	800ea7e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f9ee 	bl	800ee2c <USBD_StdDevReq>
 800ea50:	4603      	mov	r3, r0
 800ea52:	73fb      	strb	r3, [r7, #15]
      break;
 800ea54:	e020      	b.n	800ea98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fa52 	bl	800ef08 <USBD_StdItfReq>
 800ea64:	4603      	mov	r3, r0
 800ea66:	73fb      	strb	r3, [r7, #15]
      break;
 800ea68:	e016      	b.n	800ea98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea70:	4619      	mov	r1, r3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa91 	bl	800ef9a <USBD_StdEPReq>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea7c:	e00c      	b.n	800ea98 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f001 fc37 	bl	8010300 <USBD_LL_StallEP>
 800ea92:	4603      	mov	r3, r0
 800ea94:	73fb      	strb	r3, [r7, #15]
      break;
 800ea96:	bf00      	nop
  }

  return ret;
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b086      	sub	sp, #24
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	60f8      	str	r0, [r7, #12]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	607a      	str	r2, [r7, #4]
 800eaae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eab0:	7afb      	ldrb	r3, [r7, #11]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d138      	bne.n	800eb28 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eabc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d14a      	bne.n	800eb5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	689a      	ldr	r2, [r3, #8]
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d913      	bls.n	800eafc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	689a      	ldr	r2, [r3, #8]
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	1ad2      	subs	r2, r2, r3
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	68da      	ldr	r2, [r3, #12]
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	4293      	cmp	r3, r2
 800eaec:	bf28      	it	cs
 800eaee:	4613      	movcs	r3, r2
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f000 ffc5 	bl	800fa84 <USBD_CtlContinueRx>
 800eafa:	e030      	b.n	800eb5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	2b03      	cmp	r3, #3
 800eb06:	d10b      	bne.n	800eb20 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d005      	beq.n	800eb20 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f000 ffc0 	bl	800faa6 <USBD_CtlSendStatus>
 800eb26:	e01a      	b.n	800eb5e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d114      	bne.n	800eb5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00e      	beq.n	800eb5e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	7afa      	ldrb	r2, [r7, #11]
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	4798      	blx	r3
 800eb50:	4603      	mov	r3, r0
 800eb52:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eb54:	7dfb      	ldrb	r3, [r7, #23]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
 800eb5c:	e000      	b.n	800eb60 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	460b      	mov	r3, r1
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb76:	7afb      	ldrb	r3, [r7, #11]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d16b      	bne.n	800ec54 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3314      	adds	r3, #20
 800eb80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d156      	bne.n	800ec3a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	689a      	ldr	r2, [r3, #8]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d914      	bls.n	800ebc2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	689a      	ldr	r2, [r3, #8]
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	1ad2      	subs	r2, r2, r3
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	6879      	ldr	r1, [r7, #4]
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f000 ff3a 	bl	800fa28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2100      	movs	r1, #0
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f001 fca8 	bl	8010510 <USBD_LL_PrepareReceive>
 800ebc0:	e03b      	b.n	800ec3a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d11c      	bne.n	800ec08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d316      	bcc.n	800ec08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d20f      	bcs.n	800ec08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2100      	movs	r1, #0
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 ff1b 	bl	800fa28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f001 fc85 	bl	8010510 <USBD_LL_PrepareReceive>
 800ec06:	e018      	b.n	800ec3a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b03      	cmp	r3, #3
 800ec12:	d10b      	bne.n	800ec2c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d005      	beq.n	800ec2c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec2c:	2180      	movs	r1, #128	; 0x80
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f001 fb66 	bl	8010300 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 ff49 	bl	800facc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d122      	bne.n	800ec8a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f7ff fe98 	bl	800e97a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ec52:	e01a      	b.n	800ec8a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2b03      	cmp	r3, #3
 800ec5e:	d114      	bne.n	800ec8a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00e      	beq.n	800ec8a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	7afa      	ldrb	r2, [r7, #11]
 800ec76:	4611      	mov	r1, r2
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	4798      	blx	r3
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	e000      	b.n	800ec8c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e02f      	b.n	800ed28 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00f      	beq.n	800ecf2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d009      	beq.n	800ecf2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	6852      	ldr	r2, [r2, #4]
 800ecea:	b2d2      	uxtb	r2, r2
 800ecec:	4611      	mov	r1, r2
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ecf2:	2340      	movs	r3, #64	; 0x40
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f001 fa8d 	bl	8010218 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2240      	movs	r2, #64	; 0x40
 800ed0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	2200      	movs	r2, #0
 800ed12:	2180      	movs	r1, #128	; 0x80
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 fa7f 	bl	8010218 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2240      	movs	r2, #64	; 0x40
 800ed24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	78fa      	ldrb	r2, [r7, #3]
 800ed40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2204      	movs	r2, #4
 800ed6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d106      	bne.n	800ed9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800edbe:	2303      	movs	r3, #3
 800edc0:	e012      	b.n	800ede8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b03      	cmp	r3, #3
 800edcc:	d10b      	bne.n	800ede6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd4:	69db      	ldr	r3, [r3, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ede0:	69db      	ldr	r3, [r3, #28]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	3301      	adds	r3, #1
 800ee06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee0e:	8a3b      	ldrh	r3, [r7, #16]
 800ee10:	021b      	lsls	r3, r3, #8
 800ee12:	b21a      	sxth	r2, r3
 800ee14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	b21b      	sxth	r3, r3
 800ee1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	371c      	adds	r7, #28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee42:	2b40      	cmp	r3, #64	; 0x40
 800ee44:	d005      	beq.n	800ee52 <USBD_StdDevReq+0x26>
 800ee46:	2b40      	cmp	r3, #64	; 0x40
 800ee48:	d853      	bhi.n	800eef2 <USBD_StdDevReq+0xc6>
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00b      	beq.n	800ee66 <USBD_StdDevReq+0x3a>
 800ee4e:	2b20      	cmp	r3, #32
 800ee50:	d14f      	bne.n	800eef2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	4798      	blx	r3
 800ee60:	4603      	mov	r3, r0
 800ee62:	73fb      	strb	r3, [r7, #15]
      break;
 800ee64:	e04a      	b.n	800eefc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	785b      	ldrb	r3, [r3, #1]
 800ee6a:	2b09      	cmp	r3, #9
 800ee6c:	d83b      	bhi.n	800eee6 <USBD_StdDevReq+0xba>
 800ee6e:	a201      	add	r2, pc, #4	; (adr r2, 800ee74 <USBD_StdDevReq+0x48>)
 800ee70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee74:	0800eec9 	.word	0x0800eec9
 800ee78:	0800eedd 	.word	0x0800eedd
 800ee7c:	0800eee7 	.word	0x0800eee7
 800ee80:	0800eed3 	.word	0x0800eed3
 800ee84:	0800eee7 	.word	0x0800eee7
 800ee88:	0800eea7 	.word	0x0800eea7
 800ee8c:	0800ee9d 	.word	0x0800ee9d
 800ee90:	0800eee7 	.word	0x0800eee7
 800ee94:	0800eebf 	.word	0x0800eebf
 800ee98:	0800eeb1 	.word	0x0800eeb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ee9c:	6839      	ldr	r1, [r7, #0]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f9de 	bl	800f260 <USBD_GetDescriptor>
          break;
 800eea4:	e024      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 fb6d 	bl	800f588 <USBD_SetAddress>
          break;
 800eeae:	e01f      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fbac 	bl	800f610 <USBD_SetConfig>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	73fb      	strb	r3, [r7, #15]
          break;
 800eebc:	e018      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eebe:	6839      	ldr	r1, [r7, #0]
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fc4b 	bl	800f75c <USBD_GetConfig>
          break;
 800eec6:	e013      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fc7c 	bl	800f7c8 <USBD_GetStatus>
          break;
 800eed0:	e00e      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eed2:	6839      	ldr	r1, [r7, #0]
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fcab 	bl	800f830 <USBD_SetFeature>
          break;
 800eeda:	e009      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fcba 	bl	800f858 <USBD_ClrFeature>
          break;
 800eee4:	e004      	b.n	800eef0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fd11 	bl	800f910 <USBD_CtlError>
          break;
 800eeee:	bf00      	nop
      }
      break;
 800eef0:	e004      	b.n	800eefc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800eef2:	6839      	ldr	r1, [r7, #0]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fd0b 	bl	800f910 <USBD_CtlError>
      break;
 800eefa:	bf00      	nop
  }

  return ret;
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop

0800ef08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef1e:	2b40      	cmp	r3, #64	; 0x40
 800ef20:	d005      	beq.n	800ef2e <USBD_StdItfReq+0x26>
 800ef22:	2b40      	cmp	r3, #64	; 0x40
 800ef24:	d82f      	bhi.n	800ef86 <USBD_StdItfReq+0x7e>
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <USBD_StdItfReq+0x26>
 800ef2a:	2b20      	cmp	r3, #32
 800ef2c:	d12b      	bne.n	800ef86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d81d      	bhi.n	800ef78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	889b      	ldrh	r3, [r3, #4]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d813      	bhi.n	800ef6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	6839      	ldr	r1, [r7, #0]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	4798      	blx	r3
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	88db      	ldrh	r3, [r3, #6]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d110      	bne.n	800ef82 <USBD_StdItfReq+0x7a>
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10d      	bne.n	800ef82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fd9d 	bl	800faa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ef6c:	e009      	b.n	800ef82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fccd 	bl	800f910 <USBD_CtlError>
          break;
 800ef76:	e004      	b.n	800ef82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ef78:	6839      	ldr	r1, [r7, #0]
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fcc8 	bl	800f910 <USBD_CtlError>
          break;
 800ef80:	e000      	b.n	800ef84 <USBD_StdItfReq+0x7c>
          break;
 800ef82:	bf00      	nop
      }
      break;
 800ef84:	e004      	b.n	800ef90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fcc1 	bl	800f910 <USBD_CtlError>
      break;
 800ef8e:	bf00      	nop
  }

  return ret;
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b084      	sub	sp, #16
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
 800efa2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	889b      	ldrh	r3, [r3, #4]
 800efac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efb6:	2b40      	cmp	r3, #64	; 0x40
 800efb8:	d007      	beq.n	800efca <USBD_StdEPReq+0x30>
 800efba:	2b40      	cmp	r3, #64	; 0x40
 800efbc:	f200 8145 	bhi.w	800f24a <USBD_StdEPReq+0x2b0>
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00c      	beq.n	800efde <USBD_StdEPReq+0x44>
 800efc4:	2b20      	cmp	r3, #32
 800efc6:	f040 8140 	bne.w	800f24a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	6839      	ldr	r1, [r7, #0]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	4798      	blx	r3
 800efd8:	4603      	mov	r3, r0
 800efda:	73fb      	strb	r3, [r7, #15]
      break;
 800efdc:	e13a      	b.n	800f254 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	785b      	ldrb	r3, [r3, #1]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d007      	beq.n	800eff6 <USBD_StdEPReq+0x5c>
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	f300 8129 	bgt.w	800f23e <USBD_StdEPReq+0x2a4>
 800efec:	2b00      	cmp	r3, #0
 800efee:	d07f      	beq.n	800f0f0 <USBD_StdEPReq+0x156>
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d03c      	beq.n	800f06e <USBD_StdEPReq+0xd4>
 800eff4:	e123      	b.n	800f23e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b02      	cmp	r3, #2
 800f000:	d002      	beq.n	800f008 <USBD_StdEPReq+0x6e>
 800f002:	2b03      	cmp	r3, #3
 800f004:	d016      	beq.n	800f034 <USBD_StdEPReq+0x9a>
 800f006:	e02c      	b.n	800f062 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f008:	7bbb      	ldrb	r3, [r7, #14]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00d      	beq.n	800f02a <USBD_StdEPReq+0x90>
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
 800f010:	2b80      	cmp	r3, #128	; 0x80
 800f012:	d00a      	beq.n	800f02a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f001 f971 	bl	8010300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f01e:	2180      	movs	r1, #128	; 0x80
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f001 f96d 	bl	8010300 <USBD_LL_StallEP>
 800f026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f028:	e020      	b.n	800f06c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fc6f 	bl	800f910 <USBD_CtlError>
              break;
 800f032:	e01b      	b.n	800f06c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	885b      	ldrh	r3, [r3, #2]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10e      	bne.n	800f05a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00b      	beq.n	800f05a <USBD_StdEPReq+0xc0>
 800f042:	7bbb      	ldrb	r3, [r7, #14]
 800f044:	2b80      	cmp	r3, #128	; 0x80
 800f046:	d008      	beq.n	800f05a <USBD_StdEPReq+0xc0>
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	88db      	ldrh	r3, [r3, #6]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d104      	bne.n	800f05a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f050:	7bbb      	ldrb	r3, [r7, #14]
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f001 f953 	bl	8010300 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 fd23 	bl	800faa6 <USBD_CtlSendStatus>

              break;
 800f060:	e004      	b.n	800f06c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fc53 	bl	800f910 <USBD_CtlError>
              break;
 800f06a:	bf00      	nop
          }
          break;
 800f06c:	e0ec      	b.n	800f248 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b02      	cmp	r3, #2
 800f078:	d002      	beq.n	800f080 <USBD_StdEPReq+0xe6>
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d016      	beq.n	800f0ac <USBD_StdEPReq+0x112>
 800f07e:	e030      	b.n	800f0e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f080:	7bbb      	ldrb	r3, [r7, #14]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00d      	beq.n	800f0a2 <USBD_StdEPReq+0x108>
 800f086:	7bbb      	ldrb	r3, [r7, #14]
 800f088:	2b80      	cmp	r3, #128	; 0x80
 800f08a:	d00a      	beq.n	800f0a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f08c:	7bbb      	ldrb	r3, [r7, #14]
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f001 f935 	bl	8010300 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f096:	2180      	movs	r1, #128	; 0x80
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f001 f931 	bl	8010300 <USBD_LL_StallEP>
 800f09e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0a0:	e025      	b.n	800f0ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc33 	bl	800f910 <USBD_CtlError>
              break;
 800f0aa:	e020      	b.n	800f0ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	885b      	ldrh	r3, [r3, #2]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d11b      	bne.n	800f0ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f0b4:	7bbb      	ldrb	r3, [r7, #14]
 800f0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d004      	beq.n	800f0c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f0be:	7bbb      	ldrb	r3, [r7, #14]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f001 f952 	bl	801036c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fcec 	bl	800faa6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	4798      	blx	r3
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f0e0:	e004      	b.n	800f0ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fc13 	bl	800f910 <USBD_CtlError>
              break;
 800f0ea:	e000      	b.n	800f0ee <USBD_StdEPReq+0x154>
              break;
 800f0ec:	bf00      	nop
          }
          break;
 800f0ee:	e0ab      	b.n	800f248 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d002      	beq.n	800f102 <USBD_StdEPReq+0x168>
 800f0fc:	2b03      	cmp	r3, #3
 800f0fe:	d032      	beq.n	800f166 <USBD_StdEPReq+0x1cc>
 800f100:	e097      	b.n	800f232 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f102:	7bbb      	ldrb	r3, [r7, #14]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d007      	beq.n	800f118 <USBD_StdEPReq+0x17e>
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	2b80      	cmp	r3, #128	; 0x80
 800f10c:	d004      	beq.n	800f118 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fbfd 	bl	800f910 <USBD_CtlError>
                break;
 800f116:	e091      	b.n	800f23c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	da0b      	bge.n	800f138 <USBD_StdEPReq+0x19e>
 800f120:	7bbb      	ldrb	r3, [r7, #14]
 800f122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	3310      	adds	r3, #16
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	4413      	add	r3, r2
 800f134:	3304      	adds	r3, #4
 800f136:	e00b      	b.n	800f150 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f138:	7bbb      	ldrb	r3, [r7, #14]
 800f13a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f13e:	4613      	mov	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4413      	add	r3, r2
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	4413      	add	r3, r2
 800f14e:	3304      	adds	r3, #4
 800f150:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2200      	movs	r2, #0
 800f156:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2202      	movs	r2, #2
 800f15c:	4619      	mov	r1, r3
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fc47 	bl	800f9f2 <USBD_CtlSendData>
              break;
 800f164:	e06a      	b.n	800f23c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	da11      	bge.n	800f192 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f16e:	7bbb      	ldrb	r3, [r7, #14]
 800f170:	f003 020f 	and.w	r2, r3, #15
 800f174:	6879      	ldr	r1, [r7, #4]
 800f176:	4613      	mov	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	440b      	add	r3, r1
 800f180:	3324      	adds	r3, #36	; 0x24
 800f182:	881b      	ldrh	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d117      	bne.n	800f1b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fbc0 	bl	800f910 <USBD_CtlError>
                  break;
 800f190:	e054      	b.n	800f23c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f192:	7bbb      	ldrb	r3, [r7, #14]
 800f194:	f003 020f 	and.w	r2, r3, #15
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	4613      	mov	r3, r2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	4413      	add	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	440b      	add	r3, r1
 800f1a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d104      	bne.n	800f1b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f1ae:	6839      	ldr	r1, [r7, #0]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fbad 	bl	800f910 <USBD_CtlError>
                  break;
 800f1b6:	e041      	b.n	800f23c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	da0b      	bge.n	800f1d8 <USBD_StdEPReq+0x23e>
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	3310      	adds	r3, #16
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	e00b      	b.n	800f1f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f1d8:	7bbb      	ldrb	r3, [r7, #14]
 800f1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f1f2:	7bbb      	ldrb	r3, [r7, #14]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <USBD_StdEPReq+0x264>
 800f1f8:	7bbb      	ldrb	r3, [r7, #14]
 800f1fa:	2b80      	cmp	r3, #128	; 0x80
 800f1fc:	d103      	bne.n	800f206 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2200      	movs	r2, #0
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	e00e      	b.n	800f224 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f206:	7bbb      	ldrb	r3, [r7, #14]
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f001 f8e4 	bl	80103d8 <USBD_LL_IsStallEP>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d003      	beq.n	800f21e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2201      	movs	r2, #1
 800f21a:	601a      	str	r2, [r3, #0]
 800f21c:	e002      	b.n	800f224 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2200      	movs	r2, #0
 800f222:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2202      	movs	r2, #2
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fbe1 	bl	800f9f2 <USBD_CtlSendData>
              break;
 800f230:	e004      	b.n	800f23c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fb6b 	bl	800f910 <USBD_CtlError>
              break;
 800f23a:	bf00      	nop
          }
          break;
 800f23c:	e004      	b.n	800f248 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fb65 	bl	800f910 <USBD_CtlError>
          break;
 800f246:	bf00      	nop
      }
      break;
 800f248:	e004      	b.n	800f254 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 fb5f 	bl	800f910 <USBD_CtlError>
      break;
 800f252:	bf00      	nop
  }

  return ret;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f272:	2300      	movs	r3, #0
 800f274:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	885b      	ldrh	r3, [r3, #2]
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	3b01      	subs	r3, #1
 800f280:	2b0e      	cmp	r3, #14
 800f282:	f200 8152 	bhi.w	800f52a <USBD_GetDescriptor+0x2ca>
 800f286:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <USBD_GetDescriptor+0x2c>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f2fd 	.word	0x0800f2fd
 800f290:	0800f315 	.word	0x0800f315
 800f294:	0800f355 	.word	0x0800f355
 800f298:	0800f52b 	.word	0x0800f52b
 800f29c:	0800f52b 	.word	0x0800f52b
 800f2a0:	0800f4cb 	.word	0x0800f4cb
 800f2a4:	0800f4f7 	.word	0x0800f4f7
 800f2a8:	0800f52b 	.word	0x0800f52b
 800f2ac:	0800f52b 	.word	0x0800f52b
 800f2b0:	0800f52b 	.word	0x0800f52b
 800f2b4:	0800f52b 	.word	0x0800f52b
 800f2b8:	0800f52b 	.word	0x0800f52b
 800f2bc:	0800f52b 	.word	0x0800f52b
 800f2c0:	0800f52b 	.word	0x0800f52b
 800f2c4:	0800f2c9 	.word	0x0800f2c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00b      	beq.n	800f2ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2da:	69db      	ldr	r3, [r3, #28]
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	7c12      	ldrb	r2, [r2, #16]
 800f2e0:	f107 0108 	add.w	r1, r7, #8
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	4798      	blx	r3
 800f2e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2ea:	e126      	b.n	800f53a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fb0e 	bl	800f910 <USBD_CtlError>
        err++;
 800f2f4:	7afb      	ldrb	r3, [r7, #11]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	72fb      	strb	r3, [r7, #11]
      break;
 800f2fa:	e11e      	b.n	800f53a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	7c12      	ldrb	r2, [r2, #16]
 800f308:	f107 0108 	add.w	r1, r7, #8
 800f30c:	4610      	mov	r0, r2
 800f30e:	4798      	blx	r3
 800f310:	60f8      	str	r0, [r7, #12]
      break;
 800f312:	e112      	b.n	800f53a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	7c1b      	ldrb	r3, [r3, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10d      	bne.n	800f338 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f324:	f107 0208 	add.w	r2, r7, #8
 800f328:	4610      	mov	r0, r2
 800f32a:	4798      	blx	r3
 800f32c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	3301      	adds	r3, #1
 800f332:	2202      	movs	r2, #2
 800f334:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f336:	e100      	b.n	800f53a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f340:	f107 0208 	add.w	r2, r7, #8
 800f344:	4610      	mov	r0, r2
 800f346:	4798      	blx	r3
 800f348:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3301      	adds	r3, #1
 800f34e:	2202      	movs	r2, #2
 800f350:	701a      	strb	r2, [r3, #0]
      break;
 800f352:	e0f2      	b.n	800f53a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	885b      	ldrh	r3, [r3, #2]
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b05      	cmp	r3, #5
 800f35c:	f200 80ac 	bhi.w	800f4b8 <USBD_GetDescriptor+0x258>
 800f360:	a201      	add	r2, pc, #4	; (adr r2, 800f368 <USBD_GetDescriptor+0x108>)
 800f362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f366:	bf00      	nop
 800f368:	0800f381 	.word	0x0800f381
 800f36c:	0800f3b5 	.word	0x0800f3b5
 800f370:	0800f3e9 	.word	0x0800f3e9
 800f374:	0800f41d 	.word	0x0800f41d
 800f378:	0800f451 	.word	0x0800f451
 800f37c:	0800f485 	.word	0x0800f485
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00b      	beq.n	800f3a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	7c12      	ldrb	r2, [r2, #16]
 800f398:	f107 0108 	add.w	r1, r7, #8
 800f39c:	4610      	mov	r0, r2
 800f39e:	4798      	blx	r3
 800f3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3a2:	e091      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fab2 	bl	800f910 <USBD_CtlError>
            err++;
 800f3ac:	7afb      	ldrb	r3, [r7, #11]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f3b2:	e089      	b.n	800f4c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00b      	beq.n	800f3d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	7c12      	ldrb	r2, [r2, #16]
 800f3cc:	f107 0108 	add.w	r1, r7, #8
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
 800f3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3d6:	e077      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f3d8:	6839      	ldr	r1, [r7, #0]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fa98 	bl	800f910 <USBD_CtlError>
            err++;
 800f3e0:	7afb      	ldrb	r3, [r7, #11]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f3e6:	e06f      	b.n	800f4c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00b      	beq.n	800f40c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	7c12      	ldrb	r2, [r2, #16]
 800f400:	f107 0108 	add.w	r1, r7, #8
 800f404:	4610      	mov	r0, r2
 800f406:	4798      	blx	r3
 800f408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f40a:	e05d      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f40c:	6839      	ldr	r1, [r7, #0]
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fa7e 	bl	800f910 <USBD_CtlError>
            err++;
 800f414:	7afb      	ldrb	r3, [r7, #11]
 800f416:	3301      	adds	r3, #1
 800f418:	72fb      	strb	r3, [r7, #11]
          break;
 800f41a:	e055      	b.n	800f4c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00b      	beq.n	800f440 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	7c12      	ldrb	r2, [r2, #16]
 800f434:	f107 0108 	add.w	r1, r7, #8
 800f438:	4610      	mov	r0, r2
 800f43a:	4798      	blx	r3
 800f43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f43e:	e043      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 fa64 	bl	800f910 <USBD_CtlError>
            err++;
 800f448:	7afb      	ldrb	r3, [r7, #11]
 800f44a:	3301      	adds	r3, #1
 800f44c:	72fb      	strb	r3, [r7, #11]
          break;
 800f44e:	e03b      	b.n	800f4c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f456:	695b      	ldr	r3, [r3, #20]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00b      	beq.n	800f474 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f462:	695b      	ldr	r3, [r3, #20]
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	7c12      	ldrb	r2, [r2, #16]
 800f468:	f107 0108 	add.w	r1, r7, #8
 800f46c:	4610      	mov	r0, r2
 800f46e:	4798      	blx	r3
 800f470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f472:	e029      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f474:	6839      	ldr	r1, [r7, #0]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 fa4a 	bl	800f910 <USBD_CtlError>
            err++;
 800f47c:	7afb      	ldrb	r3, [r7, #11]
 800f47e:	3301      	adds	r3, #1
 800f480:	72fb      	strb	r3, [r7, #11]
          break;
 800f482:	e021      	b.n	800f4c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00b      	beq.n	800f4a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	7c12      	ldrb	r2, [r2, #16]
 800f49c:	f107 0108 	add.w	r1, r7, #8
 800f4a0:	4610      	mov	r0, r2
 800f4a2:	4798      	blx	r3
 800f4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4a6:	e00f      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 fa30 	bl	800f910 <USBD_CtlError>
            err++;
 800f4b0:	7afb      	ldrb	r3, [r7, #11]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4b6:	e007      	b.n	800f4c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f4b8:	6839      	ldr	r1, [r7, #0]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fa28 	bl	800f910 <USBD_CtlError>
          err++;
 800f4c0:	7afb      	ldrb	r3, [r7, #11]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f4c6:	bf00      	nop
      }
      break;
 800f4c8:	e037      	b.n	800f53a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	7c1b      	ldrb	r3, [r3, #16]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d109      	bne.n	800f4e6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4da:	f107 0208 	add.w	r2, r7, #8
 800f4de:	4610      	mov	r0, r2
 800f4e0:	4798      	blx	r3
 800f4e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f4e4:	e029      	b.n	800f53a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f4e6:	6839      	ldr	r1, [r7, #0]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fa11 	bl	800f910 <USBD_CtlError>
        err++;
 800f4ee:	7afb      	ldrb	r3, [r7, #11]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	72fb      	strb	r3, [r7, #11]
      break;
 800f4f4:	e021      	b.n	800f53a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7c1b      	ldrb	r3, [r3, #16]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10d      	bne.n	800f51a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f506:	f107 0208 	add.w	r2, r7, #8
 800f50a:	4610      	mov	r0, r2
 800f50c:	4798      	blx	r3
 800f50e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	3301      	adds	r3, #1
 800f514:	2207      	movs	r2, #7
 800f516:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f518:	e00f      	b.n	800f53a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f9f7 	bl	800f910 <USBD_CtlError>
        err++;
 800f522:	7afb      	ldrb	r3, [r7, #11]
 800f524:	3301      	adds	r3, #1
 800f526:	72fb      	strb	r3, [r7, #11]
      break;
 800f528:	e007      	b.n	800f53a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f9ef 	bl	800f910 <USBD_CtlError>
      err++;
 800f532:	7afb      	ldrb	r3, [r7, #11]
 800f534:	3301      	adds	r3, #1
 800f536:	72fb      	strb	r3, [r7, #11]
      break;
 800f538:	bf00      	nop
  }

  if (err != 0U)
 800f53a:	7afb      	ldrb	r3, [r7, #11]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d11e      	bne.n	800f57e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	88db      	ldrh	r3, [r3, #6]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d016      	beq.n	800f576 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f548:	893b      	ldrh	r3, [r7, #8]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00e      	beq.n	800f56c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	88da      	ldrh	r2, [r3, #6]
 800f552:	893b      	ldrh	r3, [r7, #8]
 800f554:	4293      	cmp	r3, r2
 800f556:	bf28      	it	cs
 800f558:	4613      	movcs	r3, r2
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f55e:	893b      	ldrh	r3, [r7, #8]
 800f560:	461a      	mov	r2, r3
 800f562:	68f9      	ldr	r1, [r7, #12]
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 fa44 	bl	800f9f2 <USBD_CtlSendData>
 800f56a:	e009      	b.n	800f580 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f9ce 	bl	800f910 <USBD_CtlError>
 800f574:	e004      	b.n	800f580 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fa95 	bl	800faa6 <USBD_CtlSendStatus>
 800f57c:	e000      	b.n	800f580 <USBD_GetDescriptor+0x320>
    return;
 800f57e:	bf00      	nop
  }
}
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop

0800f588 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	889b      	ldrh	r3, [r3, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d131      	bne.n	800f5fe <USBD_SetAddress+0x76>
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	88db      	ldrh	r3, [r3, #6]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d12d      	bne.n	800f5fe <USBD_SetAddress+0x76>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	885b      	ldrh	r3, [r3, #2]
 800f5a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f5a8:	d829      	bhi.n	800f5fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	885b      	ldrh	r3, [r3, #2]
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d104      	bne.n	800f5cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 f9a3 	bl	800f910 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ca:	e01d      	b.n	800f608 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	7bfa      	ldrb	r2, [r7, #15]
 800f5d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 ff2b 	bl	8010434 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 fa61 	bl	800faa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d004      	beq.n	800f5f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2202      	movs	r2, #2
 800f5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f2:	e009      	b.n	800f608 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5fc:	e004      	b.n	800f608 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f5fe:	6839      	ldr	r1, [r7, #0]
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 f985 	bl	800f910 <USBD_CtlError>
  }
}
 800f606:	bf00      	nop
 800f608:	bf00      	nop
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	885b      	ldrh	r3, [r3, #2]
 800f622:	b2da      	uxtb	r2, r3
 800f624:	4b4c      	ldr	r3, [pc, #304]	; (800f758 <USBD_SetConfig+0x148>)
 800f626:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f628:	4b4b      	ldr	r3, [pc, #300]	; (800f758 <USBD_SetConfig+0x148>)
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d905      	bls.n	800f63c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 f96c 	bl	800f910 <USBD_CtlError>
    return USBD_FAIL;
 800f638:	2303      	movs	r3, #3
 800f63a:	e088      	b.n	800f74e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b02      	cmp	r3, #2
 800f646:	d002      	beq.n	800f64e <USBD_SetConfig+0x3e>
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d025      	beq.n	800f698 <USBD_SetConfig+0x88>
 800f64c:	e071      	b.n	800f732 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f64e:	4b42      	ldr	r3, [pc, #264]	; (800f758 <USBD_SetConfig+0x148>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d01c      	beq.n	800f690 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f656:	4b40      	ldr	r3, [pc, #256]	; (800f758 <USBD_SetConfig+0x148>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	461a      	mov	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f660:	4b3d      	ldr	r3, [pc, #244]	; (800f758 <USBD_SetConfig+0x148>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff f992 	bl	800e990 <USBD_SetClassConfig>
 800f66c:	4603      	mov	r3, r0
 800f66e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d004      	beq.n	800f680 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f949 	bl	800f910 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f67e:	e065      	b.n	800f74c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fa10 	bl	800faa6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2203      	movs	r2, #3
 800f68a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f68e:	e05d      	b.n	800f74c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fa08 	bl	800faa6 <USBD_CtlSendStatus>
      break;
 800f696:	e059      	b.n	800f74c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f698:	4b2f      	ldr	r3, [pc, #188]	; (800f758 <USBD_SetConfig+0x148>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d112      	bne.n	800f6c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f6a8:	4b2b      	ldr	r3, [pc, #172]	; (800f758 <USBD_SetConfig+0x148>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f6b2:	4b29      	ldr	r3, [pc, #164]	; (800f758 <USBD_SetConfig+0x148>)
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff f985 	bl	800e9c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f9f1 	bl	800faa6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6c4:	e042      	b.n	800f74c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f6c6:	4b24      	ldr	r3, [pc, #144]	; (800f758 <USBD_SetConfig+0x148>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d02a      	beq.n	800f72a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	4619      	mov	r1, r3
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff f973 	bl	800e9c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f6e2:	4b1d      	ldr	r3, [pc, #116]	; (800f758 <USBD_SetConfig+0x148>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6ec:	4b1a      	ldr	r3, [pc, #104]	; (800f758 <USBD_SetConfig+0x148>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7ff f94c 	bl	800e990 <USBD_SetClassConfig>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f6fc:	7bfb      	ldrb	r3, [r7, #15]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00f      	beq.n	800f722 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f903 	bl	800f910 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	4619      	mov	r1, r3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff f958 	bl	800e9c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2202      	movs	r2, #2
 800f71c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f720:	e014      	b.n	800f74c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f9bf 	bl	800faa6 <USBD_CtlSendStatus>
      break;
 800f728:	e010      	b.n	800f74c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f000 f9bb 	bl	800faa6 <USBD_CtlSendStatus>
      break;
 800f730:	e00c      	b.n	800f74c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f732:	6839      	ldr	r1, [r7, #0]
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 f8eb 	bl	800f910 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f73a:	4b07      	ldr	r3, [pc, #28]	; (800f758 <USBD_SetConfig+0x148>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff f941 	bl	800e9c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f746:	2303      	movs	r3, #3
 800f748:	73fb      	strb	r3, [r7, #15]
      break;
 800f74a:	bf00      	nop
  }

  return ret;
 800f74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20000644 	.word	0x20000644

0800f75c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	88db      	ldrh	r3, [r3, #6]
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d004      	beq.n	800f778 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 f8cd 	bl	800f910 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f776:	e023      	b.n	800f7c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b02      	cmp	r3, #2
 800f782:	dc02      	bgt.n	800f78a <USBD_GetConfig+0x2e>
 800f784:	2b00      	cmp	r3, #0
 800f786:	dc03      	bgt.n	800f790 <USBD_GetConfig+0x34>
 800f788:	e015      	b.n	800f7b6 <USBD_GetConfig+0x5a>
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d00b      	beq.n	800f7a6 <USBD_GetConfig+0x4a>
 800f78e:	e012      	b.n	800f7b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	3308      	adds	r3, #8
 800f79a:	2201      	movs	r2, #1
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f927 	bl	800f9f2 <USBD_CtlSendData>
        break;
 800f7a4:	e00c      	b.n	800f7c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f91f 	bl	800f9f2 <USBD_CtlSendData>
        break;
 800f7b4:	e004      	b.n	800f7c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f8a9 	bl	800f910 <USBD_CtlError>
        break;
 800f7be:	bf00      	nop
}
 800f7c0:	bf00      	nop
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	d81e      	bhi.n	800f81e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	88db      	ldrh	r3, [r3, #6]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d004      	beq.n	800f7f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f890 	bl	800f910 <USBD_CtlError>
        break;
 800f7f0:	e01a      	b.n	800f828 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d005      	beq.n	800f80e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	f043 0202 	orr.w	r2, r3, #2
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	330c      	adds	r3, #12
 800f812:	2202      	movs	r2, #2
 800f814:	4619      	mov	r1, r3
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 f8eb 	bl	800f9f2 <USBD_CtlSendData>
      break;
 800f81c:	e004      	b.n	800f828 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 f875 	bl	800f910 <USBD_CtlError>
      break;
 800f826:	bf00      	nop
  }
}
 800f828:	bf00      	nop
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	885b      	ldrh	r3, [r3, #2]
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d106      	bne.n	800f850 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 f92b 	bl	800faa6 <USBD_CtlSendStatus>
  }
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	3b01      	subs	r3, #1
 800f86c:	2b02      	cmp	r3, #2
 800f86e:	d80b      	bhi.n	800f888 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	885b      	ldrh	r3, [r3, #2]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d10c      	bne.n	800f892 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 f910 	bl	800faa6 <USBD_CtlSendStatus>
      }
      break;
 800f886:	e004      	b.n	800f892 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f888:	6839      	ldr	r1, [r7, #0]
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f840 	bl	800f910 <USBD_CtlError>
      break;
 800f890:	e000      	b.n	800f894 <USBD_ClrFeature+0x3c>
      break;
 800f892:	bf00      	nop
  }
}
 800f894:	bf00      	nop
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	781a      	ldrb	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	781a      	ldrb	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f7ff fa92 	bl	800edf0 <SWAPBYTE>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7ff fa85 	bl	800edf0 <SWAPBYTE>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff fa78 	bl	800edf0 <SWAPBYTE>
 800f900:	4603      	mov	r3, r0
 800f902:	461a      	mov	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	80da      	strh	r2, [r3, #6]
}
 800f908:	bf00      	nop
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f91a:	2180      	movs	r1, #128	; 0x80
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fcef 	bl	8010300 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f922:	2100      	movs	r1, #0
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fceb 	bl	8010300 <USBD_LL_StallEP>
}
 800f92a:	bf00      	nop
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b086      	sub	sp, #24
 800f936:	af00      	add	r7, sp, #0
 800f938:	60f8      	str	r0, [r7, #12]
 800f93a:	60b9      	str	r1, [r7, #8]
 800f93c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f93e:	2300      	movs	r3, #0
 800f940:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d036      	beq.n	800f9b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f000 f836 	bl	800f9be <USBD_GetLen>
 800f952:	4603      	mov	r3, r0
 800f954:	3301      	adds	r3, #1
 800f956:	b29b      	uxth	r3, r3
 800f958:	005b      	lsls	r3, r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	68ba      	ldr	r2, [r7, #8]
 800f964:	4413      	add	r3, r2
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	7812      	ldrb	r2, [r2, #0]
 800f96a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	3301      	adds	r3, #1
 800f970:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f972:	7dfb      	ldrb	r3, [r7, #23]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	4413      	add	r3, r2
 800f978:	2203      	movs	r2, #3
 800f97a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f97c:	7dfb      	ldrb	r3, [r7, #23]
 800f97e:	3301      	adds	r3, #1
 800f980:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f982:	e013      	b.n	800f9ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	4413      	add	r3, r2
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	7812      	ldrb	r2, [r2, #0]
 800f98e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	3301      	adds	r3, #1
 800f994:	613b      	str	r3, [r7, #16]
    idx++;
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	3301      	adds	r3, #1
 800f99a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f99c:	7dfb      	ldrb	r3, [r7, #23]
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1e7      	bne.n	800f984 <USBD_GetString+0x52>
 800f9b4:	e000      	b.n	800f9b8 <USBD_GetString+0x86>
    return;
 800f9b6:	bf00      	nop
  }
}
 800f9b8:	3718      	adds	r7, #24
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f9be:	b480      	push	{r7}
 800f9c0:	b085      	sub	sp, #20
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f9ce:	e005      	b.n	800f9dc <USBD_GetLen+0x1e>
  {
    len++;
 800f9d0:	7bfb      	ldrb	r3, [r7, #15]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d1f5      	bne.n	800f9d0 <USBD_GetLen+0x12>
  }

  return len;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	60f8      	str	r0, [r7, #12]
 800f9fa:	60b9      	str	r1, [r7, #8]
 800f9fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2202      	movs	r2, #2
 800fa02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68ba      	ldr	r2, [r7, #8]
 800fa16:	2100      	movs	r1, #0
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f000 fd41 	bl	80104a0 <USBD_LL_Transmit>

  return USBD_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	2100      	movs	r1, #0
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f000 fd30 	bl	80104a0 <USBD_LL_Transmit>

  return USBD_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	60f8      	str	r0, [r7, #12]
 800fa52:	60b9      	str	r1, [r7, #8]
 800fa54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2203      	movs	r2, #3
 800fa5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	2100      	movs	r1, #0
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f000 fd4b 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	2100      	movs	r1, #0
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f000 fd3a 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b082      	sub	sp, #8
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2204      	movs	r2, #4
 800fab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fab6:	2300      	movs	r3, #0
 800fab8:	2200      	movs	r2, #0
 800faba:	2100      	movs	r1, #0
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fcef 	bl	80104a0 <USBD_LL_Transmit>

  return USBD_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2205      	movs	r2, #5
 800fad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fadc:	2300      	movs	r3, #0
 800fade:	2200      	movs	r2, #0
 800fae0:	2100      	movs	r1, #0
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 fd14 	bl	8010510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fae8:	2300      	movs	r3, #0
}
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800faf8:	2200      	movs	r2, #0
 800fafa:	4912      	ldr	r1, [pc, #72]	; (800fb44 <MX_USB_DEVICE_Init+0x50>)
 800fafc:	4812      	ldr	r0, [pc, #72]	; (800fb48 <MX_USB_DEVICE_Init+0x54>)
 800fafe:	f7fe fed9 	bl	800e8b4 <USBD_Init>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb08:	f7f1 fd8a 	bl	8001620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb0c:	490f      	ldr	r1, [pc, #60]	; (800fb4c <MX_USB_DEVICE_Init+0x58>)
 800fb0e:	480e      	ldr	r0, [pc, #56]	; (800fb48 <MX_USB_DEVICE_Init+0x54>)
 800fb10:	f7fe ff00 	bl	800e914 <USBD_RegisterClass>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fb1a:	f7f1 fd81 	bl	8001620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fb1e:	490c      	ldr	r1, [pc, #48]	; (800fb50 <MX_USB_DEVICE_Init+0x5c>)
 800fb20:	4809      	ldr	r0, [pc, #36]	; (800fb48 <MX_USB_DEVICE_Init+0x54>)
 800fb22:	f7fe fe21 	bl	800e768 <USBD_CDC_RegisterInterface>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fb2c:	f7f1 fd78 	bl	8001620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fb30:	4805      	ldr	r0, [pc, #20]	; (800fb48 <MX_USB_DEVICE_Init+0x54>)
 800fb32:	f7fe ff16 	bl	800e962 <USBD_Start>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fb3c:	f7f1 fd70 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fb40:	bf00      	nop
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	20000154 	.word	0x20000154
 800fb48:	20000648 	.word	0x20000648
 800fb4c:	2000003c 	.word	0x2000003c
 800fb50:	20000140 	.word	0x20000140

0800fb54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4905      	ldr	r1, [pc, #20]	; (800fb70 <CDC_Init_FS+0x1c>)
 800fb5c:	4805      	ldr	r0, [pc, #20]	; (800fb74 <CDC_Init_FS+0x20>)
 800fb5e:	f7fe fe18 	bl	800e792 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fb62:	4905      	ldr	r1, [pc, #20]	; (800fb78 <CDC_Init_FS+0x24>)
 800fb64:	4803      	ldr	r0, [pc, #12]	; (800fb74 <CDC_Init_FS+0x20>)
 800fb66:	f7fe fe32 	bl	800e7ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fb6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	20000d18 	.word	0x20000d18
 800fb74:	20000648 	.word	0x20000648
 800fb78:	20000918 	.word	0x20000918

0800fb7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fb80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	6039      	str	r1, [r7, #0]
 800fb96:	71fb      	strb	r3, [r7, #7]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fb9c:	79fb      	ldrb	r3, [r7, #7]
 800fb9e:	2b23      	cmp	r3, #35	; 0x23
 800fba0:	d84a      	bhi.n	800fc38 <CDC_Control_FS+0xac>
 800fba2:	a201      	add	r2, pc, #4	; (adr r2, 800fba8 <CDC_Control_FS+0x1c>)
 800fba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba8:	0800fc39 	.word	0x0800fc39
 800fbac:	0800fc39 	.word	0x0800fc39
 800fbb0:	0800fc39 	.word	0x0800fc39
 800fbb4:	0800fc39 	.word	0x0800fc39
 800fbb8:	0800fc39 	.word	0x0800fc39
 800fbbc:	0800fc39 	.word	0x0800fc39
 800fbc0:	0800fc39 	.word	0x0800fc39
 800fbc4:	0800fc39 	.word	0x0800fc39
 800fbc8:	0800fc39 	.word	0x0800fc39
 800fbcc:	0800fc39 	.word	0x0800fc39
 800fbd0:	0800fc39 	.word	0x0800fc39
 800fbd4:	0800fc39 	.word	0x0800fc39
 800fbd8:	0800fc39 	.word	0x0800fc39
 800fbdc:	0800fc39 	.word	0x0800fc39
 800fbe0:	0800fc39 	.word	0x0800fc39
 800fbe4:	0800fc39 	.word	0x0800fc39
 800fbe8:	0800fc39 	.word	0x0800fc39
 800fbec:	0800fc39 	.word	0x0800fc39
 800fbf0:	0800fc39 	.word	0x0800fc39
 800fbf4:	0800fc39 	.word	0x0800fc39
 800fbf8:	0800fc39 	.word	0x0800fc39
 800fbfc:	0800fc39 	.word	0x0800fc39
 800fc00:	0800fc39 	.word	0x0800fc39
 800fc04:	0800fc39 	.word	0x0800fc39
 800fc08:	0800fc39 	.word	0x0800fc39
 800fc0c:	0800fc39 	.word	0x0800fc39
 800fc10:	0800fc39 	.word	0x0800fc39
 800fc14:	0800fc39 	.word	0x0800fc39
 800fc18:	0800fc39 	.word	0x0800fc39
 800fc1c:	0800fc39 	.word	0x0800fc39
 800fc20:	0800fc39 	.word	0x0800fc39
 800fc24:	0800fc39 	.word	0x0800fc39
 800fc28:	0800fc39 	.word	0x0800fc39
 800fc2c:	0800fc39 	.word	0x0800fc39
 800fc30:	0800fc39 	.word	0x0800fc39
 800fc34:	0800fc39 	.word	0x0800fc39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fc38:	bf00      	nop
  }

  return (USBD_OK);
 800fc3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fc52:	6879      	ldr	r1, [r7, #4]
 800fc54:	4805      	ldr	r0, [pc, #20]	; (800fc6c <CDC_Receive_FS+0x24>)
 800fc56:	f7fe fdba 	bl	800e7ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc5a:	4804      	ldr	r0, [pc, #16]	; (800fc6c <CDC_Receive_FS+0x24>)
 800fc5c:	f7fe fe00 	bl	800e860 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fc60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	20000648 	.word	0x20000648

0800fc70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <CDC_Transmit_FS+0x48>)
 800fc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fc92:	2301      	movs	r3, #1
 800fc94:	e00b      	b.n	800fcae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fc96:	887b      	ldrh	r3, [r7, #2]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	4806      	ldr	r0, [pc, #24]	; (800fcb8 <CDC_Transmit_FS+0x48>)
 800fc9e:	f7fe fd78 	bl	800e792 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fca2:	4805      	ldr	r0, [pc, #20]	; (800fcb8 <CDC_Transmit_FS+0x48>)
 800fca4:	f7fe fdac 	bl	800e800 <USBD_CDC_TransmitPacket>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	20000648 	.word	0x20000648

0800fcbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	4613      	mov	r3, r2
 800fcc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fcce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
	...

0800fce0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	6039      	str	r1, [r7, #0]
 800fcea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2212      	movs	r2, #18
 800fcf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fcf2:	4b03      	ldr	r3, [pc, #12]	; (800fd00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr
 800fd00:	20000174 	.word	0x20000174

0800fd04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	6039      	str	r1, [r7, #0]
 800fd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	2204      	movs	r2, #4
 800fd14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd16:	4b03      	ldr	r3, [pc, #12]	; (800fd24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	20000194 	.word	0x20000194

0800fd28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	6039      	str	r1, [r7, #0]
 800fd32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d105      	bne.n	800fd46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd3a:	683a      	ldr	r2, [r7, #0]
 800fd3c:	4907      	ldr	r1, [pc, #28]	; (800fd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800fd3e:	4808      	ldr	r0, [pc, #32]	; (800fd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd40:	f7ff fdf7 	bl	800f932 <USBD_GetString>
 800fd44:	e004      	b.n	800fd50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	4904      	ldr	r1, [pc, #16]	; (800fd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800fd4a:	4805      	ldr	r0, [pc, #20]	; (800fd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800fd4c:	f7ff fdf1 	bl	800f932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd50:	4b02      	ldr	r3, [pc, #8]	; (800fd5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20001118 	.word	0x20001118
 800fd60:	0801103c 	.word	0x0801103c

0800fd64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	6039      	str	r1, [r7, #0]
 800fd6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	4904      	ldr	r1, [pc, #16]	; (800fd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fd74:	4804      	ldr	r0, [pc, #16]	; (800fd88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fd76:	f7ff fddc 	bl	800f932 <USBD_GetString>
  return USBD_StrDesc;
 800fd7a:	4b02      	ldr	r3, [pc, #8]	; (800fd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20001118 	.word	0x20001118
 800fd88:	08011054 	.word	0x08011054

0800fd8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	4603      	mov	r3, r0
 800fd94:	6039      	str	r1, [r7, #0]
 800fd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	221a      	movs	r2, #26
 800fd9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fd9e:	f000 f855 	bl	800fe4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fda2:	4b02      	ldr	r3, [pc, #8]	; (800fdac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20000198 	.word	0x20000198

0800fdb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	6039      	str	r1, [r7, #0]
 800fdba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d105      	bne.n	800fdce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdc2:	683a      	ldr	r2, [r7, #0]
 800fdc4:	4907      	ldr	r1, [pc, #28]	; (800fde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdc6:	4808      	ldr	r0, [pc, #32]	; (800fde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdc8:	f7ff fdb3 	bl	800f932 <USBD_GetString>
 800fdcc:	e004      	b.n	800fdd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdce:	683a      	ldr	r2, [r7, #0]
 800fdd0:	4904      	ldr	r1, [pc, #16]	; (800fde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdd2:	4805      	ldr	r0, [pc, #20]	; (800fde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdd4:	f7ff fdad 	bl	800f932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdd8:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	20001118 	.word	0x20001118
 800fde8:	08011068 	.word	0x08011068

0800fdec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	6039      	str	r1, [r7, #0]
 800fdf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fdf8:	79fb      	ldrb	r3, [r7, #7]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d105      	bne.n	800fe0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	4907      	ldr	r1, [pc, #28]	; (800fe20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe02:	4808      	ldr	r0, [pc, #32]	; (800fe24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe04:	f7ff fd95 	bl	800f932 <USBD_GetString>
 800fe08:	e004      	b.n	800fe14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	4904      	ldr	r1, [pc, #16]	; (800fe20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe0e:	4805      	ldr	r0, [pc, #20]	; (800fe24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fe10:	f7ff fd8f 	bl	800f932 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe14:	4b02      	ldr	r3, [pc, #8]	; (800fe20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	20001118 	.word	0x20001118
 800fe24:	08011074 	.word	0x08011074

0800fe28 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4603      	mov	r3, r0
 800fe30:	6039      	str	r1, [r7, #0]
 800fe32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	220c      	movs	r2, #12
 800fe38:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fe3a:	4b03      	ldr	r3, [pc, #12]	; (800fe48 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	370c      	adds	r7, #12
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr
 800fe48:	20000188 	.word	0x20000188

0800fe4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fe52:	4b0f      	ldr	r3, [pc, #60]	; (800fe90 <Get_SerialNum+0x44>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fe58:	4b0e      	ldr	r3, [pc, #56]	; (800fe94 <Get_SerialNum+0x48>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	; (800fe98 <Get_SerialNum+0x4c>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4413      	add	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d009      	beq.n	800fe86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fe72:	2208      	movs	r2, #8
 800fe74:	4909      	ldr	r1, [pc, #36]	; (800fe9c <Get_SerialNum+0x50>)
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f814 	bl	800fea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fe7c:	2204      	movs	r2, #4
 800fe7e:	4908      	ldr	r1, [pc, #32]	; (800fea0 <Get_SerialNum+0x54>)
 800fe80:	68b8      	ldr	r0, [r7, #8]
 800fe82:	f000 f80f 	bl	800fea4 <IntToUnicode>
  }
}
 800fe86:	bf00      	nop
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	1fff7590 	.word	0x1fff7590
 800fe94:	1fff7594 	.word	0x1fff7594
 800fe98:	1fff7598 	.word	0x1fff7598
 800fe9c:	2000019a 	.word	0x2000019a
 800fea0:	200001aa 	.word	0x200001aa

0800fea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b087      	sub	sp, #28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	4613      	mov	r3, r2
 800feb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800feb6:	2300      	movs	r3, #0
 800feb8:	75fb      	strb	r3, [r7, #23]
 800feba:	e027      	b.n	800ff0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	0f1b      	lsrs	r3, r3, #28
 800fec0:	2b09      	cmp	r3, #9
 800fec2:	d80b      	bhi.n	800fedc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	0f1b      	lsrs	r3, r3, #28
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	7dfb      	ldrb	r3, [r7, #23]
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	4619      	mov	r1, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	440b      	add	r3, r1
 800fed4:	3230      	adds	r2, #48	; 0x30
 800fed6:	b2d2      	uxtb	r2, r2
 800fed8:	701a      	strb	r2, [r3, #0]
 800feda:	e00a      	b.n	800fef2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	0f1b      	lsrs	r3, r3, #28
 800fee0:	b2da      	uxtb	r2, r3
 800fee2:	7dfb      	ldrb	r3, [r7, #23]
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	4619      	mov	r1, r3
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	440b      	add	r3, r1
 800feec:	3237      	adds	r2, #55	; 0x37
 800feee:	b2d2      	uxtb	r2, r2
 800fef0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	011b      	lsls	r3, r3, #4
 800fef6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	3301      	adds	r3, #1
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	4413      	add	r3, r2
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	75fb      	strb	r3, [r7, #23]
 800ff0c:	7dfa      	ldrb	r2, [r7, #23]
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d3d3      	bcc.n	800febc <IntToUnicode+0x18>
  }
}
 800ff14:	bf00      	nop
 800ff16:	bf00      	nop
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b098      	sub	sp, #96	; 0x60
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ff2c:	f107 030c 	add.w	r3, r7, #12
 800ff30:	2254      	movs	r2, #84	; 0x54
 800ff32:	2100      	movs	r1, #0
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 fbab 	bl	8010690 <memset>
  if(pcdHandle->Instance==USB)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4a15      	ldr	r2, [pc, #84]	; (800ff94 <HAL_PCD_MspInit+0x70>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d122      	bne.n	800ff8a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ff44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ff4e:	f107 030c 	add.w	r3, r7, #12
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7f7 f988 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ff5e:	f7f1 fb5f 	bl	8001620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ff62:	4b0d      	ldr	r3, [pc, #52]	; (800ff98 <HAL_PCD_MspInit+0x74>)
 800ff64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff66:	4a0c      	ldr	r2, [pc, #48]	; (800ff98 <HAL_PCD_MspInit+0x74>)
 800ff68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff6c:	6593      	str	r3, [r2, #88]	; 0x58
 800ff6e:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <HAL_PCD_MspInit+0x74>)
 800ff70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ff76:	60bb      	str	r3, [r7, #8]
 800ff78:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	2043      	movs	r0, #67	; 0x43
 800ff80:	f7f3 fa07 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ff84:	2043      	movs	r0, #67	; 0x43
 800ff86:	f7f3 fa20 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ff8a:	bf00      	nop
 800ff8c:	3760      	adds	r7, #96	; 0x60
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	40006800 	.word	0x40006800
 800ff98:	40021000 	.word	0x40021000

0800ff9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	4610      	mov	r0, r2
 800ffb4:	f7fe fd20 	bl	800e9f8 <USBD_LL_SetupStage>
}
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ffd2:	78fa      	ldrb	r2, [r7, #3]
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	00db      	lsls	r3, r3, #3
 800ffde:	440b      	add	r3, r1
 800ffe0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	78fb      	ldrb	r3, [r7, #3]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	f7fe fd5a 	bl	800eaa2 <USBD_LL_DataOutStage>
}
 800ffee:	bf00      	nop
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
 800fffe:	460b      	mov	r3, r1
 8010000:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8010008:	78fa      	ldrb	r2, [r7, #3]
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	4613      	mov	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4413      	add	r3, r2
 8010012:	00db      	lsls	r3, r3, #3
 8010014:	440b      	add	r3, r1
 8010016:	3340      	adds	r3, #64	; 0x40
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	78fb      	ldrb	r3, [r7, #3]
 801001c:	4619      	mov	r1, r3
 801001e:	f7fe fda3 	bl	800eb68 <USBD_LL_DataInStage>
}
 8010022:	bf00      	nop
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b082      	sub	sp, #8
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010038:	4618      	mov	r0, r3
 801003a:	f7fe feb7 	bl	800edac <USBD_LL_SOF>
}
 801003e:	bf00      	nop
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801004e:	2301      	movs	r3, #1
 8010050:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	2b02      	cmp	r3, #2
 8010058:	d001      	beq.n	801005e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801005a:	f7f1 fae1 	bl	8001620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010064:	7bfa      	ldrb	r2, [r7, #15]
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe fe61 	bl	800ed30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010074:	4618      	mov	r0, r3
 8010076:	f7fe fe0d 	bl	800ec94 <USBD_LL_Reset>
}
 801007a:	bf00      	nop
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fe5c 	bl	800ed50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d005      	beq.n	80100ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80100a0:	4b04      	ldr	r3, [pc, #16]	; (80100b4 <HAL_PCD_SuspendCallback+0x30>)
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	4a03      	ldr	r2, [pc, #12]	; (80100b4 <HAL_PCD_SuspendCallback+0x30>)
 80100a6:	f043 0306 	orr.w	r3, r3, #6
 80100aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	e000ed00 	.word	0xe000ed00

080100b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d007      	beq.n	80100d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80100c8:	4b08      	ldr	r3, [pc, #32]	; (80100ec <HAL_PCD_ResumeCallback+0x34>)
 80100ca:	691b      	ldr	r3, [r3, #16]
 80100cc:	4a07      	ldr	r2, [pc, #28]	; (80100ec <HAL_PCD_ResumeCallback+0x34>)
 80100ce:	f023 0306 	bic.w	r3, r3, #6
 80100d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80100d4:	f000 fab6 	bl	8010644 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fe4c 	bl	800ed7c <USBD_LL_Resume>
}
 80100e4:	bf00      	nop
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	e000ed00 	.word	0xe000ed00

080100f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80100f8:	f7f6 fa6e 	bl	80065d8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80100fc:	4a2b      	ldr	r2, [pc, #172]	; (80101ac <USBD_LL_Init+0xbc>)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4a29      	ldr	r2, [pc, #164]	; (80101ac <USBD_LL_Init+0xbc>)
 8010108:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801010c:	4b27      	ldr	r3, [pc, #156]	; (80101ac <USBD_LL_Init+0xbc>)
 801010e:	4a28      	ldr	r2, [pc, #160]	; (80101b0 <USBD_LL_Init+0xc0>)
 8010110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010112:	4b26      	ldr	r3, [pc, #152]	; (80101ac <USBD_LL_Init+0xbc>)
 8010114:	2208      	movs	r2, #8
 8010116:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010118:	4b24      	ldr	r3, [pc, #144]	; (80101ac <USBD_LL_Init+0xbc>)
 801011a:	2202      	movs	r2, #2
 801011c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801011e:	4b23      	ldr	r3, [pc, #140]	; (80101ac <USBD_LL_Init+0xbc>)
 8010120:	2202      	movs	r2, #2
 8010122:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010124:	4b21      	ldr	r3, [pc, #132]	; (80101ac <USBD_LL_Init+0xbc>)
 8010126:	2200      	movs	r2, #0
 8010128:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801012a:	4b20      	ldr	r3, [pc, #128]	; (80101ac <USBD_LL_Init+0xbc>)
 801012c:	2200      	movs	r2, #0
 801012e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010130:	4b1e      	ldr	r3, [pc, #120]	; (80101ac <USBD_LL_Init+0xbc>)
 8010132:	2200      	movs	r2, #0
 8010134:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010136:	4b1d      	ldr	r3, [pc, #116]	; (80101ac <USBD_LL_Init+0xbc>)
 8010138:	2200      	movs	r2, #0
 801013a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801013c:	481b      	ldr	r0, [pc, #108]	; (80101ac <USBD_LL_Init+0xbc>)
 801013e:	f7f4 fc4a 	bl	80049d6 <HAL_PCD_Init>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d001      	beq.n	801014c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010148:	f7f1 fa6a 	bl	8001620 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010152:	2318      	movs	r3, #24
 8010154:	2200      	movs	r2, #0
 8010156:	2100      	movs	r1, #0
 8010158:	f7f6 f95a 	bl	8006410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010162:	2358      	movs	r3, #88	; 0x58
 8010164:	2200      	movs	r2, #0
 8010166:	2180      	movs	r1, #128	; 0x80
 8010168:	f7f6 f952 	bl	8006410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010172:	23c0      	movs	r3, #192	; 0xc0
 8010174:	2200      	movs	r2, #0
 8010176:	2181      	movs	r1, #129	; 0x81
 8010178:	f7f6 f94a 	bl	8006410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010182:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010186:	2200      	movs	r2, #0
 8010188:	2101      	movs	r1, #1
 801018a:	f7f6 f941 	bl	8006410 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010198:	2200      	movs	r2, #0
 801019a:	2182      	movs	r1, #130	; 0x82
 801019c:	f7f6 f938 	bl	8006410 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	20001318 	.word	0x20001318
 80101b0:	40006800 	.word	0x40006800

080101b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7f4 fd1a 	bl	8004c04 <HAL_PCD_Start>
 80101d0:	4603      	mov	r3, r0
 80101d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80101d4:	7bbb      	ldrb	r3, [r7, #14]
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	d816      	bhi.n	8010208 <USBD_LL_Start+0x54>
 80101da:	a201      	add	r2, pc, #4	; (adr r2, 80101e0 <USBD_LL_Start+0x2c>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	080101f1 	.word	0x080101f1
 80101e4:	080101f7 	.word	0x080101f7
 80101e8:	080101fd 	.word	0x080101fd
 80101ec:	08010203 	.word	0x08010203
    case HAL_OK :
      usb_status = USBD_OK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	73fb      	strb	r3, [r7, #15]
    break;
 80101f4:	e00b      	b.n	801020e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101f6:	2303      	movs	r3, #3
 80101f8:	73fb      	strb	r3, [r7, #15]
    break;
 80101fa:	e008      	b.n	801020e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101fc:	2301      	movs	r3, #1
 80101fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010200:	e005      	b.n	801020e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010202:	2303      	movs	r3, #3
 8010204:	73fb      	strb	r3, [r7, #15]
    break;
 8010206:	e002      	b.n	801020e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010208:	2303      	movs	r3, #3
 801020a:	73fb      	strb	r3, [r7, #15]
    break;
 801020c:	bf00      	nop
  }
  return usb_status;
 801020e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	461a      	mov	r2, r3
 8010226:	4603      	mov	r3, r0
 8010228:	70fb      	strb	r3, [r7, #3]
 801022a:	460b      	mov	r3, r1
 801022c:	70bb      	strb	r3, [r7, #2]
 801022e:	4613      	mov	r3, r2
 8010230:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010236:	2300      	movs	r3, #0
 8010238:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010240:	78bb      	ldrb	r3, [r7, #2]
 8010242:	883a      	ldrh	r2, [r7, #0]
 8010244:	78f9      	ldrb	r1, [r7, #3]
 8010246:	f7f4 fe4b 	bl	8004ee0 <HAL_PCD_EP_Open>
 801024a:	4603      	mov	r3, r0
 801024c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801024e:	7bbb      	ldrb	r3, [r7, #14]
 8010250:	2b03      	cmp	r3, #3
 8010252:	d817      	bhi.n	8010284 <USBD_LL_OpenEP+0x6c>
 8010254:	a201      	add	r2, pc, #4	; (adr r2, 801025c <USBD_LL_OpenEP+0x44>)
 8010256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801025a:	bf00      	nop
 801025c:	0801026d 	.word	0x0801026d
 8010260:	08010273 	.word	0x08010273
 8010264:	08010279 	.word	0x08010279
 8010268:	0801027f 	.word	0x0801027f
    case HAL_OK :
      usb_status = USBD_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	73fb      	strb	r3, [r7, #15]
    break;
 8010270:	e00b      	b.n	801028a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010272:	2303      	movs	r3, #3
 8010274:	73fb      	strb	r3, [r7, #15]
    break;
 8010276:	e008      	b.n	801028a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010278:	2301      	movs	r3, #1
 801027a:	73fb      	strb	r3, [r7, #15]
    break;
 801027c:	e005      	b.n	801028a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801027e:	2303      	movs	r3, #3
 8010280:	73fb      	strb	r3, [r7, #15]
    break;
 8010282:	e002      	b.n	801028a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010284:	2303      	movs	r3, #3
 8010286:	73fb      	strb	r3, [r7, #15]
    break;
 8010288:	bf00      	nop
  }
  return usb_status;
 801028a:	7bfb      	ldrb	r3, [r7, #15]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	460b      	mov	r3, r1
 801029e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102a0:	2300      	movs	r3, #0
 80102a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102a4:	2300      	movs	r3, #0
 80102a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102ae:	78fa      	ldrb	r2, [r7, #3]
 80102b0:	4611      	mov	r1, r2
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7f4 fe7c 	bl	8004fb0 <HAL_PCD_EP_Close>
 80102b8:	4603      	mov	r3, r0
 80102ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80102bc:	7bbb      	ldrb	r3, [r7, #14]
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d816      	bhi.n	80102f0 <USBD_LL_CloseEP+0x5c>
 80102c2:	a201      	add	r2, pc, #4	; (adr r2, 80102c8 <USBD_LL_CloseEP+0x34>)
 80102c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c8:	080102d9 	.word	0x080102d9
 80102cc:	080102df 	.word	0x080102df
 80102d0:	080102e5 	.word	0x080102e5
 80102d4:	080102eb 	.word	0x080102eb
    case HAL_OK :
      usb_status = USBD_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	73fb      	strb	r3, [r7, #15]
    break;
 80102dc:	e00b      	b.n	80102f6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102de:	2303      	movs	r3, #3
 80102e0:	73fb      	strb	r3, [r7, #15]
    break;
 80102e2:	e008      	b.n	80102f6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102e4:	2301      	movs	r3, #1
 80102e6:	73fb      	strb	r3, [r7, #15]
    break;
 80102e8:	e005      	b.n	80102f6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102ea:	2303      	movs	r3, #3
 80102ec:	73fb      	strb	r3, [r7, #15]
    break;
 80102ee:	e002      	b.n	80102f6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80102f0:	2303      	movs	r3, #3
 80102f2:	73fb      	strb	r3, [r7, #15]
    break;
 80102f4:	bf00      	nop
  }
  return usb_status;
 80102f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801031a:	78fa      	ldrb	r2, [r7, #3]
 801031c:	4611      	mov	r1, r2
 801031e:	4618      	mov	r0, r3
 8010320:	f7f4 ff2a 	bl	8005178 <HAL_PCD_EP_SetStall>
 8010324:	4603      	mov	r3, r0
 8010326:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010328:	7bbb      	ldrb	r3, [r7, #14]
 801032a:	2b03      	cmp	r3, #3
 801032c:	d816      	bhi.n	801035c <USBD_LL_StallEP+0x5c>
 801032e:	a201      	add	r2, pc, #4	; (adr r2, 8010334 <USBD_LL_StallEP+0x34>)
 8010330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010334:	08010345 	.word	0x08010345
 8010338:	0801034b 	.word	0x0801034b
 801033c:	08010351 	.word	0x08010351
 8010340:	08010357 	.word	0x08010357
    case HAL_OK :
      usb_status = USBD_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	73fb      	strb	r3, [r7, #15]
    break;
 8010348:	e00b      	b.n	8010362 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801034a:	2303      	movs	r3, #3
 801034c:	73fb      	strb	r3, [r7, #15]
    break;
 801034e:	e008      	b.n	8010362 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010350:	2301      	movs	r3, #1
 8010352:	73fb      	strb	r3, [r7, #15]
    break;
 8010354:	e005      	b.n	8010362 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010356:	2303      	movs	r3, #3
 8010358:	73fb      	strb	r3, [r7, #15]
    break;
 801035a:	e002      	b.n	8010362 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801035c:	2303      	movs	r3, #3
 801035e:	73fb      	strb	r3, [r7, #15]
    break;
 8010360:	bf00      	nop
  }
  return usb_status;
 8010362:	7bfb      	ldrb	r3, [r7, #15]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	460b      	mov	r3, r1
 8010376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010386:	78fa      	ldrb	r2, [r7, #3]
 8010388:	4611      	mov	r1, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7f4 ff56 	bl	800523c <HAL_PCD_EP_ClrStall>
 8010390:	4603      	mov	r3, r0
 8010392:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010394:	7bbb      	ldrb	r3, [r7, #14]
 8010396:	2b03      	cmp	r3, #3
 8010398:	d816      	bhi.n	80103c8 <USBD_LL_ClearStallEP+0x5c>
 801039a:	a201      	add	r2, pc, #4	; (adr r2, 80103a0 <USBD_LL_ClearStallEP+0x34>)
 801039c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a0:	080103b1 	.word	0x080103b1
 80103a4:	080103b7 	.word	0x080103b7
 80103a8:	080103bd 	.word	0x080103bd
 80103ac:	080103c3 	.word	0x080103c3
    case HAL_OK :
      usb_status = USBD_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]
    break;
 80103b4:	e00b      	b.n	80103ce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103b6:	2303      	movs	r3, #3
 80103b8:	73fb      	strb	r3, [r7, #15]
    break;
 80103ba:	e008      	b.n	80103ce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103bc:	2301      	movs	r3, #1
 80103be:	73fb      	strb	r3, [r7, #15]
    break;
 80103c0:	e005      	b.n	80103ce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103c2:	2303      	movs	r3, #3
 80103c4:	73fb      	strb	r3, [r7, #15]
    break;
 80103c6:	e002      	b.n	80103ce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80103c8:	2303      	movs	r3, #3
 80103ca:	73fb      	strb	r3, [r7, #15]
    break;
 80103cc:	bf00      	nop
  }
  return usb_status;
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	460b      	mov	r3, r1
 80103e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80103ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	da0c      	bge.n	801040e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103fa:	68f9      	ldr	r1, [r7, #12]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	4613      	mov	r3, r2
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	440b      	add	r3, r1
 8010408:	3306      	adds	r3, #6
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	e00b      	b.n	8010426 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801040e:	78fb      	ldrb	r3, [r7, #3]
 8010410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010414:	68f9      	ldr	r1, [r7, #12]
 8010416:	4613      	mov	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	440b      	add	r3, r1
 8010420:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8010424:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010426:	4618      	mov	r0, r3
 8010428:	3714      	adds	r7, #20
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
	...

08010434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	460b      	mov	r3, r1
 801043e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801044e:	78fa      	ldrb	r2, [r7, #3]
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f7f4 fd1f 	bl	8004e96 <HAL_PCD_SetAddress>
 8010458:	4603      	mov	r3, r0
 801045a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801045c:	7bbb      	ldrb	r3, [r7, #14]
 801045e:	2b03      	cmp	r3, #3
 8010460:	d816      	bhi.n	8010490 <USBD_LL_SetUSBAddress+0x5c>
 8010462:	a201      	add	r2, pc, #4	; (adr r2, 8010468 <USBD_LL_SetUSBAddress+0x34>)
 8010464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010468:	08010479 	.word	0x08010479
 801046c:	0801047f 	.word	0x0801047f
 8010470:	08010485 	.word	0x08010485
 8010474:	0801048b 	.word	0x0801048b
    case HAL_OK :
      usb_status = USBD_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	73fb      	strb	r3, [r7, #15]
    break;
 801047c:	e00b      	b.n	8010496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801047e:	2303      	movs	r3, #3
 8010480:	73fb      	strb	r3, [r7, #15]
    break;
 8010482:	e008      	b.n	8010496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010484:	2301      	movs	r3, #1
 8010486:	73fb      	strb	r3, [r7, #15]
    break;
 8010488:	e005      	b.n	8010496 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801048a:	2303      	movs	r3, #3
 801048c:	73fb      	strb	r3, [r7, #15]
    break;
 801048e:	e002      	b.n	8010496 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010490:	2303      	movs	r3, #3
 8010492:	73fb      	strb	r3, [r7, #15]
    break;
 8010494:	bf00      	nop
  }
  return usb_status;
 8010496:	7bfb      	ldrb	r3, [r7, #15]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b086      	sub	sp, #24
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	607a      	str	r2, [r7, #4]
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	460b      	mov	r3, r1
 80104ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b0:	2300      	movs	r3, #0
 80104b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104be:	7af9      	ldrb	r1, [r7, #11]
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	f7f4 fe14 	bl	80050f0 <HAL_PCD_EP_Transmit>
 80104c8:	4603      	mov	r3, r0
 80104ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80104cc:	7dbb      	ldrb	r3, [r7, #22]
 80104ce:	2b03      	cmp	r3, #3
 80104d0:	d816      	bhi.n	8010500 <USBD_LL_Transmit+0x60>
 80104d2:	a201      	add	r2, pc, #4	; (adr r2, 80104d8 <USBD_LL_Transmit+0x38>)
 80104d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d8:	080104e9 	.word	0x080104e9
 80104dc:	080104ef 	.word	0x080104ef
 80104e0:	080104f5 	.word	0x080104f5
 80104e4:	080104fb 	.word	0x080104fb
    case HAL_OK :
      usb_status = USBD_OK;
 80104e8:	2300      	movs	r3, #0
 80104ea:	75fb      	strb	r3, [r7, #23]
    break;
 80104ec:	e00b      	b.n	8010506 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104ee:	2303      	movs	r3, #3
 80104f0:	75fb      	strb	r3, [r7, #23]
    break;
 80104f2:	e008      	b.n	8010506 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104f4:	2301      	movs	r3, #1
 80104f6:	75fb      	strb	r3, [r7, #23]
    break;
 80104f8:	e005      	b.n	8010506 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104fa:	2303      	movs	r3, #3
 80104fc:	75fb      	strb	r3, [r7, #23]
    break;
 80104fe:	e002      	b.n	8010506 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010500:	2303      	movs	r3, #3
 8010502:	75fb      	strb	r3, [r7, #23]
    break;
 8010504:	bf00      	nop
  }
  return usb_status;
 8010506:	7dfb      	ldrb	r3, [r7, #23]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	607a      	str	r2, [r7, #4]
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	460b      	mov	r3, r1
 801051e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801052e:	7af9      	ldrb	r1, [r7, #11]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	f7f4 fd86 	bl	8005044 <HAL_PCD_EP_Receive>
 8010538:	4603      	mov	r3, r0
 801053a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801053c:	7dbb      	ldrb	r3, [r7, #22]
 801053e:	2b03      	cmp	r3, #3
 8010540:	d816      	bhi.n	8010570 <USBD_LL_PrepareReceive+0x60>
 8010542:	a201      	add	r2, pc, #4	; (adr r2, 8010548 <USBD_LL_PrepareReceive+0x38>)
 8010544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010548:	08010559 	.word	0x08010559
 801054c:	0801055f 	.word	0x0801055f
 8010550:	08010565 	.word	0x08010565
 8010554:	0801056b 	.word	0x0801056b
    case HAL_OK :
      usb_status = USBD_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	75fb      	strb	r3, [r7, #23]
    break;
 801055c:	e00b      	b.n	8010576 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801055e:	2303      	movs	r3, #3
 8010560:	75fb      	strb	r3, [r7, #23]
    break;
 8010562:	e008      	b.n	8010576 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010564:	2301      	movs	r3, #1
 8010566:	75fb      	strb	r3, [r7, #23]
    break;
 8010568:	e005      	b.n	8010576 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801056a:	2303      	movs	r3, #3
 801056c:	75fb      	strb	r3, [r7, #23]
    break;
 801056e:	e002      	b.n	8010576 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010570:	2303      	movs	r3, #3
 8010572:	75fb      	strb	r3, [r7, #23]
    break;
 8010574:	bf00      	nop
  }
  return usb_status;
 8010576:	7dfb      	ldrb	r3, [r7, #23]
}
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010592:	78fa      	ldrb	r2, [r7, #3]
 8010594:	4611      	mov	r1, r2
 8010596:	4618      	mov	r0, r3
 8010598:	f7f4 fd92 	bl	80050c0 <HAL_PCD_EP_GetRxCount>
 801059c:	4603      	mov	r3, r0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
	...

080105a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	460b      	mov	r3, r1
 80105b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80105b4:	78fb      	ldrb	r3, [r7, #3]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <HAL_PCDEx_LPM_Callback+0x18>
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d013      	beq.n	80105e6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80105be:	e023      	b.n	8010608 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	699b      	ldr	r3, [r3, #24]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d007      	beq.n	80105d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80105c8:	f000 f83c 	bl	8010644 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105cc:	4b10      	ldr	r3, [pc, #64]	; (8010610 <HAL_PCDEx_LPM_Callback+0x68>)
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	4a0f      	ldr	r2, [pc, #60]	; (8010610 <HAL_PCDEx_LPM_Callback+0x68>)
 80105d2:	f023 0306 	bic.w	r3, r3, #6
 80105d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fe fbcc 	bl	800ed7c <USBD_LL_Resume>
    break;
 80105e4:	e010      	b.n	8010608 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe fbaf 	bl	800ed50 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	699b      	ldr	r3, [r3, #24]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d005      	beq.n	8010606 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105fa:	4b05      	ldr	r3, [pc, #20]	; (8010610 <HAL_PCDEx_LPM_Callback+0x68>)
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	4a04      	ldr	r2, [pc, #16]	; (8010610 <HAL_PCDEx_LPM_Callback+0x68>)
 8010600:	f043 0306 	orr.w	r3, r3, #6
 8010604:	6113      	str	r3, [r2, #16]
    break;
 8010606:	bf00      	nop
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	e000ed00 	.word	0xe000ed00

08010614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801061c:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_static_malloc+0x18>)
}
 801061e:	4618      	mov	r0, r3
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	20001614 	.word	0x20001614

08010630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]

}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010648:	f7f0 fe70 	bl	800132c <SystemClock_Config>
}
 801064c:	bf00      	nop
 801064e:	bd80      	pop	{r7, pc}

08010650 <siprintf>:
 8010650:	b40e      	push	{r1, r2, r3}
 8010652:	b500      	push	{lr}
 8010654:	b09c      	sub	sp, #112	; 0x70
 8010656:	ab1d      	add	r3, sp, #116	; 0x74
 8010658:	9002      	str	r0, [sp, #8]
 801065a:	9006      	str	r0, [sp, #24]
 801065c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010660:	4809      	ldr	r0, [pc, #36]	; (8010688 <siprintf+0x38>)
 8010662:	9107      	str	r1, [sp, #28]
 8010664:	9104      	str	r1, [sp, #16]
 8010666:	4909      	ldr	r1, [pc, #36]	; (801068c <siprintf+0x3c>)
 8010668:	f853 2b04 	ldr.w	r2, [r3], #4
 801066c:	9105      	str	r1, [sp, #20]
 801066e:	6800      	ldr	r0, [r0, #0]
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	a902      	add	r1, sp, #8
 8010674:	f000 f992 	bl	801099c <_svfiprintf_r>
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	b01c      	add	sp, #112	; 0x70
 8010680:	f85d eb04 	ldr.w	lr, [sp], #4
 8010684:	b003      	add	sp, #12
 8010686:	4770      	bx	lr
 8010688:	20000200 	.word	0x20000200
 801068c:	ffff0208 	.word	0xffff0208

08010690 <memset>:
 8010690:	4402      	add	r2, r0
 8010692:	4603      	mov	r3, r0
 8010694:	4293      	cmp	r3, r2
 8010696:	d100      	bne.n	801069a <memset+0xa>
 8010698:	4770      	bx	lr
 801069a:	f803 1b01 	strb.w	r1, [r3], #1
 801069e:	e7f9      	b.n	8010694 <memset+0x4>

080106a0 <__errno>:
 80106a0:	4b01      	ldr	r3, [pc, #4]	; (80106a8 <__errno+0x8>)
 80106a2:	6818      	ldr	r0, [r3, #0]
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	20000200 	.word	0x20000200

080106ac <__libc_init_array>:
 80106ac:	b570      	push	{r4, r5, r6, lr}
 80106ae:	4d0d      	ldr	r5, [pc, #52]	; (80106e4 <__libc_init_array+0x38>)
 80106b0:	4c0d      	ldr	r4, [pc, #52]	; (80106e8 <__libc_init_array+0x3c>)
 80106b2:	1b64      	subs	r4, r4, r5
 80106b4:	10a4      	asrs	r4, r4, #2
 80106b6:	2600      	movs	r6, #0
 80106b8:	42a6      	cmp	r6, r4
 80106ba:	d109      	bne.n	80106d0 <__libc_init_array+0x24>
 80106bc:	4d0b      	ldr	r5, [pc, #44]	; (80106ec <__libc_init_array+0x40>)
 80106be:	4c0c      	ldr	r4, [pc, #48]	; (80106f0 <__libc_init_array+0x44>)
 80106c0:	f000 fc6a 	bl	8010f98 <_init>
 80106c4:	1b64      	subs	r4, r4, r5
 80106c6:	10a4      	asrs	r4, r4, #2
 80106c8:	2600      	movs	r6, #0
 80106ca:	42a6      	cmp	r6, r4
 80106cc:	d105      	bne.n	80106da <__libc_init_array+0x2e>
 80106ce:	bd70      	pop	{r4, r5, r6, pc}
 80106d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80106d4:	4798      	blx	r3
 80106d6:	3601      	adds	r6, #1
 80106d8:	e7ee      	b.n	80106b8 <__libc_init_array+0xc>
 80106da:	f855 3b04 	ldr.w	r3, [r5], #4
 80106de:	4798      	blx	r3
 80106e0:	3601      	adds	r6, #1
 80106e2:	e7f2      	b.n	80106ca <__libc_init_array+0x1e>
 80106e4:	08011cac 	.word	0x08011cac
 80106e8:	08011cac 	.word	0x08011cac
 80106ec:	08011cac 	.word	0x08011cac
 80106f0:	08011cb0 	.word	0x08011cb0

080106f4 <__retarget_lock_acquire_recursive>:
 80106f4:	4770      	bx	lr

080106f6 <__retarget_lock_release_recursive>:
 80106f6:	4770      	bx	lr

080106f8 <_free_r>:
 80106f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106fa:	2900      	cmp	r1, #0
 80106fc:	d044      	beq.n	8010788 <_free_r+0x90>
 80106fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010702:	9001      	str	r0, [sp, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	f1a1 0404 	sub.w	r4, r1, #4
 801070a:	bfb8      	it	lt
 801070c:	18e4      	addlt	r4, r4, r3
 801070e:	f000 f8df 	bl	80108d0 <__malloc_lock>
 8010712:	4a1e      	ldr	r2, [pc, #120]	; (801078c <_free_r+0x94>)
 8010714:	9801      	ldr	r0, [sp, #4]
 8010716:	6813      	ldr	r3, [r2, #0]
 8010718:	b933      	cbnz	r3, 8010728 <_free_r+0x30>
 801071a:	6063      	str	r3, [r4, #4]
 801071c:	6014      	str	r4, [r2, #0]
 801071e:	b003      	add	sp, #12
 8010720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010724:	f000 b8da 	b.w	80108dc <__malloc_unlock>
 8010728:	42a3      	cmp	r3, r4
 801072a:	d908      	bls.n	801073e <_free_r+0x46>
 801072c:	6825      	ldr	r5, [r4, #0]
 801072e:	1961      	adds	r1, r4, r5
 8010730:	428b      	cmp	r3, r1
 8010732:	bf01      	itttt	eq
 8010734:	6819      	ldreq	r1, [r3, #0]
 8010736:	685b      	ldreq	r3, [r3, #4]
 8010738:	1949      	addeq	r1, r1, r5
 801073a:	6021      	streq	r1, [r4, #0]
 801073c:	e7ed      	b.n	801071a <_free_r+0x22>
 801073e:	461a      	mov	r2, r3
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	b10b      	cbz	r3, 8010748 <_free_r+0x50>
 8010744:	42a3      	cmp	r3, r4
 8010746:	d9fa      	bls.n	801073e <_free_r+0x46>
 8010748:	6811      	ldr	r1, [r2, #0]
 801074a:	1855      	adds	r5, r2, r1
 801074c:	42a5      	cmp	r5, r4
 801074e:	d10b      	bne.n	8010768 <_free_r+0x70>
 8010750:	6824      	ldr	r4, [r4, #0]
 8010752:	4421      	add	r1, r4
 8010754:	1854      	adds	r4, r2, r1
 8010756:	42a3      	cmp	r3, r4
 8010758:	6011      	str	r1, [r2, #0]
 801075a:	d1e0      	bne.n	801071e <_free_r+0x26>
 801075c:	681c      	ldr	r4, [r3, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	6053      	str	r3, [r2, #4]
 8010762:	440c      	add	r4, r1
 8010764:	6014      	str	r4, [r2, #0]
 8010766:	e7da      	b.n	801071e <_free_r+0x26>
 8010768:	d902      	bls.n	8010770 <_free_r+0x78>
 801076a:	230c      	movs	r3, #12
 801076c:	6003      	str	r3, [r0, #0]
 801076e:	e7d6      	b.n	801071e <_free_r+0x26>
 8010770:	6825      	ldr	r5, [r4, #0]
 8010772:	1961      	adds	r1, r4, r5
 8010774:	428b      	cmp	r3, r1
 8010776:	bf04      	itt	eq
 8010778:	6819      	ldreq	r1, [r3, #0]
 801077a:	685b      	ldreq	r3, [r3, #4]
 801077c:	6063      	str	r3, [r4, #4]
 801077e:	bf04      	itt	eq
 8010780:	1949      	addeq	r1, r1, r5
 8010782:	6021      	streq	r1, [r4, #0]
 8010784:	6054      	str	r4, [r2, #4]
 8010786:	e7ca      	b.n	801071e <_free_r+0x26>
 8010788:	b003      	add	sp, #12
 801078a:	bd30      	pop	{r4, r5, pc}
 801078c:	20001974 	.word	0x20001974

08010790 <sbrk_aligned>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	4e0e      	ldr	r6, [pc, #56]	; (80107cc <sbrk_aligned+0x3c>)
 8010794:	460c      	mov	r4, r1
 8010796:	6831      	ldr	r1, [r6, #0]
 8010798:	4605      	mov	r5, r0
 801079a:	b911      	cbnz	r1, 80107a2 <sbrk_aligned+0x12>
 801079c:	f000 fba6 	bl	8010eec <_sbrk_r>
 80107a0:	6030      	str	r0, [r6, #0]
 80107a2:	4621      	mov	r1, r4
 80107a4:	4628      	mov	r0, r5
 80107a6:	f000 fba1 	bl	8010eec <_sbrk_r>
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	d00a      	beq.n	80107c4 <sbrk_aligned+0x34>
 80107ae:	1cc4      	adds	r4, r0, #3
 80107b0:	f024 0403 	bic.w	r4, r4, #3
 80107b4:	42a0      	cmp	r0, r4
 80107b6:	d007      	beq.n	80107c8 <sbrk_aligned+0x38>
 80107b8:	1a21      	subs	r1, r4, r0
 80107ba:	4628      	mov	r0, r5
 80107bc:	f000 fb96 	bl	8010eec <_sbrk_r>
 80107c0:	3001      	adds	r0, #1
 80107c2:	d101      	bne.n	80107c8 <sbrk_aligned+0x38>
 80107c4:	f04f 34ff 	mov.w	r4, #4294967295
 80107c8:	4620      	mov	r0, r4
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	20001978 	.word	0x20001978

080107d0 <_malloc_r>:
 80107d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d4:	1ccd      	adds	r5, r1, #3
 80107d6:	f025 0503 	bic.w	r5, r5, #3
 80107da:	3508      	adds	r5, #8
 80107dc:	2d0c      	cmp	r5, #12
 80107de:	bf38      	it	cc
 80107e0:	250c      	movcc	r5, #12
 80107e2:	2d00      	cmp	r5, #0
 80107e4:	4607      	mov	r7, r0
 80107e6:	db01      	blt.n	80107ec <_malloc_r+0x1c>
 80107e8:	42a9      	cmp	r1, r5
 80107ea:	d905      	bls.n	80107f8 <_malloc_r+0x28>
 80107ec:	230c      	movs	r3, #12
 80107ee:	603b      	str	r3, [r7, #0]
 80107f0:	2600      	movs	r6, #0
 80107f2:	4630      	mov	r0, r6
 80107f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80108cc <_malloc_r+0xfc>
 80107fc:	f000 f868 	bl	80108d0 <__malloc_lock>
 8010800:	f8d8 3000 	ldr.w	r3, [r8]
 8010804:	461c      	mov	r4, r3
 8010806:	bb5c      	cbnz	r4, 8010860 <_malloc_r+0x90>
 8010808:	4629      	mov	r1, r5
 801080a:	4638      	mov	r0, r7
 801080c:	f7ff ffc0 	bl	8010790 <sbrk_aligned>
 8010810:	1c43      	adds	r3, r0, #1
 8010812:	4604      	mov	r4, r0
 8010814:	d155      	bne.n	80108c2 <_malloc_r+0xf2>
 8010816:	f8d8 4000 	ldr.w	r4, [r8]
 801081a:	4626      	mov	r6, r4
 801081c:	2e00      	cmp	r6, #0
 801081e:	d145      	bne.n	80108ac <_malloc_r+0xdc>
 8010820:	2c00      	cmp	r4, #0
 8010822:	d048      	beq.n	80108b6 <_malloc_r+0xe6>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	4631      	mov	r1, r6
 8010828:	4638      	mov	r0, r7
 801082a:	eb04 0903 	add.w	r9, r4, r3
 801082e:	f000 fb5d 	bl	8010eec <_sbrk_r>
 8010832:	4581      	cmp	r9, r0
 8010834:	d13f      	bne.n	80108b6 <_malloc_r+0xe6>
 8010836:	6821      	ldr	r1, [r4, #0]
 8010838:	1a6d      	subs	r5, r5, r1
 801083a:	4629      	mov	r1, r5
 801083c:	4638      	mov	r0, r7
 801083e:	f7ff ffa7 	bl	8010790 <sbrk_aligned>
 8010842:	3001      	adds	r0, #1
 8010844:	d037      	beq.n	80108b6 <_malloc_r+0xe6>
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	442b      	add	r3, r5
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	f8d8 3000 	ldr.w	r3, [r8]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d038      	beq.n	80108c6 <_malloc_r+0xf6>
 8010854:	685a      	ldr	r2, [r3, #4]
 8010856:	42a2      	cmp	r2, r4
 8010858:	d12b      	bne.n	80108b2 <_malloc_r+0xe2>
 801085a:	2200      	movs	r2, #0
 801085c:	605a      	str	r2, [r3, #4]
 801085e:	e00f      	b.n	8010880 <_malloc_r+0xb0>
 8010860:	6822      	ldr	r2, [r4, #0]
 8010862:	1b52      	subs	r2, r2, r5
 8010864:	d41f      	bmi.n	80108a6 <_malloc_r+0xd6>
 8010866:	2a0b      	cmp	r2, #11
 8010868:	d917      	bls.n	801089a <_malloc_r+0xca>
 801086a:	1961      	adds	r1, r4, r5
 801086c:	42a3      	cmp	r3, r4
 801086e:	6025      	str	r5, [r4, #0]
 8010870:	bf18      	it	ne
 8010872:	6059      	strne	r1, [r3, #4]
 8010874:	6863      	ldr	r3, [r4, #4]
 8010876:	bf08      	it	eq
 8010878:	f8c8 1000 	streq.w	r1, [r8]
 801087c:	5162      	str	r2, [r4, r5]
 801087e:	604b      	str	r3, [r1, #4]
 8010880:	4638      	mov	r0, r7
 8010882:	f104 060b 	add.w	r6, r4, #11
 8010886:	f000 f829 	bl	80108dc <__malloc_unlock>
 801088a:	f026 0607 	bic.w	r6, r6, #7
 801088e:	1d23      	adds	r3, r4, #4
 8010890:	1af2      	subs	r2, r6, r3
 8010892:	d0ae      	beq.n	80107f2 <_malloc_r+0x22>
 8010894:	1b9b      	subs	r3, r3, r6
 8010896:	50a3      	str	r3, [r4, r2]
 8010898:	e7ab      	b.n	80107f2 <_malloc_r+0x22>
 801089a:	42a3      	cmp	r3, r4
 801089c:	6862      	ldr	r2, [r4, #4]
 801089e:	d1dd      	bne.n	801085c <_malloc_r+0x8c>
 80108a0:	f8c8 2000 	str.w	r2, [r8]
 80108a4:	e7ec      	b.n	8010880 <_malloc_r+0xb0>
 80108a6:	4623      	mov	r3, r4
 80108a8:	6864      	ldr	r4, [r4, #4]
 80108aa:	e7ac      	b.n	8010806 <_malloc_r+0x36>
 80108ac:	4634      	mov	r4, r6
 80108ae:	6876      	ldr	r6, [r6, #4]
 80108b0:	e7b4      	b.n	801081c <_malloc_r+0x4c>
 80108b2:	4613      	mov	r3, r2
 80108b4:	e7cc      	b.n	8010850 <_malloc_r+0x80>
 80108b6:	230c      	movs	r3, #12
 80108b8:	603b      	str	r3, [r7, #0]
 80108ba:	4638      	mov	r0, r7
 80108bc:	f000 f80e 	bl	80108dc <__malloc_unlock>
 80108c0:	e797      	b.n	80107f2 <_malloc_r+0x22>
 80108c2:	6025      	str	r5, [r4, #0]
 80108c4:	e7dc      	b.n	8010880 <_malloc_r+0xb0>
 80108c6:	605b      	str	r3, [r3, #4]
 80108c8:	deff      	udf	#255	; 0xff
 80108ca:	bf00      	nop
 80108cc:	20001974 	.word	0x20001974

080108d0 <__malloc_lock>:
 80108d0:	4801      	ldr	r0, [pc, #4]	; (80108d8 <__malloc_lock+0x8>)
 80108d2:	f7ff bf0f 	b.w	80106f4 <__retarget_lock_acquire_recursive>
 80108d6:	bf00      	nop
 80108d8:	20001970 	.word	0x20001970

080108dc <__malloc_unlock>:
 80108dc:	4801      	ldr	r0, [pc, #4]	; (80108e4 <__malloc_unlock+0x8>)
 80108de:	f7ff bf0a 	b.w	80106f6 <__retarget_lock_release_recursive>
 80108e2:	bf00      	nop
 80108e4:	20001970 	.word	0x20001970

080108e8 <__ssputs_r>:
 80108e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ec:	688e      	ldr	r6, [r1, #8]
 80108ee:	461f      	mov	r7, r3
 80108f0:	42be      	cmp	r6, r7
 80108f2:	680b      	ldr	r3, [r1, #0]
 80108f4:	4682      	mov	sl, r0
 80108f6:	460c      	mov	r4, r1
 80108f8:	4690      	mov	r8, r2
 80108fa:	d82c      	bhi.n	8010956 <__ssputs_r+0x6e>
 80108fc:	898a      	ldrh	r2, [r1, #12]
 80108fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010902:	d026      	beq.n	8010952 <__ssputs_r+0x6a>
 8010904:	6965      	ldr	r5, [r4, #20]
 8010906:	6909      	ldr	r1, [r1, #16]
 8010908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801090c:	eba3 0901 	sub.w	r9, r3, r1
 8010910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010914:	1c7b      	adds	r3, r7, #1
 8010916:	444b      	add	r3, r9
 8010918:	106d      	asrs	r5, r5, #1
 801091a:	429d      	cmp	r5, r3
 801091c:	bf38      	it	cc
 801091e:	461d      	movcc	r5, r3
 8010920:	0553      	lsls	r3, r2, #21
 8010922:	d527      	bpl.n	8010974 <__ssputs_r+0x8c>
 8010924:	4629      	mov	r1, r5
 8010926:	f7ff ff53 	bl	80107d0 <_malloc_r>
 801092a:	4606      	mov	r6, r0
 801092c:	b360      	cbz	r0, 8010988 <__ssputs_r+0xa0>
 801092e:	6921      	ldr	r1, [r4, #16]
 8010930:	464a      	mov	r2, r9
 8010932:	f000 faeb 	bl	8010f0c <memcpy>
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010940:	81a3      	strh	r3, [r4, #12]
 8010942:	6126      	str	r6, [r4, #16]
 8010944:	6165      	str	r5, [r4, #20]
 8010946:	444e      	add	r6, r9
 8010948:	eba5 0509 	sub.w	r5, r5, r9
 801094c:	6026      	str	r6, [r4, #0]
 801094e:	60a5      	str	r5, [r4, #8]
 8010950:	463e      	mov	r6, r7
 8010952:	42be      	cmp	r6, r7
 8010954:	d900      	bls.n	8010958 <__ssputs_r+0x70>
 8010956:	463e      	mov	r6, r7
 8010958:	6820      	ldr	r0, [r4, #0]
 801095a:	4632      	mov	r2, r6
 801095c:	4641      	mov	r1, r8
 801095e:	f000 faab 	bl	8010eb8 <memmove>
 8010962:	68a3      	ldr	r3, [r4, #8]
 8010964:	1b9b      	subs	r3, r3, r6
 8010966:	60a3      	str	r3, [r4, #8]
 8010968:	6823      	ldr	r3, [r4, #0]
 801096a:	4433      	add	r3, r6
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	2000      	movs	r0, #0
 8010970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010974:	462a      	mov	r2, r5
 8010976:	f000 fad7 	bl	8010f28 <_realloc_r>
 801097a:	4606      	mov	r6, r0
 801097c:	2800      	cmp	r0, #0
 801097e:	d1e0      	bne.n	8010942 <__ssputs_r+0x5a>
 8010980:	6921      	ldr	r1, [r4, #16]
 8010982:	4650      	mov	r0, sl
 8010984:	f7ff feb8 	bl	80106f8 <_free_r>
 8010988:	230c      	movs	r3, #12
 801098a:	f8ca 3000 	str.w	r3, [sl]
 801098e:	89a3      	ldrh	r3, [r4, #12]
 8010990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010994:	81a3      	strh	r3, [r4, #12]
 8010996:	f04f 30ff 	mov.w	r0, #4294967295
 801099a:	e7e9      	b.n	8010970 <__ssputs_r+0x88>

0801099c <_svfiprintf_r>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	4698      	mov	r8, r3
 80109a2:	898b      	ldrh	r3, [r1, #12]
 80109a4:	061b      	lsls	r3, r3, #24
 80109a6:	b09d      	sub	sp, #116	; 0x74
 80109a8:	4607      	mov	r7, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	4614      	mov	r4, r2
 80109ae:	d50e      	bpl.n	80109ce <_svfiprintf_r+0x32>
 80109b0:	690b      	ldr	r3, [r1, #16]
 80109b2:	b963      	cbnz	r3, 80109ce <_svfiprintf_r+0x32>
 80109b4:	2140      	movs	r1, #64	; 0x40
 80109b6:	f7ff ff0b 	bl	80107d0 <_malloc_r>
 80109ba:	6028      	str	r0, [r5, #0]
 80109bc:	6128      	str	r0, [r5, #16]
 80109be:	b920      	cbnz	r0, 80109ca <_svfiprintf_r+0x2e>
 80109c0:	230c      	movs	r3, #12
 80109c2:	603b      	str	r3, [r7, #0]
 80109c4:	f04f 30ff 	mov.w	r0, #4294967295
 80109c8:	e0d0      	b.n	8010b6c <_svfiprintf_r+0x1d0>
 80109ca:	2340      	movs	r3, #64	; 0x40
 80109cc:	616b      	str	r3, [r5, #20]
 80109ce:	2300      	movs	r3, #0
 80109d0:	9309      	str	r3, [sp, #36]	; 0x24
 80109d2:	2320      	movs	r3, #32
 80109d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80109dc:	2330      	movs	r3, #48	; 0x30
 80109de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b84 <_svfiprintf_r+0x1e8>
 80109e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109e6:	f04f 0901 	mov.w	r9, #1
 80109ea:	4623      	mov	r3, r4
 80109ec:	469a      	mov	sl, r3
 80109ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f2:	b10a      	cbz	r2, 80109f8 <_svfiprintf_r+0x5c>
 80109f4:	2a25      	cmp	r2, #37	; 0x25
 80109f6:	d1f9      	bne.n	80109ec <_svfiprintf_r+0x50>
 80109f8:	ebba 0b04 	subs.w	fp, sl, r4
 80109fc:	d00b      	beq.n	8010a16 <_svfiprintf_r+0x7a>
 80109fe:	465b      	mov	r3, fp
 8010a00:	4622      	mov	r2, r4
 8010a02:	4629      	mov	r1, r5
 8010a04:	4638      	mov	r0, r7
 8010a06:	f7ff ff6f 	bl	80108e8 <__ssputs_r>
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	f000 80a9 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a12:	445a      	add	r2, fp
 8010a14:	9209      	str	r2, [sp, #36]	; 0x24
 8010a16:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 80a1 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a20:	2300      	movs	r3, #0
 8010a22:	f04f 32ff 	mov.w	r2, #4294967295
 8010a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a2a:	f10a 0a01 	add.w	sl, sl, #1
 8010a2e:	9304      	str	r3, [sp, #16]
 8010a30:	9307      	str	r3, [sp, #28]
 8010a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a36:	931a      	str	r3, [sp, #104]	; 0x68
 8010a38:	4654      	mov	r4, sl
 8010a3a:	2205      	movs	r2, #5
 8010a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a40:	4850      	ldr	r0, [pc, #320]	; (8010b84 <_svfiprintf_r+0x1e8>)
 8010a42:	f7ef fbc5 	bl	80001d0 <memchr>
 8010a46:	9a04      	ldr	r2, [sp, #16]
 8010a48:	b9d8      	cbnz	r0, 8010a82 <_svfiprintf_r+0xe6>
 8010a4a:	06d0      	lsls	r0, r2, #27
 8010a4c:	bf44      	itt	mi
 8010a4e:	2320      	movmi	r3, #32
 8010a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a54:	0711      	lsls	r1, r2, #28
 8010a56:	bf44      	itt	mi
 8010a58:	232b      	movmi	r3, #43	; 0x2b
 8010a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8010a62:	2b2a      	cmp	r3, #42	; 0x2a
 8010a64:	d015      	beq.n	8010a92 <_svfiprintf_r+0xf6>
 8010a66:	9a07      	ldr	r2, [sp, #28]
 8010a68:	4654      	mov	r4, sl
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	f04f 0c0a 	mov.w	ip, #10
 8010a70:	4621      	mov	r1, r4
 8010a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a76:	3b30      	subs	r3, #48	; 0x30
 8010a78:	2b09      	cmp	r3, #9
 8010a7a:	d94d      	bls.n	8010b18 <_svfiprintf_r+0x17c>
 8010a7c:	b1b0      	cbz	r0, 8010aac <_svfiprintf_r+0x110>
 8010a7e:	9207      	str	r2, [sp, #28]
 8010a80:	e014      	b.n	8010aac <_svfiprintf_r+0x110>
 8010a82:	eba0 0308 	sub.w	r3, r0, r8
 8010a86:	fa09 f303 	lsl.w	r3, r9, r3
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	9304      	str	r3, [sp, #16]
 8010a8e:	46a2      	mov	sl, r4
 8010a90:	e7d2      	b.n	8010a38 <_svfiprintf_r+0x9c>
 8010a92:	9b03      	ldr	r3, [sp, #12]
 8010a94:	1d19      	adds	r1, r3, #4
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	9103      	str	r1, [sp, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	bfbb      	ittet	lt
 8010a9e:	425b      	neglt	r3, r3
 8010aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8010aa4:	9307      	strge	r3, [sp, #28]
 8010aa6:	9307      	strlt	r3, [sp, #28]
 8010aa8:	bfb8      	it	lt
 8010aaa:	9204      	strlt	r2, [sp, #16]
 8010aac:	7823      	ldrb	r3, [r4, #0]
 8010aae:	2b2e      	cmp	r3, #46	; 0x2e
 8010ab0:	d10c      	bne.n	8010acc <_svfiprintf_r+0x130>
 8010ab2:	7863      	ldrb	r3, [r4, #1]
 8010ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ab6:	d134      	bne.n	8010b22 <_svfiprintf_r+0x186>
 8010ab8:	9b03      	ldr	r3, [sp, #12]
 8010aba:	1d1a      	adds	r2, r3, #4
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	9203      	str	r2, [sp, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	bfb8      	it	lt
 8010ac4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ac8:	3402      	adds	r4, #2
 8010aca:	9305      	str	r3, [sp, #20]
 8010acc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010b94 <_svfiprintf_r+0x1f8>
 8010ad0:	7821      	ldrb	r1, [r4, #0]
 8010ad2:	2203      	movs	r2, #3
 8010ad4:	4650      	mov	r0, sl
 8010ad6:	f7ef fb7b 	bl	80001d0 <memchr>
 8010ada:	b138      	cbz	r0, 8010aec <_svfiprintf_r+0x150>
 8010adc:	9b04      	ldr	r3, [sp, #16]
 8010ade:	eba0 000a 	sub.w	r0, r0, sl
 8010ae2:	2240      	movs	r2, #64	; 0x40
 8010ae4:	4082      	lsls	r2, r0
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	3401      	adds	r4, #1
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af0:	4825      	ldr	r0, [pc, #148]	; (8010b88 <_svfiprintf_r+0x1ec>)
 8010af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010af6:	2206      	movs	r2, #6
 8010af8:	f7ef fb6a 	bl	80001d0 <memchr>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d038      	beq.n	8010b72 <_svfiprintf_r+0x1d6>
 8010b00:	4b22      	ldr	r3, [pc, #136]	; (8010b8c <_svfiprintf_r+0x1f0>)
 8010b02:	bb1b      	cbnz	r3, 8010b4c <_svfiprintf_r+0x1b0>
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	3307      	adds	r3, #7
 8010b08:	f023 0307 	bic.w	r3, r3, #7
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b12:	4433      	add	r3, r6
 8010b14:	9309      	str	r3, [sp, #36]	; 0x24
 8010b16:	e768      	b.n	80109ea <_svfiprintf_r+0x4e>
 8010b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	2001      	movs	r0, #1
 8010b20:	e7a6      	b.n	8010a70 <_svfiprintf_r+0xd4>
 8010b22:	2300      	movs	r3, #0
 8010b24:	3401      	adds	r4, #1
 8010b26:	9305      	str	r3, [sp, #20]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f04f 0c0a 	mov.w	ip, #10
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b34:	3a30      	subs	r2, #48	; 0x30
 8010b36:	2a09      	cmp	r2, #9
 8010b38:	d903      	bls.n	8010b42 <_svfiprintf_r+0x1a6>
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0c6      	beq.n	8010acc <_svfiprintf_r+0x130>
 8010b3e:	9105      	str	r1, [sp, #20]
 8010b40:	e7c4      	b.n	8010acc <_svfiprintf_r+0x130>
 8010b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b46:	4604      	mov	r4, r0
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e7f0      	b.n	8010b2e <_svfiprintf_r+0x192>
 8010b4c:	ab03      	add	r3, sp, #12
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	462a      	mov	r2, r5
 8010b52:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <_svfiprintf_r+0x1f4>)
 8010b54:	a904      	add	r1, sp, #16
 8010b56:	4638      	mov	r0, r7
 8010b58:	f3af 8000 	nop.w
 8010b5c:	1c42      	adds	r2, r0, #1
 8010b5e:	4606      	mov	r6, r0
 8010b60:	d1d6      	bne.n	8010b10 <_svfiprintf_r+0x174>
 8010b62:	89ab      	ldrh	r3, [r5, #12]
 8010b64:	065b      	lsls	r3, r3, #25
 8010b66:	f53f af2d 	bmi.w	80109c4 <_svfiprintf_r+0x28>
 8010b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b6c:	b01d      	add	sp, #116	; 0x74
 8010b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b72:	ab03      	add	r3, sp, #12
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	462a      	mov	r2, r5
 8010b78:	4b05      	ldr	r3, [pc, #20]	; (8010b90 <_svfiprintf_r+0x1f4>)
 8010b7a:	a904      	add	r1, sp, #16
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	f000 f879 	bl	8010c74 <_printf_i>
 8010b82:	e7eb      	b.n	8010b5c <_svfiprintf_r+0x1c0>
 8010b84:	08011c6f 	.word	0x08011c6f
 8010b88:	08011c79 	.word	0x08011c79
 8010b8c:	00000000 	.word	0x00000000
 8010b90:	080108e9 	.word	0x080108e9
 8010b94:	08011c75 	.word	0x08011c75

08010b98 <_printf_common>:
 8010b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	4699      	mov	r9, r3
 8010ba0:	688a      	ldr	r2, [r1, #8]
 8010ba2:	690b      	ldr	r3, [r1, #16]
 8010ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	bfb8      	it	lt
 8010bac:	4613      	movlt	r3, r2
 8010bae:	6033      	str	r3, [r6, #0]
 8010bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010bb4:	4607      	mov	r7, r0
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	b10a      	cbz	r2, 8010bbe <_printf_common+0x26>
 8010bba:	3301      	adds	r3, #1
 8010bbc:	6033      	str	r3, [r6, #0]
 8010bbe:	6823      	ldr	r3, [r4, #0]
 8010bc0:	0699      	lsls	r1, r3, #26
 8010bc2:	bf42      	ittt	mi
 8010bc4:	6833      	ldrmi	r3, [r6, #0]
 8010bc6:	3302      	addmi	r3, #2
 8010bc8:	6033      	strmi	r3, [r6, #0]
 8010bca:	6825      	ldr	r5, [r4, #0]
 8010bcc:	f015 0506 	ands.w	r5, r5, #6
 8010bd0:	d106      	bne.n	8010be0 <_printf_common+0x48>
 8010bd2:	f104 0a19 	add.w	sl, r4, #25
 8010bd6:	68e3      	ldr	r3, [r4, #12]
 8010bd8:	6832      	ldr	r2, [r6, #0]
 8010bda:	1a9b      	subs	r3, r3, r2
 8010bdc:	42ab      	cmp	r3, r5
 8010bde:	dc26      	bgt.n	8010c2e <_printf_common+0x96>
 8010be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010be4:	1e13      	subs	r3, r2, #0
 8010be6:	6822      	ldr	r2, [r4, #0]
 8010be8:	bf18      	it	ne
 8010bea:	2301      	movne	r3, #1
 8010bec:	0692      	lsls	r2, r2, #26
 8010bee:	d42b      	bmi.n	8010c48 <_printf_common+0xb0>
 8010bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	47c0      	blx	r8
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	d01e      	beq.n	8010c3c <_printf_common+0xa4>
 8010bfe:	6823      	ldr	r3, [r4, #0]
 8010c00:	6922      	ldr	r2, [r4, #16]
 8010c02:	f003 0306 	and.w	r3, r3, #6
 8010c06:	2b04      	cmp	r3, #4
 8010c08:	bf02      	ittt	eq
 8010c0a:	68e5      	ldreq	r5, [r4, #12]
 8010c0c:	6833      	ldreq	r3, [r6, #0]
 8010c0e:	1aed      	subeq	r5, r5, r3
 8010c10:	68a3      	ldr	r3, [r4, #8]
 8010c12:	bf0c      	ite	eq
 8010c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c18:	2500      	movne	r5, #0
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	bfc4      	itt	gt
 8010c1e:	1a9b      	subgt	r3, r3, r2
 8010c20:	18ed      	addgt	r5, r5, r3
 8010c22:	2600      	movs	r6, #0
 8010c24:	341a      	adds	r4, #26
 8010c26:	42b5      	cmp	r5, r6
 8010c28:	d11a      	bne.n	8010c60 <_printf_common+0xc8>
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e008      	b.n	8010c40 <_printf_common+0xa8>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	4652      	mov	r2, sl
 8010c32:	4649      	mov	r1, r9
 8010c34:	4638      	mov	r0, r7
 8010c36:	47c0      	blx	r8
 8010c38:	3001      	adds	r0, #1
 8010c3a:	d103      	bne.n	8010c44 <_printf_common+0xac>
 8010c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c44:	3501      	adds	r5, #1
 8010c46:	e7c6      	b.n	8010bd6 <_printf_common+0x3e>
 8010c48:	18e1      	adds	r1, r4, r3
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	2030      	movs	r0, #48	; 0x30
 8010c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c52:	4422      	add	r2, r4
 8010c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c5c:	3302      	adds	r3, #2
 8010c5e:	e7c7      	b.n	8010bf0 <_printf_common+0x58>
 8010c60:	2301      	movs	r3, #1
 8010c62:	4622      	mov	r2, r4
 8010c64:	4649      	mov	r1, r9
 8010c66:	4638      	mov	r0, r7
 8010c68:	47c0      	blx	r8
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d0e6      	beq.n	8010c3c <_printf_common+0xa4>
 8010c6e:	3601      	adds	r6, #1
 8010c70:	e7d9      	b.n	8010c26 <_printf_common+0x8e>
	...

08010c74 <_printf_i>:
 8010c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c78:	7e0f      	ldrb	r7, [r1, #24]
 8010c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c7c:	2f78      	cmp	r7, #120	; 0x78
 8010c7e:	4691      	mov	r9, r2
 8010c80:	4680      	mov	r8, r0
 8010c82:	460c      	mov	r4, r1
 8010c84:	469a      	mov	sl, r3
 8010c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010c8a:	d807      	bhi.n	8010c9c <_printf_i+0x28>
 8010c8c:	2f62      	cmp	r7, #98	; 0x62
 8010c8e:	d80a      	bhi.n	8010ca6 <_printf_i+0x32>
 8010c90:	2f00      	cmp	r7, #0
 8010c92:	f000 80d4 	beq.w	8010e3e <_printf_i+0x1ca>
 8010c96:	2f58      	cmp	r7, #88	; 0x58
 8010c98:	f000 80c0 	beq.w	8010e1c <_printf_i+0x1a8>
 8010c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ca4:	e03a      	b.n	8010d1c <_printf_i+0xa8>
 8010ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010caa:	2b15      	cmp	r3, #21
 8010cac:	d8f6      	bhi.n	8010c9c <_printf_i+0x28>
 8010cae:	a101      	add	r1, pc, #4	; (adr r1, 8010cb4 <_printf_i+0x40>)
 8010cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010cb4:	08010d0d 	.word	0x08010d0d
 8010cb8:	08010d21 	.word	0x08010d21
 8010cbc:	08010c9d 	.word	0x08010c9d
 8010cc0:	08010c9d 	.word	0x08010c9d
 8010cc4:	08010c9d 	.word	0x08010c9d
 8010cc8:	08010c9d 	.word	0x08010c9d
 8010ccc:	08010d21 	.word	0x08010d21
 8010cd0:	08010c9d 	.word	0x08010c9d
 8010cd4:	08010c9d 	.word	0x08010c9d
 8010cd8:	08010c9d 	.word	0x08010c9d
 8010cdc:	08010c9d 	.word	0x08010c9d
 8010ce0:	08010e25 	.word	0x08010e25
 8010ce4:	08010d4d 	.word	0x08010d4d
 8010ce8:	08010ddf 	.word	0x08010ddf
 8010cec:	08010c9d 	.word	0x08010c9d
 8010cf0:	08010c9d 	.word	0x08010c9d
 8010cf4:	08010e47 	.word	0x08010e47
 8010cf8:	08010c9d 	.word	0x08010c9d
 8010cfc:	08010d4d 	.word	0x08010d4d
 8010d00:	08010c9d 	.word	0x08010c9d
 8010d04:	08010c9d 	.word	0x08010c9d
 8010d08:	08010de7 	.word	0x08010de7
 8010d0c:	682b      	ldr	r3, [r5, #0]
 8010d0e:	1d1a      	adds	r2, r3, #4
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	602a      	str	r2, [r5, #0]
 8010d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e09f      	b.n	8010e60 <_printf_i+0x1ec>
 8010d20:	6820      	ldr	r0, [r4, #0]
 8010d22:	682b      	ldr	r3, [r5, #0]
 8010d24:	0607      	lsls	r7, r0, #24
 8010d26:	f103 0104 	add.w	r1, r3, #4
 8010d2a:	6029      	str	r1, [r5, #0]
 8010d2c:	d501      	bpl.n	8010d32 <_printf_i+0xbe>
 8010d2e:	681e      	ldr	r6, [r3, #0]
 8010d30:	e003      	b.n	8010d3a <_printf_i+0xc6>
 8010d32:	0646      	lsls	r6, r0, #25
 8010d34:	d5fb      	bpl.n	8010d2e <_printf_i+0xba>
 8010d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010d3a:	2e00      	cmp	r6, #0
 8010d3c:	da03      	bge.n	8010d46 <_printf_i+0xd2>
 8010d3e:	232d      	movs	r3, #45	; 0x2d
 8010d40:	4276      	negs	r6, r6
 8010d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d46:	485a      	ldr	r0, [pc, #360]	; (8010eb0 <_printf_i+0x23c>)
 8010d48:	230a      	movs	r3, #10
 8010d4a:	e012      	b.n	8010d72 <_printf_i+0xfe>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	6820      	ldr	r0, [r4, #0]
 8010d50:	1d19      	adds	r1, r3, #4
 8010d52:	6029      	str	r1, [r5, #0]
 8010d54:	0605      	lsls	r5, r0, #24
 8010d56:	d501      	bpl.n	8010d5c <_printf_i+0xe8>
 8010d58:	681e      	ldr	r6, [r3, #0]
 8010d5a:	e002      	b.n	8010d62 <_printf_i+0xee>
 8010d5c:	0641      	lsls	r1, r0, #25
 8010d5e:	d5fb      	bpl.n	8010d58 <_printf_i+0xe4>
 8010d60:	881e      	ldrh	r6, [r3, #0]
 8010d62:	4853      	ldr	r0, [pc, #332]	; (8010eb0 <_printf_i+0x23c>)
 8010d64:	2f6f      	cmp	r7, #111	; 0x6f
 8010d66:	bf0c      	ite	eq
 8010d68:	2308      	moveq	r3, #8
 8010d6a:	230a      	movne	r3, #10
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d72:	6865      	ldr	r5, [r4, #4]
 8010d74:	60a5      	str	r5, [r4, #8]
 8010d76:	2d00      	cmp	r5, #0
 8010d78:	bfa2      	ittt	ge
 8010d7a:	6821      	ldrge	r1, [r4, #0]
 8010d7c:	f021 0104 	bicge.w	r1, r1, #4
 8010d80:	6021      	strge	r1, [r4, #0]
 8010d82:	b90e      	cbnz	r6, 8010d88 <_printf_i+0x114>
 8010d84:	2d00      	cmp	r5, #0
 8010d86:	d04b      	beq.n	8010e20 <_printf_i+0x1ac>
 8010d88:	4615      	mov	r5, r2
 8010d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8010d92:	5dc7      	ldrb	r7, [r0, r7]
 8010d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010d98:	4637      	mov	r7, r6
 8010d9a:	42bb      	cmp	r3, r7
 8010d9c:	460e      	mov	r6, r1
 8010d9e:	d9f4      	bls.n	8010d8a <_printf_i+0x116>
 8010da0:	2b08      	cmp	r3, #8
 8010da2:	d10b      	bne.n	8010dbc <_printf_i+0x148>
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	07de      	lsls	r6, r3, #31
 8010da8:	d508      	bpl.n	8010dbc <_printf_i+0x148>
 8010daa:	6923      	ldr	r3, [r4, #16]
 8010dac:	6861      	ldr	r1, [r4, #4]
 8010dae:	4299      	cmp	r1, r3
 8010db0:	bfde      	ittt	le
 8010db2:	2330      	movle	r3, #48	; 0x30
 8010db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010dbc:	1b52      	subs	r2, r2, r5
 8010dbe:	6122      	str	r2, [r4, #16]
 8010dc0:	f8cd a000 	str.w	sl, [sp]
 8010dc4:	464b      	mov	r3, r9
 8010dc6:	aa03      	add	r2, sp, #12
 8010dc8:	4621      	mov	r1, r4
 8010dca:	4640      	mov	r0, r8
 8010dcc:	f7ff fee4 	bl	8010b98 <_printf_common>
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	d14a      	bne.n	8010e6a <_printf_i+0x1f6>
 8010dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd8:	b004      	add	sp, #16
 8010dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dde:	6823      	ldr	r3, [r4, #0]
 8010de0:	f043 0320 	orr.w	r3, r3, #32
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	4833      	ldr	r0, [pc, #204]	; (8010eb4 <_printf_i+0x240>)
 8010de8:	2778      	movs	r7, #120	; 0x78
 8010dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	6829      	ldr	r1, [r5, #0]
 8010df2:	061f      	lsls	r7, r3, #24
 8010df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8010df8:	d402      	bmi.n	8010e00 <_printf_i+0x18c>
 8010dfa:	065f      	lsls	r7, r3, #25
 8010dfc:	bf48      	it	mi
 8010dfe:	b2b6      	uxthmi	r6, r6
 8010e00:	07df      	lsls	r7, r3, #31
 8010e02:	bf48      	it	mi
 8010e04:	f043 0320 	orrmi.w	r3, r3, #32
 8010e08:	6029      	str	r1, [r5, #0]
 8010e0a:	bf48      	it	mi
 8010e0c:	6023      	strmi	r3, [r4, #0]
 8010e0e:	b91e      	cbnz	r6, 8010e18 <_printf_i+0x1a4>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	f023 0320 	bic.w	r3, r3, #32
 8010e16:	6023      	str	r3, [r4, #0]
 8010e18:	2310      	movs	r3, #16
 8010e1a:	e7a7      	b.n	8010d6c <_printf_i+0xf8>
 8010e1c:	4824      	ldr	r0, [pc, #144]	; (8010eb0 <_printf_i+0x23c>)
 8010e1e:	e7e4      	b.n	8010dea <_printf_i+0x176>
 8010e20:	4615      	mov	r5, r2
 8010e22:	e7bd      	b.n	8010da0 <_printf_i+0x12c>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	6826      	ldr	r6, [r4, #0]
 8010e28:	6961      	ldr	r1, [r4, #20]
 8010e2a:	1d18      	adds	r0, r3, #4
 8010e2c:	6028      	str	r0, [r5, #0]
 8010e2e:	0635      	lsls	r5, r6, #24
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	d501      	bpl.n	8010e38 <_printf_i+0x1c4>
 8010e34:	6019      	str	r1, [r3, #0]
 8010e36:	e002      	b.n	8010e3e <_printf_i+0x1ca>
 8010e38:	0670      	lsls	r0, r6, #25
 8010e3a:	d5fb      	bpl.n	8010e34 <_printf_i+0x1c0>
 8010e3c:	8019      	strh	r1, [r3, #0]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	6123      	str	r3, [r4, #16]
 8010e42:	4615      	mov	r5, r2
 8010e44:	e7bc      	b.n	8010dc0 <_printf_i+0x14c>
 8010e46:	682b      	ldr	r3, [r5, #0]
 8010e48:	1d1a      	adds	r2, r3, #4
 8010e4a:	602a      	str	r2, [r5, #0]
 8010e4c:	681d      	ldr	r5, [r3, #0]
 8010e4e:	6862      	ldr	r2, [r4, #4]
 8010e50:	2100      	movs	r1, #0
 8010e52:	4628      	mov	r0, r5
 8010e54:	f7ef f9bc 	bl	80001d0 <memchr>
 8010e58:	b108      	cbz	r0, 8010e5e <_printf_i+0x1ea>
 8010e5a:	1b40      	subs	r0, r0, r5
 8010e5c:	6060      	str	r0, [r4, #4]
 8010e5e:	6863      	ldr	r3, [r4, #4]
 8010e60:	6123      	str	r3, [r4, #16]
 8010e62:	2300      	movs	r3, #0
 8010e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e68:	e7aa      	b.n	8010dc0 <_printf_i+0x14c>
 8010e6a:	6923      	ldr	r3, [r4, #16]
 8010e6c:	462a      	mov	r2, r5
 8010e6e:	4649      	mov	r1, r9
 8010e70:	4640      	mov	r0, r8
 8010e72:	47d0      	blx	sl
 8010e74:	3001      	adds	r0, #1
 8010e76:	d0ad      	beq.n	8010dd4 <_printf_i+0x160>
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	079b      	lsls	r3, r3, #30
 8010e7c:	d413      	bmi.n	8010ea6 <_printf_i+0x232>
 8010e7e:	68e0      	ldr	r0, [r4, #12]
 8010e80:	9b03      	ldr	r3, [sp, #12]
 8010e82:	4298      	cmp	r0, r3
 8010e84:	bfb8      	it	lt
 8010e86:	4618      	movlt	r0, r3
 8010e88:	e7a6      	b.n	8010dd8 <_printf_i+0x164>
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	4632      	mov	r2, r6
 8010e8e:	4649      	mov	r1, r9
 8010e90:	4640      	mov	r0, r8
 8010e92:	47d0      	blx	sl
 8010e94:	3001      	adds	r0, #1
 8010e96:	d09d      	beq.n	8010dd4 <_printf_i+0x160>
 8010e98:	3501      	adds	r5, #1
 8010e9a:	68e3      	ldr	r3, [r4, #12]
 8010e9c:	9903      	ldr	r1, [sp, #12]
 8010e9e:	1a5b      	subs	r3, r3, r1
 8010ea0:	42ab      	cmp	r3, r5
 8010ea2:	dcf2      	bgt.n	8010e8a <_printf_i+0x216>
 8010ea4:	e7eb      	b.n	8010e7e <_printf_i+0x20a>
 8010ea6:	2500      	movs	r5, #0
 8010ea8:	f104 0619 	add.w	r6, r4, #25
 8010eac:	e7f5      	b.n	8010e9a <_printf_i+0x226>
 8010eae:	bf00      	nop
 8010eb0:	08011c80 	.word	0x08011c80
 8010eb4:	08011c91 	.word	0x08011c91

08010eb8 <memmove>:
 8010eb8:	4288      	cmp	r0, r1
 8010eba:	b510      	push	{r4, lr}
 8010ebc:	eb01 0402 	add.w	r4, r1, r2
 8010ec0:	d902      	bls.n	8010ec8 <memmove+0x10>
 8010ec2:	4284      	cmp	r4, r0
 8010ec4:	4623      	mov	r3, r4
 8010ec6:	d807      	bhi.n	8010ed8 <memmove+0x20>
 8010ec8:	1e43      	subs	r3, r0, #1
 8010eca:	42a1      	cmp	r1, r4
 8010ecc:	d008      	beq.n	8010ee0 <memmove+0x28>
 8010ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ed6:	e7f8      	b.n	8010eca <memmove+0x12>
 8010ed8:	4402      	add	r2, r0
 8010eda:	4601      	mov	r1, r0
 8010edc:	428a      	cmp	r2, r1
 8010ede:	d100      	bne.n	8010ee2 <memmove+0x2a>
 8010ee0:	bd10      	pop	{r4, pc}
 8010ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010eea:	e7f7      	b.n	8010edc <memmove+0x24>

08010eec <_sbrk_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d06      	ldr	r5, [pc, #24]	; (8010f08 <_sbrk_r+0x1c>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	602b      	str	r3, [r5, #0]
 8010ef8:	f7f0 fc9e 	bl	8001838 <_sbrk>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_sbrk_r+0x1a>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_sbrk_r+0x1a>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	2000196c 	.word	0x2000196c

08010f0c <memcpy>:
 8010f0c:	440a      	add	r2, r1
 8010f0e:	4291      	cmp	r1, r2
 8010f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f14:	d100      	bne.n	8010f18 <memcpy+0xc>
 8010f16:	4770      	bx	lr
 8010f18:	b510      	push	{r4, lr}
 8010f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f22:	4291      	cmp	r1, r2
 8010f24:	d1f9      	bne.n	8010f1a <memcpy+0xe>
 8010f26:	bd10      	pop	{r4, pc}

08010f28 <_realloc_r>:
 8010f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	4614      	mov	r4, r2
 8010f30:	460e      	mov	r6, r1
 8010f32:	b921      	cbnz	r1, 8010f3e <_realloc_r+0x16>
 8010f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f38:	4611      	mov	r1, r2
 8010f3a:	f7ff bc49 	b.w	80107d0 <_malloc_r>
 8010f3e:	b92a      	cbnz	r2, 8010f4c <_realloc_r+0x24>
 8010f40:	f7ff fbda 	bl	80106f8 <_free_r>
 8010f44:	4625      	mov	r5, r4
 8010f46:	4628      	mov	r0, r5
 8010f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f4c:	f000 f81b 	bl	8010f86 <_malloc_usable_size_r>
 8010f50:	4284      	cmp	r4, r0
 8010f52:	4607      	mov	r7, r0
 8010f54:	d802      	bhi.n	8010f5c <_realloc_r+0x34>
 8010f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f5a:	d812      	bhi.n	8010f82 <_realloc_r+0x5a>
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	4640      	mov	r0, r8
 8010f60:	f7ff fc36 	bl	80107d0 <_malloc_r>
 8010f64:	4605      	mov	r5, r0
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d0ed      	beq.n	8010f46 <_realloc_r+0x1e>
 8010f6a:	42bc      	cmp	r4, r7
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	4631      	mov	r1, r6
 8010f70:	bf28      	it	cs
 8010f72:	463a      	movcs	r2, r7
 8010f74:	f7ff ffca 	bl	8010f0c <memcpy>
 8010f78:	4631      	mov	r1, r6
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	f7ff fbbc 	bl	80106f8 <_free_r>
 8010f80:	e7e1      	b.n	8010f46 <_realloc_r+0x1e>
 8010f82:	4635      	mov	r5, r6
 8010f84:	e7df      	b.n	8010f46 <_realloc_r+0x1e>

08010f86 <_malloc_usable_size_r>:
 8010f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f8a:	1f18      	subs	r0, r3, #4
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfbc      	itt	lt
 8010f90:	580b      	ldrlt	r3, [r1, r0]
 8010f92:	18c0      	addlt	r0, r0, r3
 8010f94:	4770      	bx	lr
	...

08010f98 <_init>:
 8010f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9a:	bf00      	nop
 8010f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f9e:	bc08      	pop	{r3}
 8010fa0:	469e      	mov	lr, r3
 8010fa2:	4770      	bx	lr

08010fa4 <_fini>:
 8010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa6:	bf00      	nop
 8010fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010faa:	bc08      	pop	{r3}
 8010fac:	469e      	mov	lr, r3
 8010fae:	4770      	bx	lr
