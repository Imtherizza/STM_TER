
STM_TER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c4  0800b6c4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b6cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000088  0800b754  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800b754  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c0b  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ccb  00000000  00000000  00045d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  0004a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c4  00000000  00000000  0004c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c0f  00000000  00000000  0004de54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024524  00000000  00000000  00073a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4cca  00000000  00000000  00097f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008104  00000000  00000000  0017cc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00184d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa24 	.word	0x0800aa24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800aa24 	.word	0x0800aa24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <bno055_init>:
#include <CoVAPSy_bno055.h>
#include "i2c.h"
// Initialisation du BNO055
void bno055_init(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af02      	add	r7, sp, #8
	* This code uses a lot of HAL. Could probably do with a simpler bare metal
	* implementation. Current performance exceeds that of the sensor, so it is
	* not a priority. But could be a fun exercise in embedded programming :)))
	******************************************************************************
	*/
	HAL_Delay(2000);
 8000b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b82:	f001 fde7 	bl	8002754 <HAL_Delay>
	donnees_Tx_i2c[0] = 0x39;
 8000b86:	2339      	movs	r3, #57	; 0x39
 8000b88:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000b8a:	bf00      	nop
 8000b8c:	489b      	ldr	r0, [pc, #620]	; (8000dfc <bno055_init+0x284>)
 8000b8e:	f003 ff75 	bl	8004a7c <HAL_I2C_GetState>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b20      	cmp	r3, #32
 8000b96:	d1f9      	bne.n	8000b8c <bno055_init+0x14>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2150      	movs	r1, #80	; 0x50
 8000ba4:	4895      	ldr	r0, [pc, #596]	; (8000dfc <bno055_init+0x284>)
 8000ba6:	f003 fc6b 	bl	8004480 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000baa:	bf00      	nop
 8000bac:	4893      	ldr	r0, [pc, #588]	; (8000dfc <bno055_init+0x284>)
 8000bae:	f003 ff65 	bl	8004a7c <HAL_I2C_GetState>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d1f9      	bne.n	8000bac <bno055_init+0x34>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000bb8:	463a      	mov	r2, r7
 8000bba:	2314      	movs	r3, #20
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2150      	movs	r1, #80	; 0x50
 8000bc2:	488e      	ldr	r0, [pc, #568]	; (8000dfc <bno055_init+0x284>)
 8000bc4:	f003 fd50 	bl	8004668 <HAL_I2C_Master_Receive>

	donnees_Tx_i2c[0] = 0x37;
 8000bc8:	2337      	movs	r3, #55	; 0x37
 8000bca:	713b      	strb	r3, [r7, #4]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000bcc:	bf00      	nop
 8000bce:	488b      	ldr	r0, [pc, #556]	; (8000dfc <bno055_init+0x284>)
 8000bd0:	f003 ff54 	bl	8004a7c <HAL_I2C_GetState>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	d1f9      	bne.n	8000bce <bno055_init+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2301      	movs	r3, #1
 8000be4:	2150      	movs	r1, #80	; 0x50
 8000be6:	4885      	ldr	r0, [pc, #532]	; (8000dfc <bno055_init+0x284>)
 8000be8:	f003 fc4a 	bl	8004480 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000bec:	bf00      	nop
 8000bee:	4883      	ldr	r0, [pc, #524]	; (8000dfc <bno055_init+0x284>)
 8000bf0:	f003 ff44 	bl	8004a7c <HAL_I2C_GetState>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b20      	cmp	r3, #32
 8000bf8:	d1f9      	bne.n	8000bee <bno055_init+0x76>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000bfa:	463a      	mov	r2, r7
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2150      	movs	r1, #80	; 0x50
 8000c04:	487d      	ldr	r0, [pc, #500]	; (8000dfc <bno055_init+0x284>)
 8000c06:	f003 fd2f 	bl	8004668 <HAL_I2C_Master_Receive>



	donnees_Tx_i2c[0] = 0x3F;
 8000c0a:	233f      	movs	r3, #63	; 0x3f
 8000c0c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)		;
 8000c12:	bf00      	nop
 8000c14:	4879      	ldr	r0, [pc, #484]	; (8000dfc <bno055_init+0x284>)
 8000c16:	f003 ff31 	bl	8004a7c <HAL_I2C_GetState>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b20      	cmp	r3, #32
 8000c1e:	d1f9      	bne.n	8000c14 <bno055_init+0x9c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c20:	1d3a      	adds	r2, r7, #4
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	2150      	movs	r1, #80	; 0x50
 8000c2c:	4873      	ldr	r0, [pc, #460]	; (8000dfc <bno055_init+0x284>)
 8000c2e:	f003 fc27 	bl	8004480 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000c32:	bf00      	nop
 8000c34:	4871      	ldr	r0, [pc, #452]	; (8000dfc <bno055_init+0x284>)
 8000c36:	f003 ff21 	bl	8004a7c <HAL_I2C_GetState>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d1f9      	bne.n	8000c34 <bno055_init+0xbc>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 20);
 8000c40:	463a      	mov	r2, r7
 8000c42:	2314      	movs	r3, #20
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	2150      	movs	r1, #80	; 0x50
 8000c4a:	486c      	ldr	r0, [pc, #432]	; (8000dfc <bno055_init+0x284>)
 8000c4c:	f003 fd0c 	bl	8004668 <HAL_I2C_Master_Receive>

	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f003 fb69 	bl	800432c <HAL_GPIO_TogglePin>


	HAL_Delay(800); //delai 2000 ms
 8000c5a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c5e:	f001 fd79 	bl	8002754 <HAL_Delay>

	// A envoyer lors du premier test
	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000c62:	2307      	movs	r3, #7
 8000c64:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c6a:	bf00      	nop
 8000c6c:	4863      	ldr	r0, [pc, #396]	; (8000dfc <bno055_init+0x284>)
 8000c6e:	f003 ff05 	bl	8004a7c <HAL_I2C_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d1f9      	bne.n	8000c6c <bno055_init+0xf4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2302      	movs	r3, #2
 8000c82:	2150      	movs	r1, #80	; 0x50
 8000c84:	485d      	ldr	r0, [pc, #372]	; (8000dfc <bno055_init+0x284>)
 8000c86:	f003 fbfb 	bl	8004480 <HAL_I2C_Master_Transmit>


	donnees_Tx_i2c[0] = ACC_CONF;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x08;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000c92:	bf00      	nop
 8000c94:	4859      	ldr	r0, [pc, #356]	; (8000dfc <bno055_init+0x284>)
 8000c96:	f003 fef1 	bl	8004a7c <HAL_I2C_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d1f9      	bne.n	8000c94 <bno055_init+0x11c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000ca0:	1d3a      	adds	r2, r7, #4
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	4853      	ldr	r0, [pc, #332]	; (8000dfc <bno055_init+0x284>)
 8000cae:	f003 fbe7 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_0;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x23;
 8000cb6:	2323      	movs	r3, #35	; 0x23
 8000cb8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000cba:	bf00      	nop
 8000cbc:	484f      	ldr	r0, [pc, #316]	; (8000dfc <bno055_init+0x284>)
 8000cbe:	f003 fedd 	bl	8004a7c <HAL_I2C_GetState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b20      	cmp	r3, #32
 8000cc6:	d1f9      	bne.n	8000cbc <bno055_init+0x144>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	2150      	movs	r1, #80	; 0x50
 8000cd4:	4849      	ldr	r0, [pc, #292]	; (8000dfc <bno055_init+0x284>)
 8000cd6:	f003 fbd3 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = GYR_CONF_1;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000ce2:	bf00      	nop
 8000ce4:	4845      	ldr	r0, [pc, #276]	; (8000dfc <bno055_init+0x284>)
 8000ce6:	f003 fec9 	bl	8004a7c <HAL_I2C_GetState>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b20      	cmp	r3, #32
 8000cee:	d1f9      	bne.n	8000ce4 <bno055_init+0x16c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	2150      	movs	r1, #80	; 0x50
 8000cfc:	483f      	ldr	r0, [pc, #252]	; (8000dfc <bno055_init+0x284>)
 8000cfe:	f003 fbbf 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MAG_CONF;
 8000d02:	2309      	movs	r3, #9
 8000d04:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x1B;
 8000d06:	231b      	movs	r3, #27
 8000d08:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d0a:	bf00      	nop
 8000d0c:	483b      	ldr	r0, [pc, #236]	; (8000dfc <bno055_init+0x284>)
 8000d0e:	f003 feb5 	bl	8004a7c <HAL_I2C_GetState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d1f9      	bne.n	8000d0c <bno055_init+0x194>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2302      	movs	r3, #2
 8000d22:	2150      	movs	r1, #80	; 0x50
 8000d24:	4835      	ldr	r0, [pc, #212]	; (8000dfc <bno055_init+0x284>)
 8000d26:	f003 fbab 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PAGE_SWAP;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d32:	bf00      	nop
 8000d34:	4831      	ldr	r0, [pc, #196]	; (8000dfc <bno055_init+0x284>)
 8000d36:	f003 fea1 	bl	8004a7c <HAL_I2C_GetState>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d1f9      	bne.n	8000d34 <bno055_init+0x1bc>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d40:	1d3a      	adds	r2, r7, #4
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	2150      	movs	r1, #80	; 0x50
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <bno055_init+0x284>)
 8000d4e:	f003 fb97 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = TEMP_SOURCE;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000d56:	2301      	movs	r3, #1
 8000d58:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d5a:	bf00      	nop
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <bno055_init+0x284>)
 8000d5e:	f003 fe8d 	bl	8004a7c <HAL_I2C_GetState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b20      	cmp	r3, #32
 8000d66:	d1f9      	bne.n	8000d5c <bno055_init+0x1e4>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d68:	1d3a      	adds	r2, r7, #4
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2302      	movs	r3, #2
 8000d72:	2150      	movs	r1, #80	; 0x50
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <bno055_init+0x284>)
 8000d76:	f003 fb83 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = UNIT_SEL;
 8000d7a:	233b      	movs	r3, #59	; 0x3b
 8000d7c:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x01;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000d82:	bf00      	nop
 8000d84:	481d      	ldr	r0, [pc, #116]	; (8000dfc <bno055_init+0x284>)
 8000d86:	f003 fe79 	bl	8004a7c <HAL_I2C_GetState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	d1f9      	bne.n	8000d84 <bno055_init+0x20c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000d90:	1d3a      	adds	r2, r7, #4
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	2150      	movs	r1, #80	; 0x50
 8000d9c:	4817      	ldr	r0, [pc, #92]	; (8000dfc <bno055_init+0x284>)
 8000d9e:	f003 fb6f 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = PWR_MODE;
 8000da2:	233e      	movs	r3, #62	; 0x3e
 8000da4:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000daa:	bf00      	nop
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <bno055_init+0x284>)
 8000dae:	f003 fe65 	bl	8004a7c <HAL_I2C_GetState>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d1f9      	bne.n	8000dac <bno055_init+0x234>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000db8:	1d3a      	adds	r2, r7, #4
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	2150      	movs	r1, #80	; 0x50
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <bno055_init+0x284>)
 8000dc6:	f003 fb5b 	bl	8004480 <HAL_I2C_Master_Transmit>

	donnees_Tx_i2c[0] = MODE_REG;
 8000dca:	233d      	movs	r3, #61	; 0x3d
 8000dcc:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1] = FUSION_MODE;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000dd2:	bf00      	nop
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <bno055_init+0x284>)
 8000dd6:	f003 fe51 	bl	8004a7c <HAL_I2C_GetState>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d1f9      	bne.n	8000dd4 <bno055_init+0x25c>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2302      	movs	r3, #2
 8000dea:	2150      	movs	r1, #80	; 0x50
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <bno055_init+0x284>)
 8000dee:	f003 fb47 	bl	8004480 <HAL_I2C_Master_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000150 	.word	0x20000150

08000e00 <bno055_lecture_16bits>:

int16_t bno055_lecture_16bits(uint8_t num_registre) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[1];
	uint8_t donnees_Rx_i2c[2];
	donnees_Tx_i2c[0] = num_registre;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	733b      	strb	r3, [r7, #12]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000e0e:	bf00      	nop
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e12:	f003 fe33 	bl	8004a7c <HAL_I2C_GetState>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	d1f9      	bne.n	8000e10 <bno055_lecture_16bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000e1c:	f107 020c 	add.w	r2, r7, #12
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	2150      	movs	r1, #80	; 0x50
 8000e2a:	4810      	ldr	r0, [pc, #64]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e2c:	f003 fb28 	bl	8004480 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000e30:	bf00      	nop
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e34:	f003 fe22 	bl	8004a7c <HAL_I2C_GetState>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b20      	cmp	r3, #32
 8000e3c:	d1f9      	bne.n	8000e32 <bno055_lecture_16bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	2, 1);
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	2301      	movs	r3, #1
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	2150      	movs	r1, #80	; 0x50
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <bno055_lecture_16bits+0x6c>)
 8000e4c:	f003 fc0c 	bl	8004668 <HAL_I2C_Master_Receive>
	return ((uint16_t)(donnees_Rx_i2c[1]<<8) + donnees_Rx_i2c[0]);
 8000e50:	7a7b      	ldrb	r3, [r7, #9]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	7a3b      	ldrb	r3, [r7, #8]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b21b      	sxth	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000150 	.word	0x20000150

08000e70 <buzzer_start_frequency_Hz>:


#include "CoVAPSy_buzzer.h"

//Periode max 65 535 µs => Frequence entre 15 et 1 MHz
void buzzer_start_frequency_Hz(float frequency_Hz){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t periode_buzzer;
	periode_buzzer = FREQ_TIMER_6/frequency_Hz;
 8000e7a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000ed4 <buzzer_start_frequency_Hz+0x64>
 8000e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8a:	ee17 3a90 	vmov	r3, s15
 8000e8e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e92:	f005 ff77 	bl	8006d84 <HAL_TIM_Base_Stop_IT>
	htim6.Instance = TIM6;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <buzzer_start_frequency_Hz+0x6c>)
 8000e9a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000e9e:	221f      	movs	r2, #31
 8000ea0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = periode_buzzer;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000eb6:	f005 fe6d 	bl	8006b94 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <buzzer_start_frequency_Hz+0x54>
	{
	    Error_Handler();
 8000ec0:	f000 ff22 	bl	8001d08 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <buzzer_start_frequency_Hz+0x68>)
 8000ec6:	f005 ff09 	bl	8006cdc <HAL_TIM_Base_Start_IT>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	49742400 	.word	0x49742400
 8000ed8:	200003fc 	.word	0x200003fc
 8000edc:	40001000 	.word	0x40001000

08000ee0 <buzzer_start>:

void buzzer_start(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <buzzer_start+0x10>)
 8000ee6:	f005 fef9 	bl	8006cdc <HAL_TIM_Base_Start_IT>
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003fc 	.word	0x200003fc

08000ef4 <buzzer_stop>:

void buzzer_stop(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <buzzer_stop+0x10>)
 8000efa:	f005 ff43 	bl	8006d84 <HAL_TIM_Base_Stop_IT>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200003fc 	.word	0x200003fc

08000f08 <buzzer_gamme>:

void buzzer_gamme(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	buzzer_start_frequency_Hz(659);
 8000f0c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000f60 <buzzer_gamme+0x58>
 8000f10:	f7ff ffae 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(320);
 8000f14:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000f18:	f001 fc1c 	bl	8002754 <HAL_Delay>
	buzzer_start_frequency_Hz(1046);
 8000f1c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f64 <buzzer_gamme+0x5c>
 8000f20:	f7ff ffa6 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000f24:	20c8      	movs	r0, #200	; 0xc8
 8000f26:	f001 fc15 	bl	8002754 <HAL_Delay>
	buzzer_start_frequency_Hz(988);
 8000f2a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000f68 <buzzer_gamme+0x60>
 8000f2e:	f7ff ff9f 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000f32:	20c8      	movs	r0, #200	; 0xc8
 8000f34:	f001 fc0e 	bl	8002754 <HAL_Delay>
	buzzer_start_frequency_Hz(587);
 8000f38:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000f6c <buzzer_gamme+0x64>
 8000f3c:	f7ff ff98 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f001 fc07 	bl	8002754 <HAL_Delay>
	buzzer_start_frequency_Hz(659);
 8000f46:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000f60 <buzzer_gamme+0x58>
 8000f4a:	f7ff ff91 	bl	8000e70 <buzzer_start_frequency_Hz>
	HAL_Delay(70);
 8000f4e:	2046      	movs	r0, #70	; 0x46
 8000f50:	f001 fc00 	bl	8002754 <HAL_Delay>
	HAL_TIM_Base_Stop_IT(&htim6);
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <buzzer_gamme+0x68>)
 8000f56:	f005 ff15 	bl	8006d84 <HAL_TIM_Base_Stop_IT>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	4424c000 	.word	0x4424c000
 8000f64:	4482c000 	.word	0x4482c000
 8000f68:	44770000 	.word	0x44770000
 8000f6c:	4412c000 	.word	0x4412c000
 8000f70:	200003fc 	.word	0x200003fc

08000f74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000f8c:	4a37      	ldr	r2, [pc, #220]	; (800106c <MX_ADC1_Init+0xf8>)
 8000f8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f90:	4b35      	ldr	r3, [pc, #212]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <MX_ADC1_Init+0xf4>)
 8000fee:	f001 fd9d 	bl	8002b2c <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000ff8:	f000 fe86 	bl	8001d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_ADC1_Init+0xfc>)
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001000:	2306      	movs	r3, #6
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001008:	237f      	movs	r3, #127	; 0x7f
 800100a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100c:	2304      	movs	r3, #4
 800100e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_ADC1_Init+0xf4>)
 800101a:	f002 f801 	bl	8003020 <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001024:	f000 fe70 	bl	8001d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_ADC1_Init+0x100>)
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800102c:	230c      	movs	r3, #12
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_ADC1_Init+0xf4>)
 8001036:	f001 fff3 	bl	8003020 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001040:	f000 fe62 	bl	8001d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_ADC1_Init+0x104>)
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001048:	2312      	movs	r3, #18
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0xf4>)
 8001052:	f001 ffe5 	bl	8003020 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800105c:	f000 fe54 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000a4 	.word	0x200000a4
 800106c:	50040000 	.word	0x50040000
 8001070:	19200040 	.word	0x19200040
 8001074:	21800100 	.word	0x21800100
 8001078:	25b00200 	.word	0x25b00200

0800107c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09e      	sub	sp, #120	; 0x78
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2254      	movs	r2, #84	; 0x54
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f009 f83d 	bl	800a11c <memset>
  if(adcHandle->Instance==ADC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_ADC_MspInit+0x118>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d16e      	bne.n	800118a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010c0:	2310      	movs	r3, #16
 80010c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c4:	2307      	movs	r3, #7
 80010c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 feec 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010e6:	f000 fe0f 	bl	8001d08 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 80010f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_ADC_MspInit+0x11c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800111a:	231a      	movs	r3, #26
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800111e:	230b      	movs	r3, #11
 8001120:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f002 ff7a 	bl	8004028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_ADC_MspInit+0x124>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_MspInit+0x120>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_ADC_MspInit+0x120>)
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x120>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001164:	2220      	movs	r2, #32
 8001166:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_ADC_MspInit+0x120>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001170:	f002 fd62 	bl	8003c38 <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800117a:	f000 fdc5 	bl	8001d08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001182:	64da      	str	r2, [r3, #76]	; 0x4c
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_ADC_MspInit+0x120>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3778      	adds	r7, #120	; 0x78
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	50040000 	.word	0x50040000
 8001198:	40021000 	.word	0x40021000
 800119c:	20000108 	.word	0x20000108
 80011a0:	40020008 	.word	0x40020008

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <MX_DMA_Init+0x70>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6493      	str	r3, [r2, #72]	; 0x48
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_DMA_Init+0x70>)
 80011b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA_Init+0x70>)
 80011c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x70>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6493      	str	r3, [r2, #72]	; 0x48
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x70>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fcf3 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f002 fd0c 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	; 0x38
 80011f0:	f002 fceb 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80011f4:	2038      	movs	r0, #56	; 0x38
 80011f6:	f002 fd04 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2039      	movs	r0, #57	; 0x39
 8001200:	f002 fce3 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001204:	2039      	movs	r0, #57	; 0x39
 8001206:	f002 fcfc 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <MX_GPIO_Init+0x110>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <MX_GPIO_Init+0x110>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <MX_GPIO_Init+0x110>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <MX_GPIO_Init+0x110>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a37      	ldr	r2, [pc, #220]	; (8001328 <MX_GPIO_Init+0x110>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <MX_GPIO_Init+0x110>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <MX_GPIO_Init+0x110>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a31      	ldr	r2, [pc, #196]	; (8001328 <MX_GPIO_Init+0x110>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <MX_GPIO_Init+0x110>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2184      	movs	r1, #132	; 0x84
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f003 f83d 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2102      	movs	r1, #2
 8001286:	4829      	ldr	r0, [pc, #164]	; (800132c <MX_GPIO_Init+0x114>)
 8001288:	f003 f838 	bl	80042fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800128c:	2384      	movs	r3, #132	; 0x84
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f002 febf 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 80012aa:	2301      	movs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	481b      	ldr	r0, [pc, #108]	; (800132c <MX_GPIO_Init+0x114>)
 80012be:	f002 feb3 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_GPIO_Init+0x114>)
 80012da:	f002 fea5 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP1_Pin;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f002 fe97 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800130c:	2303      	movs	r3, #3
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f002 fe85 	bl	8004028 <HAL_GPIO_Init>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_I2C1_Init+0x74>)
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <MX_I2C1_Init+0x7c>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_I2C1_Init+0x74>)
 800136c:	f002 fff8 	bl	8004360 <HAL_I2C_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001376:	f000 fcc7 	bl	8001d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <MX_I2C1_Init+0x74>)
 800137e:	f003 fe57 	bl	8005030 <HAL_I2CEx_ConfigAnalogFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001388:	f000 fcbe 	bl	8001d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001390:	f003 fe99 	bl	80050c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 fcb5 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000150 	.word	0x20000150
 80013a8:	40005400 	.word	0x40005400
 80013ac:	00707cbb 	.word	0x00707cbb

080013b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09e      	sub	sp, #120	; 0x78
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2254      	movs	r2, #84	; 0x54
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f008 fea3 	bl	800a11c <memset>
  if(i2cHandle->Instance==I2C1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_I2C_MspInit+0xa4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d135      	bne.n	800144c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fd63 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013f8:	f000 fc86 	bl	8001d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001414:	23c0      	movs	r3, #192	; 0xc0
 8001416:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001418:	2312      	movs	r3, #18
 800141a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001424:	2304      	movs	r3, #4
 8001426:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800142c:	4619      	mov	r1, r3
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_I2C_MspInit+0xac>)
 8001430:	f002 fdfa 	bl	8004028 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_I2C_MspInit+0xa8>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800144c:	bf00      	nop
 800144e:	3778      	adds	r7, #120	; 0x78
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400

08001460 <CRC_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void CRC_Init(void) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

	//Enable CRC clock, then reset CRC buffer.
    __HAL_RCC_CRC_CLK_ENABLE();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <CRC_Init+0x38>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <CRC_Init+0x38>)
 800146c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001470:	6493      	str	r3, [r2, #72]	; 0x48
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <CRC_Init+0x38>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
    CRC->CR |= CRC_CR_RESET;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <CRC_Init+0x3c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <CRC_Init+0x3c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6093      	str	r3, [r2, #8]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40023000 	.word	0x40023000

080014a0 <SRF10_Init>:


void SRF10_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
	//Set correct ranges.
	uint8_t donnees_Tx_i2c[2];
	donnees_Tx_i2c[0]=0x02;
 80014a6:	2302      	movs	r3, #2
 80014a8:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0xB;
 80014aa:	230b      	movs	r3, #11
 80014ac:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80014ae:	bf00      	nop
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <SRF10_Init+0x60>)
 80014b2:	f003 fae3 	bl	8004a7c <HAL_I2C_GetState>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d1f9      	bne.n	80014b0 <SRF10_Init+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	21e0      	movs	r1, #224	; 0xe0
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <SRF10_Init+0x60>)
 80014ca:	f002 ffd9 	bl	8004480 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

	donnees_Tx_i2c[0]=0x01;
 80014ce:	2301      	movs	r3, #1
 80014d0:	713b      	strb	r3, [r7, #4]
	donnees_Tx_i2c[1]=0x09;
 80014d2:	2309      	movs	r3, #9
 80014d4:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80014d6:	bf00      	nop
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <SRF10_Init+0x60>)
 80014da:	f003 facf 	bl	8004a7c <HAL_I2C_GetState>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d1f9      	bne.n	80014d8 <SRF10_Init+0x38>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000); // HAL should really be replaced by direct register access.
 80014e4:	1d3a      	adds	r2, r7, #4
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2302      	movs	r3, #2
 80014ee:	21e0      	movs	r1, #224	; 0xe0
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <SRF10_Init+0x60>)
 80014f2:	f002 ffc5 	bl	8004480 <HAL_I2C_Master_Transmit>
//	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
//	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 1, 1);

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000150 	.word	0x20000150

08001504 <u8g_Delay>:




uint8_t control =0;
void u8g_Delay(uint16_t val) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(val);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f91f 	bl	8002754 <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
    static uint32_t i, j;
    static uint32_t freq;
    freq = HAL_RCC_GetSysClockFreq() / 1000000;
 800152a:	f004 fba1 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800152e:	4603      	mov	r3, r0
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <u8g_xMicroDelay+0x6c>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <u8g_xMicroDelay+0x70>)
 800153a:	6013      	str	r3, [r2, #0]

    for (i = 0; i < val;) {
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <u8g_xMicroDelay+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e018      	b.n	8001576 <u8g_xMicroDelay+0x56>
        for (j = 0; j < freq; ++j) {
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <u8g_xMicroDelay+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e009      	b.n	8001560 <u8g_xMicroDelay+0x40>
            ++j;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <u8g_xMicroDelay+0x78>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <u8g_xMicroDelay+0x78>)
 8001554:	6013      	str	r3, [r2, #0]
        for (j = 0; j < freq; ++j) {
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <u8g_xMicroDelay+0x78>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <u8g_xMicroDelay+0x78>)
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <u8g_xMicroDelay+0x78>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <u8g_xMicroDelay+0x70>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3ef      	bcc.n	800154c <u8g_xMicroDelay+0x2c>
        }
        ++i;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <u8g_xMicroDelay+0x74>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <u8g_xMicroDelay+0x74>)
 8001574:	6013      	str	r3, [r2, #0]
    for (i = 0; i < val;) {
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <u8g_xMicroDelay+0x74>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8e1      	bhi.n	8001544 <u8g_xMicroDelay+0x24>
    }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	431bde83 	.word	0x431bde83
 8001590:	2000020c 	.word	0x2000020c
 8001594:	20000210 	.word	0x20000210
 8001598:	20000214 	.word	0x20000214

0800159c <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ffbd 	bl	8001520 <u8g_xMicroDelay>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}

080015aa <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(10);
 80015ae:	200a      	movs	r0, #10
 80015b0:	f7ff ffb6 	bl	8001520 <u8g_xMicroDelay>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <u8g_com_arm_stm32_sh_i2c_fn>:

uint8_t u8g_com_arm_stm32_sh_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	72fb      	strb	r3, [r7, #11]
 80015c6:	4613      	mov	r3, r2
 80015c8:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d845      	bhi.n	800165c <u8g_com_arm_stm32_sh_i2c_fn+0xa4>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <u8g_com_arm_stm32_sh_i2c_fn+0x20>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	0800165d 	.word	0x0800165d
 80015dc:	080015f9 	.word	0x080015f9
 80015e0:	080015ff 	.word	0x080015ff
 80015e4:	0800165d 	.word	0x0800165d
 80015e8:	0800165d 	.word	0x0800165d
 80015ec:	08001619 	.word	0x08001619
 80015f0:	0800163b 	.word	0x0800163b
 80015f4:	0800163b 	.word	0x0800163b
    case U8G_COM_MSG_STOP:
        break;

    case U8G_COM_MSG_INIT:
        u8g_MicroDelay();
 80015f8:	f7ff ffd0 	bl	800159c <u8g_MicroDelay>
        break;
 80015fc:	e02e      	b.n	800165c <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_ADDRESS:
        if (arg_val == 0) {
 80015fe:	7abb      	ldrb	r3, [r7, #10]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <u8g_com_arm_stm32_sh_i2c_fn+0x54>
            control = 0;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e002      	b.n	8001612 <u8g_com_arm_stm32_sh_i2c_fn+0x5a>
        } else {
            control = 0x40;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	701a      	strb	r2, [r3, #0]
        }
        u8g_10MicroDelay();
 8001612:	f7ff ffca 	bl	80015aa <u8g_10MicroDelay>
        break;
 8001616:	e021      	b.n	800165c <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_BYTE: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, &arg_val, 1, 10000);
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2301      	movs	r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f107 030a 	add.w	r3, r7, #10
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	2178      	movs	r1, #120	; 0x78
 8001632:	480e      	ldr	r0, [pc, #56]	; (800166c <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8001634:	f003 f90e 	bl	8004854 <HAL_I2C_Mem_Write>
    }
        break;
 8001638:	e010      	b.n	800165c <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, arg_ptr, arg_val, 10000);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b29a      	uxth	r2, r3
 8001640:	7abb      	ldrb	r3, [r7, #10]
 8001642:	b29b      	uxth	r3, r3
 8001644:	f242 7110 	movw	r1, #10000	; 0x2710
 8001648:	9102      	str	r1, [sp, #8]
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	2178      	movs	r1, #120	; 0x78
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8001656:	f003 f8fd 	bl	8004854 <HAL_I2C_Mem_Write>
    }

        break;
 800165a:	bf00      	nop
    }
    return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000208 	.word	0x20000208
 800166c:	20000150 	.word	0x20000150

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b0a0      	sub	sp, #128	; 0x80
 8001674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001676:	f000 fff8 	bl	800266a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 fa2d 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167e:	f7ff fdcb 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8001682:	f7ff fd8f 	bl	80011a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001686:	f7ff fc75 	bl	8000f74 <MX_ADC1_Init>
  MX_SPI3_Init();
 800168a:	f000 fb43 	bl	8001d14 <MX_SPI3_Init>
  MX_TIM1_Init();
 800168e:	f000 fce1 	bl	8002054 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001692:	f000 ff39 	bl	8002508 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001696:	f000 fd97 	bl	80021c8 <MX_TIM2_Init>
  MX_I2C1_Init();
 800169a:	f7ff fe49 	bl	8001330 <MX_I2C1_Init>
  MX_TIM6_Init();
 800169e:	f000 fe03 	bl	80022a8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80016a2:	f000 fe37 	bl	8002314 <MX_TIM7_Init>
//  MX_CRC_Init();


  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80016a6:	48b8      	ldr	r0, [pc, #736]	; (8001988 <main+0x318>)
 80016a8:	f005 fb18 	bl	8006cdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	48b6      	ldr	r0, [pc, #728]	; (8001988 <main+0x318>)
 80016b0:	f005 fc5a 	bl	8006f68 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 80016b4:	48b5      	ldr	r0, [pc, #724]	; (800198c <main+0x31c>)
 80016b6:	f005 fac5 	bl	8006c44 <HAL_TIM_Base_Start>

  buzzer_start();
 80016ba:	f7ff fc11 	bl	8000ee0 <buzzer_start>
  buzzer_gamme();
 80016be:	f7ff fc23 	bl	8000f08 <buzzer_gamme>

  CRC_Init();
 80016c2:	f7ff fecd 	bl	8001460 <CRC_Init>

  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f002 fe2e 	bl	800432c <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80016d0:	2104      	movs	r1, #4
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f002 fe29 	bl	800432c <HAL_GPIO_TogglePin>
  HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f001 f83a 	bl	8002754 <HAL_Delay>
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f002 fe21 	bl	800432c <HAL_GPIO_TogglePin>


  bno055_init();
 80016ea:	f7ff fa45 	bl	8000b78 <bno055_init>
  SRF10_Init();
 80016ee:	f7ff fed7 	bl	80014a0 <SRF10_Init>

  u8g_InitComFn(&u8g, &u8g_dev_sh1106_128x64_i2c, u8g_com_arm_stm32_sh_i2c_fn);
 80016f2:	4aa7      	ldr	r2, [pc, #668]	; (8001990 <main+0x320>)
 80016f4:	49a7      	ldr	r1, [pc, #668]	; (8001994 <main+0x324>)
 80016f6:	48a8      	ldr	r0, [pc, #672]	; (8001998 <main+0x328>)
 80016f8:	f008 f9f1 	bl	8009ade <u8g_InitComFn>
  u8g_Begin(&u8g);
 80016fc:	48a6      	ldr	r0, [pc, #664]	; (8001998 <main+0x328>)
 80016fe:	f008 f9d7 	bl	8009ab0 <u8g_Begin>

  tick_p = HAL_GetTick();
 8001702:	f001 f81b 	bl	800273c <HAL_GetTick>
 8001706:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  u8g_FirstPage(&u8g);
 8001708:	48a3      	ldr	r0, [pc, #652]	; (8001998 <main+0x328>)
 800170a:	f008 fa00 	bl	8009b0e <u8g_FirstPage>
	do {
		u8g_SetFont(&u8g, u8g_font_profont12);
 800170e:	49a3      	ldr	r1, [pc, #652]	; (800199c <main+0x32c>)
 8001710:	48a1      	ldr	r0, [pc, #644]	; (8001998 <main+0x328>)
 8001712:	f008 f879 	bl	8009808 <u8g_SetFont>
		sprintf(text,"----------------------");
 8001716:	463b      	mov	r3, r7
 8001718:	49a1      	ldr	r1, [pc, #644]	; (80019a0 <main+0x330>)
 800171a:	4618      	mov	r0, r3
 800171c:	f008 fcde 	bl	800a0dc <siprintf>
		u8g_DrawStr(&u8g, 0, 12,  text);
 8001720:	463b      	mov	r3, r7
 8001722:	220c      	movs	r2, #12
 8001724:	2100      	movs	r1, #0
 8001726:	489c      	ldr	r0, [pc, #624]	; (8001998 <main+0x328>)
 8001728:	f007 ffa8 	bl	800967c <u8g_DrawStr>
		sprintf(text,"   Quand je pense a   ");
 800172c:	463b      	mov	r3, r7
 800172e:	499d      	ldr	r1, [pc, #628]	; (80019a4 <main+0x334>)
 8001730:	4618      	mov	r0, r3
 8001732:	f008 fcd3 	bl	800a0dc <siprintf>
		u8g_DrawStr(&u8g, 0, 24,  text);
 8001736:	463b      	mov	r3, r7
 8001738:	2218      	movs	r2, #24
 800173a:	2100      	movs	r1, #0
 800173c:	4896      	ldr	r0, [pc, #600]	; (8001998 <main+0x328>)
 800173e:	f007 ff9d 	bl	800967c <u8g_DrawStr>
		sprintf(text,"     toi, je suis     ");
 8001742:	463b      	mov	r3, r7
 8001744:	4998      	ldr	r1, [pc, #608]	; (80019a8 <main+0x338>)
 8001746:	4618      	mov	r0, r3
 8001748:	f008 fcc8 	bl	800a0dc <siprintf>
		u8g_DrawStr(&u8g, 0, 36,  text);
 800174c:	463b      	mov	r3, r7
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	4891      	ldr	r0, [pc, #580]	; (8001998 <main+0x328>)
 8001754:	f007 ff92 	bl	800967c <u8g_DrawStr>
		sprintf(text,"        patate        ");
 8001758:	463b      	mov	r3, r7
 800175a:	4994      	ldr	r1, [pc, #592]	; (80019ac <main+0x33c>)
 800175c:	4618      	mov	r0, r3
 800175e:	f008 fcbd 	bl	800a0dc <siprintf>
		u8g_DrawStr(&u8g, 0, 48,  text);
 8001762:	463b      	mov	r3, r7
 8001764:	2230      	movs	r2, #48	; 0x30
 8001766:	2100      	movs	r1, #0
 8001768:	488b      	ldr	r0, [pc, #556]	; (8001998 <main+0x328>)
 800176a:	f007 ff87 	bl	800967c <u8g_DrawStr>
		sprintf(text,"----------------------");
 800176e:	463b      	mov	r3, r7
 8001770:	498b      	ldr	r1, [pc, #556]	; (80019a0 <main+0x330>)
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fcb2 	bl	800a0dc <siprintf>
		u8g_DrawStr(&u8g, 0, 60,  text);
 8001778:	463b      	mov	r3, r7
 800177a:	223c      	movs	r2, #60	; 0x3c
 800177c:	2100      	movs	r1, #0
 800177e:	4886      	ldr	r0, [pc, #536]	; (8001998 <main+0x328>)
 8001780:	f007 ff7c 	bl	800967c <u8g_DrawStr>
	} while (u8g_NextPage(&u8g));
 8001784:	4884      	ldr	r0, [pc, #528]	; (8001998 <main+0x328>)
 8001786:	f008 f9d0 	bl	8009b2a <u8g_NextPage>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1be      	bne.n	800170e <main+0x9e>

  buzzer_stop();
 8001790:	f7ff fbb0 	bl	8000ef4 <buzzer_stop>
  while (1)
  {
	  //démarrage de la conversion ADC des 3 canaux
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 8001794:	2203      	movs	r2, #3
 8001796:	4986      	ldr	r1, [pc, #536]	; (80019b0 <main+0x340>)
 8001798:	4886      	ldr	r0, [pc, #536]	; (80019b4 <main+0x344>)
 800179a:	f001 fb9f 	bl	8002edc <HAL_ADC_Start_DMA>

	  //lecture ultrason
	  elapsed_time_us_ms = HAL_GetTick() - mesure_US_ticks;
 800179e:	f000 ffcd 	bl	800273c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <main+0x348>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	4a84      	ldr	r2, [pc, #528]	; (80019bc <main+0x34c>)
 80017ac:	6013      	str	r3, [r2, #0]
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 80017ae:	4b83      	ldr	r3, [pc, #524]	; (80019bc <main+0x34c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d960      	bls.n	8001878 <main+0x208>
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f002 fdb6 	bl	800432c <HAL_GPIO_TogglePin>
		  donnees_Tx_i2c[0]=0x02;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80017c6:	bf00      	nop
 80017c8:	487d      	ldr	r0, [pc, #500]	; (80019c0 <main+0x350>)
 80017ca:	f003 f957 	bl	8004a7c <HAL_I2C_GetState>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d1f9      	bne.n	80017c8 <main+0x158>
		  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 1, 1000); // HAL should really be replaced by direct register access.
 80017d4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	21e0      	movs	r1, #224	; 0xe0
 80017e2:	4877      	ldr	r0, [pc, #476]	; (80019c0 <main+0x350>)
 80017e4:	f002 fe4c 	bl	8004480 <HAL_I2C_Master_Transmit>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80017e8:	bf00      	nop
 80017ea:	4875      	ldr	r0, [pc, #468]	; (80019c0 <main+0x350>)
 80017ec:	f003 f946 	bl	8004a7c <HAL_I2C_GetState>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d1f9      	bne.n	80017ea <main+0x17a>
		  HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 2, 1);
 80017f6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017fa:	2301      	movs	r3, #1
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2302      	movs	r3, #2
 8001800:	21e0      	movs	r1, #224	; 0xe0
 8001802:	486f      	ldr	r0, [pc, #444]	; (80019c0 <main+0x350>)
 8001804:	f002 ff30 	bl	8004668 <HAL_I2C_Master_Receive>
		  if (donnees_Rx_i2c[0] != 0x06) {
 8001808:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800180c:	2b06      	cmp	r3, #6
 800180e:	d033      	beq.n	8001878 <main+0x208>
			  US_value = (uint16_t)(donnees_Rx_i2c[0]<<8) + donnees_Rx_i2c[1];
 8001810:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001814:	b29b      	uxth	r3, r3
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b29a      	uxth	r2, r3
 800181a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800181e:	b29b      	uxth	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <main+0x354>)
 8001826:	801a      	strh	r2, [r3, #0]
			  distance_US_cm = US_value * US_SMOOTHING + (1 - US_SMOOTHING) * distance_US_cm;
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <main+0x354>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe ff9b 	bl	8000768 <__aeabi_i2d>
 8001832:	a351      	add	r3, pc, #324	; (adr r3, 8001978 <main+0x308>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fd1a 	bl	8000270 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <main+0x358>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe ff8d 	bl	8000768 <__aeabi_i2d>
 800184e:	a34c      	add	r3, pc, #304	; (adr r3, 8001980 <main+0x310>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fd0c 	bl	8000270 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fe36 	bl	80004d0 <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7fe ffe6 	bl	800083c <__aeabi_d2uiz>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <main+0x358>)
 8001876:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  yaw = bno055_lecture_16bits(EULER_HEADING_16bits);
 8001878:	201a      	movs	r0, #26
 800187a:	f7ff fac1 	bl	8000e00 <bno055_lecture_16bits>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	4b52      	ldr	r3, [pc, #328]	; (80019cc <main+0x35c>)
 8001884:	801a      	strh	r2, [r3, #0]

	  elapsed_time_speed_ms = HAL_GetTick() - mesure_vitesse_ms;
 8001886:	f000 ff59 	bl	800273c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <main+0x360>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <main+0x364>)
 8001894:	6013      	str	r3, [r2, #0]
	  if(elapsed_time_speed_ms > SPEED_DELTAT_THRESHOLD_MS)
 8001896:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <main+0x364>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b1a      	cmp	r3, #26
 800189c:	d902      	bls.n	80018a4 <main+0x234>
	  {
		  vitesse_mesuree_mm_s = 0;
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <main+0x368>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
	  }

	  //Demande de lecture ultrason
	  if (elapsed_time_us_ms > US_DELTAT_THRESHOLD_MS) {
 80018a4:	4b45      	ldr	r3, [pc, #276]	; (80019bc <main+0x34c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d91b      	bls.n	80018e4 <main+0x274>
		  	  donnees_Tx_i2c[0]=0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		  	  donnees_Tx_i2c[1]=0x51;
 80018b2:	2351      	movs	r3, #81	; 0x51
 80018b4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		  	  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80018b8:	bf00      	nop
 80018ba:	4841      	ldr	r0, [pc, #260]	; (80019c0 <main+0x350>)
 80018bc:	f003 f8de 	bl	8004a7c <HAL_I2C_GetState>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d1f9      	bne.n	80018ba <main+0x24a>
		  	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000);
 80018c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2302      	movs	r3, #2
 80018d2:	21e0      	movs	r1, #224	; 0xe0
 80018d4:	483a      	ldr	r0, [pc, #232]	; (80019c0 <main+0x350>)
 80018d6:	f002 fdd3 	bl	8004480 <HAL_I2C_Master_Transmit>
		  	  mesure_US_ticks = HAL_GetTick();
 80018da:	f000 ff2f 	bl	800273c <HAL_GetTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <main+0x348>)
 80018e2:	6013      	str	r3, [r2, #0]
	  }

	  //attente de la fin de la conversion ADC, si jamais ce n'est pas encore fini
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80018e4:	2101      	movs	r1, #1
 80018e6:	4833      	ldr	r0, [pc, #204]	; (80019b4 <main+0x344>)
 80018e8:	f001 fa68 	bl	8002dbc <HAL_ADC_PollForConversion>

	  //Reset CRC;
	  CRC->CR = 1;
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <main+0x36c>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	609a      	str	r2, [r3, #8]

	  SPI_TxBuffer[0] = (uint8_t)((lectures_ADC[2] >> 8) & 0xFF);
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <main+0x340>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <main+0x370>)
 80018fc:	701a      	strb	r2, [r3, #0]
	  SPI_TxBuffer[1] = (uint8_t)(lectures_ADC[2] & 0xFF); //battery_voltage (unit ?)
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <main+0x340>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <main+0x370>)
 8001906:	705a      	strb	r2, [r3, #1]
	  SPI_TxBuffer[2] = (uint8_t)((yaw >> 8) & 0xFF);
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <main+0x35c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <main+0x370>)
 8001914:	709a      	strb	r2, [r3, #2]
	  SPI_TxBuffer[3] = (uint8_t)(yaw & 0xFF);
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <main+0x35c>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <main+0x370>)
 800191e:	70da      	strb	r2, [r3, #3]

	  CRC->DR = (uint32_t)((((uint16_t) lectures_ADC[2] << 16)) | ((uint16_t) yaw));
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <main+0x340>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	b29b      	uxth	r3, r3
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	4a28      	ldr	r2, [pc, #160]	; (80019cc <main+0x35c>)
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <main+0x36c>)
 8001930:	601a      	str	r2, [r3, #0]


	  SPI_TxBuffer[4] = (uint8_t)((((uint16_t)(lectures_ADC[0])) >> 8) & 0xFF);
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <main+0x340>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <main+0x370>)
 8001940:	711a      	strb	r2, [r3, #4]
	  SPI_TxBuffer[5] = (uint8_t)(((uint16_t)(lectures_ADC[0])) & 0xFF);    // Octet de poids faible de l'IR gauche
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <main+0x340>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <main+0x370>)
 800194a:	715a      	strb	r2, [r3, #5]
	  SPI_TxBuffer[6] = (uint8_t)((((uint16_t)(lectures_ADC[1])) >> 8) & 0xFF);
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <main+0x340>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	b29b      	uxth	r3, r3
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <main+0x370>)
 800195a:	719a      	strb	r2, [r3, #6]
	  SPI_TxBuffer[7] = (uint8_t)(((uint16_t)(lectures_ADC[1])) & 0xFF);    // Octet de poids faible de l'IR droit
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <main+0x340>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <main+0x370>)
 8001964:	71da      	strb	r2, [r3, #7]

	  CRC->DR = (uint32_t)(((uint16_t) lectures_ADC[0] << 16) | ((uint16_t) lectures_ADC[1])); //Put 4 next bytes in the CRC register
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <main+0x340>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <main+0x340>)
 8001970:	6852      	ldr	r2, [r2, #4]
 8001972:	b292      	uxth	r2, r2
 8001974:	431a      	orrs	r2, r3
 8001976:	e035      	b.n	80019e4 <main+0x374>
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fb99999 	.word	0x3fb99999
 8001980:	cccccccd 	.word	0xcccccccd
 8001984:	3feccccc 	.word	0x3feccccc
 8001988:	200003b0 	.word	0x200003b0
 800198c:	20000448 	.word	0x20000448
 8001990:	080015b9 	.word	0x080015b9
 8001994:	2000002c 	.word	0x2000002c
 8001998:	200001cc 	.word	0x200001cc
 800199c:	0800ab2c 	.word	0x0800ab2c
 80019a0:	0800aa3c 	.word	0x0800aa3c
 80019a4:	0800aa54 	.word	0x0800aa54
 80019a8:	0800aa6c 	.word	0x0800aa6c
 80019ac:	0800aa84 	.word	0x0800aa84
 80019b0:	200001a8 	.word	0x200001a8
 80019b4:	200000a4 	.word	0x200000a4
 80019b8:	200001c0 	.word	0x200001c0
 80019bc:	200001c8 	.word	0x200001c8
 80019c0:	20000150 	.word	0x20000150
 80019c4:	200001b8 	.word	0x200001b8
 80019c8:	200001b6 	.word	0x200001b6
 80019cc:	200001b4 	.word	0x200001b4
 80019d0:	200001bc 	.word	0x200001bc
 80019d4:	200001c4 	.word	0x200001c4
 80019d8:	200001a4 	.word	0x200001a4
 80019dc:	40023000 	.word	0x40023000
 80019e0:	20000000 	.word	0x20000000
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <main+0x44c>)
 80019e6:	601a      	str	r2, [r3, #0]

	  SPI_TxBuffer[8] = (uint8_t)(vitesse_mesuree_mm_s/100); // Octet de poids fort de vitesse_mesuree_mm_s
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <main+0x450>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a35      	ldr	r2, [pc, #212]	; (8001ac4 <main+0x454>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <main+0x458>)
 80019f8:	721a      	strb	r2, [r3, #8]
	  SPI_TxBuffer[9] = (uint8_t)(vitesse_mesuree_mm_s - (vitesse_mesuree_mm_s/100)*100);    // Octet de poids faible de vitesse_mesuree_mm_s
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <main+0x450>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <main+0x450>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	492f      	ldr	r1, [pc, #188]	; (8001ac4 <main+0x454>)
 8001a06:	fba1 1303 	umull	r1, r3, r1, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	0089      	lsls	r1, r1, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	4619      	mov	r1, r3
 8001a16:	0088      	lsls	r0, r1, #2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	440b      	add	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <main+0x458>)
 8001a28:	725a      	strb	r2, [r3, #9]
	  //SPI_TxBuffer[8] = (uint8_t)((vitesse_mesuree_mm_s >> 8) & 0xFF); // Octet de poids fort de vitesse_mesuree_mm_s
	  //SPI_TxBuffer[9] = (uint8_t)(vitesse_mesuree_mm_s & 0xFF);    // Octet de poids faible de vitesse_mesuree_mm_s
	  SPI_TxBuffer[10] = (uint8_t)((distance_US_cm >> 8) & 0xFF);
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <main+0x45c>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <main+0x458>)
 8001a36:	729a      	strb	r2, [r3, #10]
	  SPI_TxBuffer[11] = (uint8_t)((distance_US_cm &0xFF));
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <main+0x45c>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <main+0x458>)
 8001a40:	72da      	strb	r2, [r3, #11]

	  CRC->DR = (uint32_t)(((uint16_t) vitesse_mesuree_mm_s << 16) | ((uint16_t) distance_US_cm));
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <main+0x450>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <main+0x45c>)
 8001a4c:	8812      	ldrh	r2, [r2, #0]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <main+0x44c>)
 8001a52:	601a      	str	r2, [r3, #0]

	  uint32_t checksum = CRC->DR; //Read from register to get computer value
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <main+0x44c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	673b      	str	r3, [r7, #112]	; 0x70

	  //Send the checksum over SPI.
	  SPI_TxBuffer[15] = (uint8_t)(checksum & 0xFF);
 8001a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <main+0x458>)
 8001a60:	73da      	strb	r2, [r3, #15]
	  SPI_TxBuffer[14] = (uint8_t)((checksum >> 8) & 0xFF);
 8001a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <main+0x458>)
 8001a6a:	739a      	strb	r2, [r3, #14]
	  SPI_TxBuffer[13] = (uint8_t)((checksum >> 16) & 0xFF);
 8001a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <main+0x458>)
 8001a74:	735a      	strb	r2, [r3, #13]
	  SPI_TxBuffer[12] = (uint8_t)((checksum >> 24) & 0xFF);
 8001a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a78:	0e1b      	lsrs	r3, r3, #24
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <main+0x458>)
 8001a7e:	731a      	strb	r2, [r3, #12]

	  HAL_SPI_Transmit(&hspi3, (uint8_t *)SPI_TxBuffer, 16,10);
 8001a80:	230a      	movs	r3, #10
 8001a82:	2210      	movs	r2, #16
 8001a84:	4910      	ldr	r1, [pc, #64]	; (8001ac8 <main+0x458>)
 8001a86:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <main+0x460>)
 8001a88:	f004 fdb1 	bl	80065ee <HAL_SPI_Transmit>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f002 fc4b 	bl	800432c <HAL_GPIO_TogglePin>

	  tick_c = HAL_GetTick();
 8001a96:	f000 fe51 	bl	800273c <HAL_GetTick>
 8001a9a:	66f8      	str	r0, [r7, #108]	; 0x6c
	  else
	  {

	  }

	  __HAL_RCC_SPI3_FORCE_RESET();
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <main+0x464>)
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <main+0x464>)
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
	  __HAL_RCC_SPI3_RELEASE_RESET();
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <main+0x464>)
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <main+0x464>)
 8001aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
	  MX_SPI3_Init();
 8001ab4:	f000 f92e 	bl	8001d14 <MX_SPI3_Init>
  {
 8001ab8:	e66c      	b.n	8001794 <main+0x124>
 8001aba:	bf00      	nop
 8001abc:	40023000 	.word	0x40023000
 8001ac0:	200001a4 	.word	0x200001a4
 8001ac4:	51eb851f 	.word	0x51eb851f
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	200001b6 	.word	0x200001b6
 8001ad0:	2000026c 	.word	0x2000026c
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b096      	sub	sp, #88	; 0x58
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2244      	movs	r2, #68	; 0x44
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 fb18 	bl	800a11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001afe:	f003 fb4d 	bl	800519c <HAL_PWREx_ControlVoltageScaling>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b08:	f000 f8fe 	bl	8001d08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b0c:	f003 fb28 	bl	8005160 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <SystemClock_Config+0xc0>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <SystemClock_Config+0xc0>)
 8001b18:	f023 0318 	bic.w	r3, r3, #24
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b20:	2314      	movs	r3, #20
 8001b22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b34:	2302      	movs	r3, #2
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001b40:	2310      	movs	r3, #16
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b44:	2307      	movs	r3, #7
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fb77 	bl	8005248 <HAL_RCC_OscConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b60:	f000 f8d2 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	230f      	movs	r3, #15
 8001b66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 ff77 	bl	8005a70 <HAL_RCC_ClockConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b88:	f000 f8be 	bl	8001d08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b8c:	f004 fb8a 	bl	80062a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b90:	bf00      	nop
 8001b92:	3758      	adds	r7, #88	; 0x58
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	static uint32_t mesure_precedente_us=0, mesure_us, indice=0, i;
	static uint32_t tableau_intervalles_us[16]={};
	static float coefficient_distance_par_intervalle_um = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0;
	static uint32_t somme_intervalles_us = 0;
	uint32_t nb_intervalles=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
	//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	mesure_us = TIM2->CCR1; // ou TIM2->CCR1
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	4a45      	ldr	r2, [pc, #276]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bb0:	6013      	str	r3, [r2, #0]
	mesure_vitesse_ms = HAL_GetTick();
 8001bb2:	f000 fdc3 	bl	800273c <HAL_GetTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bba:	6013      	str	r3, [r2, #0]
	uint32_t delta_us = mesure_us-mesure_precedente_us;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	60bb      	str	r3, [r7, #8]

	if((delta_us) >= 300) //si mesure cohérente (pas un glitch):
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bce:	d374      	bcc.n	8001cba <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		if((mesure_us > (mesure_precedente_us+100000)) || ((mesure_us-100000) > mesure_precedente_us)) //cas d'un nouveau départ (the second term is for overflow)
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001bd8:	33a0      	adds	r3, #160	; 0xa0
 8001bda:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d308      	bcc.n	8001bf4 <HAL_TIM_IC_CaptureCallback+0x58>
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8001bea:	3ba0      	subs	r3, #160	; 0xa0
 8001bec:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d908      	bls.n	8001c06 <HAL_TIM_IC_CaptureCallback+0x6a>
		{
			memset(tableau_intervalles_us, 0, sizeof(tableau_intervalles_us));
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001bfa:	f008 fa8f 	bl	800a11c <memset>
			indice=0;
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e055      	b.n	8001cb2 <HAL_TIM_IC_CaptureCallback+0x116>
		}
		else //cas où on tourne depuis plus d'un intervalle
		{
			tableau_intervalles_us[indice] = delta_us; //on sauvegarde la nouvelle mesure dans le tableau
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4931      	ldr	r1, [pc, #196]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//On fait une moyenne sur 10 ms au plus ou 16 valeurs.
			somme_intervalles_us = 0;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
			i= indice;
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c1e:	6013      	str	r3, [r2, #0]

			do{
				if(!tableau_intervalles_us[i])
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2a      	ldr	r2, [pc, #168]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01d      	beq.n	8001c6a <HAL_TIM_IC_CaptureCallback+0xce>
						break;
				somme_intervalles_us += tableau_intervalles_us[i];
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c40:	6013      	str	r3, [r2, #0]

				i = (i - 1)%16;
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c4e:	6013      	str	r3, [r2, #0]
				
				nb_intervalles++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]

			}while ((somme_intervalles_us<10000) && (nb_intervalles < 16));
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d804      	bhi.n	8001c6c <HAL_TIM_IC_CaptureCallback+0xd0>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d9db      	bls.n	8001c20 <HAL_TIM_IC_CaptureCallback+0x84>
 8001c68:	e000      	b.n	8001c6c <HAL_TIM_IC_CaptureCallback+0xd0>
						break;
 8001c6a:	bf00      	nop

			indice = (indice+1)%16; // on incrémente l'indice avec retour à 0 pour indice = 16
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c78:	6013      	str	r3, [r2, #0]

			vitesse_mesuree_mm_s = 1000 * coefficient_distance_par_intervalle_um * nb_intervalles / somme_intervalles_us;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ce4 <HAL_TIM_IC_CaptureCallback+0x148>
 8001c84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001caa:	ee17 2a90 	vmov	r2, s15
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001cb0:	601a      	str	r2, [r3, #0]
		}
		mesure_precedente_us = mesure_us;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cb8:	6013      	str	r3, [r2, #0]
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000218 	.word	0x20000218
 8001cc8:	200001bc 	.word	0x200001bc
 8001ccc:	2000021c 	.word	0x2000021c
 8001cd0:	20000220 	.word	0x20000220
 8001cd4:	20000260 	.word	0x20000260
 8001cd8:	20000264 	.word	0x20000264
 8001cdc:	20000268 	.word	0x20000268
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	447a0000 	.word	0x447a0000
 8001ce8:	200001a4 	.word	0x200001a4

08001cec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001cf8:	f002 fb18 	bl	800432c <HAL_GPIO_TogglePin>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	48000400 	.word	0x48000400

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <Error_Handler+0x8>
	...

08001d14 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <MX_SPI3_Init+0x70>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d44:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_SPI3_Init+0x6c>)
 8001d6c:	f004 fb9c 	bl	80064a8 <HAL_SPI_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001d76:	f7ff ffc7 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000026c 	.word	0x2000026c
 8001d84:	40003c00 	.word	0x40003c00

08001d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <HAL_SPI_MspInit+0x120>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d179      	bne.n	8001e9e <HAL_SPI_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a39      	ldr	r2, [pc, #228]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_SPI_MspInit+0x124>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001dda:	2338      	movs	r3, #56	; 0x38
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dea:	2306      	movs	r3, #6
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	482e      	ldr	r0, [pc, #184]	; (8001eb0 <HAL_SPI_MspInit+0x128>)
 8001df6:	f002 f917 	bl	8004028 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <HAL_SPI_MspInit+0x130>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e08:	2210      	movs	r2, #16
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e18:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e30:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e32:	f001 ff01 	bl	8003c38 <HAL_DMA_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8001e3c:	f7ff ff64 	bl	8001d08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_SPI_MspInit+0x12c>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_SPI_MspInit+0x138>)
 8001e50:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_3;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e54:	2203      	movs	r2, #3
 8001e56:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e78:	2220      	movs	r2, #32
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e84:	f001 fed8 	bl	8003c38 <HAL_DMA_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001e8e:	f7ff ff3b 	bl	8001d08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e96:	659a      	str	r2, [r3, #88]	; 0x58
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_SPI_MspInit+0x134>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40003c00 	.word	0x40003c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	200002d0 	.word	0x200002d0
 8001eb8:	4002041c 	.word	0x4002041c
 8001ebc:	20000318 	.word	0x20000318
 8001ec0:	40020408 	.word	0x40020408

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_MspInit+0x44>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_MspInit+0x44>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f58:	f000 fbdc 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA1_Channel1_IRQHandler+0x10>)
 8001f66:	f001 ff7f 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000108 	.word	0x20000108

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f005 f923 	bl	80071c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200003b0 	.word	0x200003b0

08001f88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIM6_DAC_IRQHandler+0x10>)
 8001f8e:	f005 f919 	bl	80071c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200003fc 	.word	0x200003fc

08001f9c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA2_Channel1_IRQHandler+0x10>)
 8001fa2:	f001 ff61 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000318 	.word	0x20000318

08001fb0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA2_Channel2_IRQHandler+0x10>)
 8001fb6:	f001 ff57 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002d0 	.word	0x200002d0

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f008 f89a 	bl	800a12c <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20010000 	.word	0x20010000
 8002024:	00000400 	.word	0x00000400
 8002028:	20000360 	.word	0x20000360
 800202c:	200006e8 	.word	0x200006e8

08002030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b09a      	sub	sp, #104	; 0x68
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	222c      	movs	r2, #44	; 0x2c
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f008 f844 	bl	800a11c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <MX_TIM1_Init+0x16c>)
 8002096:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <MX_TIM1_Init+0x170>)
 8002098:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800209a:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <MX_TIM1_Init+0x16c>)
 800209c:	221f      	movs	r2, #31
 800209e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80020a6:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020a8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c0:	483f      	ldr	r0, [pc, #252]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020c2:	f004 fd67 	bl	8006b94 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020cc:	f7ff fe1c 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020da:	4619      	mov	r1, r3
 80020dc:	4838      	ldr	r0, [pc, #224]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020de:	f005 fb41 	bl	8007764 <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020e8:	f7ff fe0e 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020ec:	4834      	ldr	r0, [pc, #208]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80020ee:	f004 fe78 	bl	8006de2 <HAL_TIM_PWM_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020f8:	f7ff fe06 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800210c:	4619      	mov	r1, r3
 800210e:	482c      	ldr	r0, [pc, #176]	; (80021c0 <MX_TIM1_Init+0x16c>)
 8002110:	f006 f8be 	bl	8008290 <HAL_TIMEx_MasterConfigSynchronization>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800211a:	f7ff fdf5 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800211e:	2360      	movs	r3, #96	; 0x60
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8002122:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <MX_TIM1_Init+0x16c>)
 8002146:	f005 f9f9 	bl	800753c <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002150:	f7ff fdda 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002158:	220c      	movs	r2, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <MX_TIM1_Init+0x16c>)
 800215e:	f005 f9ed 	bl	800753c <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002168:	f7ff fdce 	bl	8001d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800218e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80021a2:	f006 f8db 	bl	800835c <HAL_TIMEx_ConfigBreakDeadTime>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80021ac:	f7ff fdac 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM1_Init+0x16c>)
 80021b2:	f000 f971 	bl	8002498 <HAL_TIM_MspPostInit>

}
 80021b6:	bf00      	nop
 80021b8:	3768      	adds	r7, #104	; 0x68
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000364 	.word	0x20000364
 80021c4:	40012c00 	.word	0x40012c00

080021c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <MX_TIM2_Init+0xdc>)
 80021f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <MX_TIM2_Init+0xdc>)
 80021fe:	220f      	movs	r2, #15
 8002200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <MX_TIM2_Init+0xdc>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <MX_TIM2_Init+0xdc>)
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <MX_TIM2_Init+0xdc>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <MX_TIM2_Init+0xdc>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800221c:	4821      	ldr	r0, [pc, #132]	; (80022a4 <MX_TIM2_Init+0xdc>)
 800221e:	f004 fcb9 	bl	8006b94 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002228:	f7ff fd6e 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002230:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	4619      	mov	r1, r3
 8002238:	481a      	ldr	r0, [pc, #104]	; (80022a4 <MX_TIM2_Init+0xdc>)
 800223a:	f005 fa93 	bl	8007764 <HAL_TIM_ConfigClockSource>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002244:	f7ff fd60 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002248:	4816      	ldr	r0, [pc, #88]	; (80022a4 <MX_TIM2_Init+0xdc>)
 800224a:	f004 fe2b 	bl	8006ea4 <HAL_TIM_IC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002254:	f7ff fd58 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480f      	ldr	r0, [pc, #60]	; (80022a4 <MX_TIM2_Init+0xdc>)
 8002268:	f006 f812 	bl	8008290 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002272:	f7ff fd49 	bl	8001d08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002276:	2302      	movs	r3, #2
 8002278:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800227a:	2301      	movs	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_TIM2_Init+0xdc>)
 800228e:	f005 f8b8 	bl	8007402 <HAL_TIM_IC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002298:	f7ff fd36 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3730      	adds	r7, #48	; 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	200003b0 	.word	0x200003b0

080022a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <MX_TIM6_Init+0x64>)
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <MX_TIM6_Init+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <MX_TIM6_Init+0x64>)
 80022c0:	221f      	movs	r2, #31
 80022c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_TIM6_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2272;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <MX_TIM6_Init+0x64>)
 80022cc:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 80022d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_TIM6_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <MX_TIM6_Init+0x64>)
 80022da:	f004 fc5b 	bl	8006b94 <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80022e4:	f7ff fd10 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e8:	2300      	movs	r3, #0
 80022ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_TIM6_Init+0x64>)
 80022f6:	f005 ffcb 	bl	8008290 <HAL_TIMEx_MasterConfigSynchronization>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002300:	f7ff fd02 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200003fc 	.word	0x200003fc
 8002310:	40001000 	.word	0x40001000

08002314 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_TIM7_Init+0x64>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_TIM7_Init+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 31;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_TIM7_Init+0x64>)
 800232c:	221f      	movs	r2, #31
 800232e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_TIM7_Init+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_TIM7_Init+0x64>)
 8002338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800233c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_TIM7_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_TIM7_Init+0x64>)
 8002346:	f004 fc25 	bl	8006b94 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002350:	f7ff fcda 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM7_Init+0x64>)
 8002362:	f005 ff95 	bl	8008290 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800236c:	f7ff fccc 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000448 	.word	0x20000448
 800237c:	40001400 	.word	0x40001400

08002380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_TIM_Base_MspInit+0x108>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10c      	bne.n	80023bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a2:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	4a39      	ldr	r2, [pc, #228]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ac:	6613      	str	r3, [r2, #96]	; 0x60
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023ba:	e061      	b.n	8002480 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d131      	bne.n	800242a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002406:	2301      	movs	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002414:	f001 fe08 	bl	8004028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	201c      	movs	r0, #28
 800241e:	f001 fbd4 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002422:	201c      	movs	r0, #28
 8002424:	f001 fbed 	bl	8003c02 <HAL_NVIC_EnableIRQ>
}
 8002428:	e02a      	b.n	8002480 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM6)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_TIM_Base_MspInit+0x110>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d114      	bne.n	800245e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2036      	movs	r0, #54	; 0x36
 8002452:	f001 fbba 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002456:	2036      	movs	r0, #54	; 0x36
 8002458:	f001 fbd3 	bl	8003c02 <HAL_NVIC_EnableIRQ>
}
 800245c:	e010      	b.n	8002480 <HAL_TIM_Base_MspInit+0x100>
  else if(tim_baseHandle->Instance==TIM7)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_TIM_Base_MspInit+0x114>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d10b      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	6593      	str	r3, [r2, #88]	; 0x58
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_TIM_Base_MspInit+0x10c>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
}
 8002480:	bf00      	nop
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40001000 	.word	0x40001000
 8002494:	40001400 	.word	0x40001400

08002498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIM_MspPostInit+0x68>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11d      	bne.n	80024f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_TIM_MspPostInit+0x6c>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin|PWM_DIRECTION_Pin;
 80024d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80024d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f001 fd99 	bl	8004028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40021000 	.word	0x40021000

08002508 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <MX_USART1_UART_Init+0x58>)
 800250e:	4a15      	ldr	r2, [pc, #84]	; (8002564 <MX_USART1_UART_Init+0x5c>)
 8002510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <MX_USART1_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_USART1_UART_Init+0x58>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_USART1_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <MX_USART1_UART_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_USART1_UART_Init+0x58>)
 800254c:	f005 ff9c 	bl	8008488 <HAL_UART_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002556:	f7ff fbd7 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000494 	.word	0x20000494
 8002564:	40013800 	.word	0x40013800

08002568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b09e      	sub	sp, #120	; 0x78
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2254      	movs	r2, #84	; 0x54
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f007 fdc7 	bl	800a11c <memset>
  if(uartHandle->Instance==USART1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_UART_MspInit+0xa8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d137      	bne.n	8002608 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fc87 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025b0:	f7ff fbaa 	bl	8001d08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025be:	6613      	str	r3, [r2, #96]	; 0x60
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d0:	4a10      	ldr	r2, [pc, #64]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_UART_MspInit+0xac>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f6:	2307      	movs	r3, #7
 80025f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025fe:	4619      	mov	r1, r3
 8002600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002604:	f001 fd10 	bl	8004028 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002608:	bf00      	nop
 800260a:	3778      	adds	r7, #120	; 0x78
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40013800 	.word	0x40013800
 8002614:	40021000 	.word	0x40021000

08002618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800261c:	f7ff fd08 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <LoopForever+0x6>)
  ldr r1, =_edata
 8002622:	490d      	ldr	r1, [pc, #52]	; (8002658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <LoopForever+0xe>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <LoopForever+0x16>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002646:	f007 fd77 	bl	800a138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264a:	f7ff f811 	bl	8001670 <main>

0800264e <LoopForever>:

LoopForever:
    b LoopForever
 800264e:	e7fe      	b.n	800264e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002650:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002658:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800265c:	0800b6cc 	.word	0x0800b6cc
  ldr r2, =_sbss
 8002660:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002664:	200006e4 	.word	0x200006e4

08002668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC1_IRQHandler>

0800266a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f001 fa9d 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800267a:	2000      	movs	r0, #0
 800267c:	f000 f80e 	bl	800269c <HAL_InitTick>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	71fb      	strb	r3, [r7, #7]
 800268a:	e001      	b.n	8002690 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800268c:	f7ff fc1a 	bl	8001ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002690:	79fb      	ldrb	r3, [r7, #7]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_InitTick+0x6c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_InitTick+0x70>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_InitTick+0x6c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 faa9 	bl	8003c1e <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d809      	bhi.n	80026ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f001 fa73 	bl	8003bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_InitTick+0x74>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e007      	b.n	80026fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e004      	b.n	80026fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e001      	b.n	80026fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000001c 	.word	0x2000001c
 800270c:	20000014 	.word	0x20000014
 8002710:	20000018 	.word	0x20000018

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000001c 	.word	0x2000001c
 8002738:	20000518 	.word	0x20000518

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000518 	.word	0x20000518

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000001c 	.word	0x2000001c

0800279c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	609a      	str	r2, [r3, #8]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3360      	adds	r3, #96	; 0x60
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <LL_ADC_SetOffset+0x44>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	4313      	orrs	r3, r2
 8002834:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	03fff000 	.word	0x03fff000

0800284c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3360      	adds	r3, #96	; 0x60
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3330      	adds	r3, #48	; 0x30
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	211f      	movs	r1, #31
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 011f 	and.w	r1, r3, #31
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	431a      	orrs	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3314      	adds	r3, #20
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0e5b      	lsrs	r3, r3, #25
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	0d1b      	lsrs	r3, r3, #20
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2107      	movs	r1, #7
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0d1b      	lsrs	r3, r3, #20
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0318 	and.w	r3, r3, #24
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029a8:	40d9      	lsrs	r1, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	400b      	ands	r3, r1
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	0007ffff 	.word	0x0007ffff

080029cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6093      	str	r3, [r2, #8]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_IsEnabled+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_IsEnabled+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d101      	bne.n	8002b1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e12c      	b.n	8002da0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fa91 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff3f 	bl	80029f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff25 	bl	80029cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff5a 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff3e 	bl	8002a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <HAL_ADC_Init+0x27c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	4a82      	ldr	r2, [pc, #520]	; (8002dac <HAL_ADC_Init+0x280>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff3c 	bl	8002a40 <LL_ADC_IsInternalRegulatorEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff75 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 80c5 	bne.w	8002d8e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80c1 	bne.w	8002d8e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c14:	f043 0202 	orr.w	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff35 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c2c:	4860      	ldr	r0, [pc, #384]	; (8002db0 <HAL_ADC_Init+0x284>)
 8002c2e:	f7ff ff2f 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	485d      	ldr	r0, [pc, #372]	; (8002db4 <HAL_ADC_Init+0x288>)
 8002c40:	f7ff fdac 	bl	800279c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7e5b      	ldrb	r3, [r3, #25]
 8002c48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d106      	bne.n	8002c80 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	3b01      	subs	r3, #1
 8002c78:	045b      	lsls	r3, r3, #17
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_ADC_Init+0x28c>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	69b9      	ldr	r1, [r7, #24]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff12 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002cba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff1f 	bl	8002b04 <LL_ADC_INJ_IsConversionOngoing>
 8002cc6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d13d      	bne.n	8002d4a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d13a      	bne.n	8002d4a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cd8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ce0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf0:	f023 0302 	bic.w	r3, r3, #2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d118      	bne.n	8002d3a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	e007      	b.n	8002d4a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10c      	bne.n	8002d6c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f023 010f 	bic.w	r1, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6a:	e007      	b.n	8002d7c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 020f 	bic.w	r2, r2, #15
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f023 0303 	bic.w	r3, r3, #3
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d8c:	e007      	b.n	8002d9e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f043 0210 	orr.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000014 	.word	0x20000014
 8002dac:	053e2d63 	.word	0x053e2d63
 8002db0:	50040000 	.word	0x50040000
 8002db4:	50040300 	.word	0x50040300
 8002db8:	fff0c007 	.word	0xfff0c007

08002dbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d102      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002dce:	2308      	movs	r3, #8
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e010      	b.n	8002df6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e06f      	b.n	8002ed2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002df2:	2304      	movs	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002df6:	f7ff fca1 	bl	800273c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dfc:	e021      	b.n	8002e42 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d01d      	beq.n	8002e42 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e06:	f7ff fc99 	bl	800273c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <HAL_ADC_PollForConversion+0x60>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d112      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e047      	b.n	8002ed2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0d6      	beq.n	8002dfe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fd24 	bl	80028ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01c      	beq.n	8002ea6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e5b      	ldrb	r3, [r3, #25]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d118      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d104      	bne.n	8002ebe <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e008      	b.n	8002ed0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	220c      	movs	r2, #12
 8002ece:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fdf6 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d167      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Start_DMA+0x2a>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e063      	b.n	8002fce <HAL_ADC_Start_DMA+0xf2>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fc66 	bl	80037e0 <ADC_Enable>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d14f      	bne.n	8002fbe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	f023 0206 	bic.w	r2, r3, #6
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	659a      	str	r2, [r3, #88]	; 0x58
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_ADC_Start_DMA+0xfc>)
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_ADC_Start_DMA+0x100>)
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_ADC_Start_DMA+0x104>)
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	221c      	movs	r2, #28
 8002f70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0210 	orr.w	r2, r2, #16
 8002f88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3340      	adds	r3, #64	; 0x40
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f000 fefd 	bl	8003da8 <HAL_DMA_Start_IT>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fd7d 	bl	8002ab6 <LL_ADC_REG_StartConversion>
 8002fbc:	e006      	b.n	8002fcc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fc6:	e001      	b.n	8002fcc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	080038ed 	.word	0x080038ed
 8002fdc:	080039c5 	.word	0x080039c5
 8002fe0:	080039e1 	.word	0x080039e1

08002fe4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0b6      	sub	sp, #216	; 0xd8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x22>
 800303e:	2302      	movs	r3, #2
 8003040:	e3b9      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x796>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fd45 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 839e 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d824      	bhi.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	3b02      	subs	r3, #2
 800306a:	2b03      	cmp	r3, #3
 800306c:	d81b      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0x86>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_ADC_ConfigChannel+0x54>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003085 	.word	0x08003085
 8003078:	0800308d 	.word	0x0800308d
 800307c:	08003095 	.word	0x08003095
 8003080:	0800309d 	.word	0x0800309d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	220c      	movs	r2, #12
 8003088:	605a      	str	r2, [r3, #4]
          break;
 800308a:	e010      	b.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2212      	movs	r2, #18
 8003090:	605a      	str	r2, [r3, #4]
          break;
 8003092:	e00c      	b.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2218      	movs	r2, #24
 8003098:	605a      	str	r2, [r3, #4]
          break;
 800309a:	e008      	b.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	605a      	str	r2, [r3, #4]
          break;
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2206      	movs	r2, #6
 80030aa:	605a      	str	r2, [r3, #4]
          break;
 80030ac:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fc0a 	bl	80028d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fd0a 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 80030ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fd16 	bl	8002b04 <LL_ADC_INJ_IsConversionOngoing>
 80030d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 81a6 	bne.w	8003432 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 81a1 	bne.w	8003432 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7ff fc15 	bl	800292c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00a      	beq.n	800313a <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6919      	ldr	r1, [r3, #16]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003134:	f7ff fb66 	bl	8002804 <LL_ADC_SetOffset>
 8003138:	e17b      	b.n	8003432 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fb83 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x146>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fb78 	bl	800284c <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	e01e      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x184>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fb6d 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800318c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e004      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8003198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x19c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	e018      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1ce>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80031e0:	2320      	movs	r3, #32
 80031e2:	e004      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80031e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d106      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fb3c 	bl	8002878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fb20 	bl	800284c <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_ADC_ConfigChannel+0x20c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fb15 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	e01e      	b.n	800326a <HAL_ADC_ConfigChannel+0x24a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fb0a 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800324a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800324e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e004      	b.n	8003268 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800325e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x262>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0e9b      	lsrs	r3, r3, #26
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	e018      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x294>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800329a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800329e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e004      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80032aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fad9 	bl	8002878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fabd 	bl	800284c <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x2d2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fab2 	bl	800284c <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	e01e      	b.n	8003330 <HAL_ADC_ConfigChannel+0x310>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff faa7 	bl	800284c <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e004      	b.n	800332e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x328>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	e016      	b.n	8003376 <HAL_ADC_ConfigChannel+0x356>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800335a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e004      	b.n	8003376 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 800336c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fa78 	bl	8002878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fa5c 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x394>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2103      	movs	r1, #3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fa51 	bl	800284c <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	0e9b      	lsrs	r3, r3, #26
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	e017      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x3c4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2103      	movs	r1, #3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fa46 	bl	800284c <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e003      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80033da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x3dc>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	e011      	b.n	8003420 <HAL_ADC_ConfigChannel+0x400>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800340a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8003414:	2320      	movs	r3, #32
 8003416:	e003      	b.n	8003420 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003420:	429a      	cmp	r2, r3
 8003422:	d106      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	2103      	movs	r1, #3
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fa23 	bl	8002878 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fb2a 	bl	8002a90 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8140 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	461a      	mov	r2, r3
 8003452:	f7ff fa97 	bl	8002984 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4a8f      	ldr	r2, [pc, #572]	; (8003698 <HAL_ADC_ConfigChannel+0x678>)
 800345c:	4293      	cmp	r3, r2
 800345e:	f040 8131 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_ADC_ConfigChannel+0x46a>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	3301      	adds	r3, #1
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2b09      	cmp	r3, #9
 8003480:	bf94      	ite	ls
 8003482:	2301      	movls	r3, #1
 8003484:	2300      	movhi	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e019      	b.n	80034be <HAL_ADC_ConfigChannel+0x49e>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800349a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800349c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e003      	b.n	80034ae <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80034a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	bf94      	ite	ls
 80034b8:	2301      	movls	r3, #1
 80034ba:	2300      	movhi	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d079      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_ADC_ConfigChannel+0x4be>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	3301      	adds	r3, #1
 80034d6:	069b      	lsls	r3, r3, #26
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	e015      	b.n	800350a <HAL_ADC_ConfigChannel+0x4ea>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80034f6:	2320      	movs	r3, #32
 80034f8:	e003      	b.n	8003502 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80034fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	069b      	lsls	r3, r3, #26
 8003506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_ADC_ConfigChannel+0x50a>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	3301      	adds	r3, #1
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	e017      	b.n	800355a <HAL_ADC_ConfigChannel+0x53a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8003542:	2320      	movs	r3, #32
 8003544:	e003      	b.n	800354e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	ea42 0103 	orr.w	r1, r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x560>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0e9b      	lsrs	r3, r3, #26
 8003570:	3301      	adds	r3, #1
 8003572:	f003 021f 	and.w	r2, r3, #31
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	051b      	lsls	r3, r3, #20
 800357e:	e018      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x592>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b2:	430b      	orrs	r3, r1
 80035b4:	e081      	b.n	80036ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d107      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x5b2>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	0e9b      	lsrs	r3, r3, #26
 80035c8:	3301      	adds	r3, #1
 80035ca:	069b      	lsls	r3, r3, #26
 80035cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d0:	e015      	b.n	80035fe <HAL_ADC_ConfigChannel+0x5de>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e003      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	069b      	lsls	r3, r3, #26
 80035fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_ADC_ConfigChannel+0x5fe>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	e017      	b.n	800364e <HAL_ADC_ConfigChannel+0x62e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	61fb      	str	r3, [r7, #28]
  return result;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003636:	2320      	movs	r3, #32
 8003638:	e003      	b.n	8003642 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3301      	adds	r3, #1
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	ea42 0103 	orr.w	r1, r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_ADC_ConfigChannel+0x65a>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0e9b      	lsrs	r3, r3, #26
 8003664:	3301      	adds	r3, #1
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003678:	e01e      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x698>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	613b      	str	r3, [r7, #16]
  return result;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e006      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x684>
 8003696:	bf00      	nop
 8003698:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 021f 	and.w	r2, r3, #31
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	051b      	lsls	r3, r3, #20
 80036b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b8:	430b      	orrs	r3, r1
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	4619      	mov	r1, r3
 80036c0:	f7ff f934 	bl	800292c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d06c      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036d0:	483c      	ldr	r0, [pc, #240]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80036d2:	f7ff f889 	bl	80027e8 <LL_ADC_GetCommonPathInternalCh>
 80036d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d127      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a35      	ldr	r2, [pc, #212]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d157      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003702:	4619      	mov	r1, r3
 8003704:	482f      	ldr	r0, [pc, #188]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003706:	f7ff f85c 	bl	80027c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003724:	e002      	b.n	800372c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003732:	e03a      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a27      	ldr	r2, [pc, #156]	; (80037d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x746>
 800373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d12a      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	4619      	mov	r1, r3
 800375e:	4819      	ldr	r0, [pc, #100]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003760:	f7ff f82f 	bl	80027c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003764:	e021      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_ADC_ConfigChannel+0x7bc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d11c      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800378a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800378e:	4619      	mov	r1, r3
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003792:	f7ff f816 	bl	80027c2 <LL_ADC_SetCommonPathInternalCh>
 8003796:	e008      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	37d8      	adds	r7, #216	; 0xd8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	80080000 	.word	0x80080000
 80037c4:	50040300 	.word	0x50040300
 80037c8:	c7520000 	.word	0xc7520000
 80037cc:	50040000 	.word	0x50040000
 80037d0:	20000014 	.word	0x20000014
 80037d4:	053e2d63 	.word	0x053e2d63
 80037d8:	cb840000 	.word	0xcb840000
 80037dc:	80000001 	.word	0x80000001

080037e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f94d 	bl	8002a90 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d169      	bne.n	80038d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <ADC_Enable+0xfc>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e055      	b.n	80038d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f91c 	bl	8002a68 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003830:	482b      	ldr	r0, [pc, #172]	; (80038e0 <ADC_Enable+0x100>)
 8003832:	f7fe ffd9 	bl	80027e8 <LL_ADC_GetCommonPathInternalCh>
 8003836:	4603      	mov	r3, r0
 8003838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <ADC_Enable+0x104>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <ADC_Enable+0x108>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800385a:	e002      	b.n	8003862 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3b01      	subs	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f9      	bne.n	800385c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003868:	f7fe ff68 	bl	800273c <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800386e:	e028      	b.n	80038c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f90b 	bl	8002a90 <LL_ADC_IsEnabled>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f8ef 	bl	8002a68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388a:	f7fe ff57 	bl	800273c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d914      	bls.n	80038c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d00d      	beq.n	80038c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f043 0210 	orr.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e007      	b.n	80038d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d1cf      	bne.n	8003870 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	8000003f 	.word	0x8000003f
 80038e0:	50040300 	.word	0x50040300
 80038e4:	20000014 	.word	0x20000014
 80038e8:	053e2d63 	.word	0x053e2d63

080038ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003902:	2b00      	cmp	r3, #0
 8003904:	d14b      	bne.n	800399e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d021      	beq.n	8003964 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe ffc2 	bl	80028ae <LL_ADC_REG_IsTriggerSourceSWStart>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d12b      	bne.n	8003996 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11f      	bne.n	8003996 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
 8003962:	e018      	b.n	8003996 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d111      	bne.n	8003996 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff fb24 	bl	8002fe4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800399c:	e00e      	b.n	80039bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fb2e 	bl	800300c <HAL_ADC_ErrorCallback>
}
 80039b0:	e004      	b.n	80039bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fb10 	bl	8002ff8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f043 0204 	orr.w	r2, r3, #4
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fb00 	bl	800300c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff8e 	bl	8003ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff29 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff3e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff8e 	bl	8003b08 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5d 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff31 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa2 	bl	8003b70 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e098      	b.n	8003d7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_DMA_Init+0x150>)
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d80f      	bhi.n	8003c76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_DMA_Init+0x154>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a4b      	ldr	r2, [pc, #300]	; (8003d90 <HAL_DMA_Init+0x158>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	009a      	lsls	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a48      	ldr	r2, [pc, #288]	; (8003d94 <HAL_DMA_Init+0x15c>)
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
 8003c74:	e00e      	b.n	8003c94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_DMA_Init+0x160>)
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <HAL_DMA_Init+0x158>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	009a      	lsls	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a42      	ldr	r2, [pc, #264]	; (8003d9c <HAL_DMA_Init+0x164>)
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cee:	d039      	beq.n	8003d64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <HAL_DMA_Init+0x15c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d11a      	bne.n	8003d30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_DMA_Init+0x168>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f003 031c 	and.w	r3, r3, #28
 8003d06:	210f      	movs	r1, #15
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4924      	ldr	r1, [pc, #144]	; (8003da0 <HAL_DMA_Init+0x168>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_DMA_Init+0x168>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f003 031c 	and.w	r3, r3, #28
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	491d      	ldr	r1, [pc, #116]	; (8003da0 <HAL_DMA_Init+0x168>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
 8003d2e:	e019      	b.n	8003d64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d30:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <HAL_DMA_Init+0x16c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	f003 031c 	and.w	r3, r3, #28
 8003d3c:	210f      	movs	r1, #15
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	4917      	ldr	r1, [pc, #92]	; (8003da4 <HAL_DMA_Init+0x16c>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <HAL_DMA_Init+0x16c>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f003 031c 	and.w	r3, r3, #28
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	4911      	ldr	r1, [pc, #68]	; (8003da4 <HAL_DMA_Init+0x16c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40020407 	.word	0x40020407
 8003d8c:	bffdfff8 	.word	0xbffdfff8
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	40020000 	.word	0x40020000
 8003d98:	bffdfbf8 	.word	0xbffdfbf8
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	400200a8 	.word	0x400200a8
 8003da4:	400204a8 	.word	0x400204a8

08003da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Start_IT+0x20>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e04b      	b.n	8003e60 <HAL_DMA_Start_IT+0xb8>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d13a      	bne.n	8003e52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f8e0 	bl	8003fc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 020e 	orr.w	r2, r2, #14
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e00f      	b.n	8003e40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 020a 	orr.w	r2, r2, #10
 8003e3e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e005      	b.n	8003e5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f003 031c 	and.w	r3, r3, #28
 8003e88:	2204      	movs	r2, #4
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d026      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x7a>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d021      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f003 021c 	and.w	r2, r3, #28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2104      	movs	r1, #4
 8003eca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ece:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d071      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ee0:	e06c      	b.n	8003fbc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f003 031c 	and.w	r3, r3, #28
 8003eea:	2202      	movs	r2, #2
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02e      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xec>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d029      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 020a 	bic.w	r2, r2, #10
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 021c 	and.w	r2, r3, #28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2102      	movs	r1, #2
 8003f34:	fa01 f202 	lsl.w	r2, r1, r2
 8003f38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d038      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f52:	e033      	b.n	8003fbc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f003 031c 	and.w	r3, r3, #28
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02a      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x156>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d025      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 020e 	bic.w	r2, r2, #14
 8003f80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 021c 	and.w	r2, r3, #28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
}
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	f003 021c 	and.w	r2, r3, #28
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d108      	bne.n	800400a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004008:	e007      	b.n	800401a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	e148      	b.n	80042ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 813a 	beq.w	80042c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d005      	beq.n	8004068 <HAL_GPIO_Init+0x40>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d130      	bne.n	80040ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800409e:	2201      	movs	r2, #1
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 0201 	and.w	r2, r3, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d017      	beq.n	8004106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2203      	movs	r2, #3
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d123      	bne.n	800415a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	08da      	lsrs	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3208      	adds	r2, #8
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	220f      	movs	r2, #15
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	08da      	lsrs	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3208      	adds	r2, #8
 8004154:	6939      	ldr	r1, [r7, #16]
 8004156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8094 	beq.w	80042c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_GPIO_Init+0x2c0>)
 800419e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a0:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <HAL_GPIO_Init+0x2c0>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6613      	str	r3, [r2, #96]	; 0x60
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_GPIO_Init+0x2c0>)
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041b4:	4a4d      	ldr	r2, [pc, #308]	; (80042ec <HAL_GPIO_Init+0x2c4>)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	3302      	adds	r3, #2
 80041bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	220f      	movs	r2, #15
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041de:	d00d      	beq.n	80041fc <HAL_GPIO_Init+0x1d4>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a43      	ldr	r2, [pc, #268]	; (80042f0 <HAL_GPIO_Init+0x2c8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <HAL_GPIO_Init+0x1d0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_GPIO_Init+0x1cc>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e004      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041f4:	2307      	movs	r3, #7
 80041f6:	e002      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041fc:	2300      	movs	r3, #0
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800420e:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_GPIO_Init+0x2c4>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800429a:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042be:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f aeaf 	bne.w	8004038 <HAL_GPIO_Init+0x10>
  }
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40010000 	.word	0x40010000
 80042f0:	48000400 	.word	0x48000400
 80042f4:	48000800 	.word	0x48000800
 80042f8:	40010400 	.word	0x40010400

080042fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
 8004308:	4613      	mov	r3, r2
 800430a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800430c:	787b      	ldrb	r3, [r7, #1]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004318:	e002      	b.n	8004320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43d9      	mvns	r1, r3
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	400b      	ands	r3, r1
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e081      	b.n	8004476 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd f812 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d107      	bne.n	80043da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	e006      	b.n	80043e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d104      	bne.n	80043fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800441c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	461a      	mov	r2, r3
 800448c:	460b      	mov	r3, r1
 800448e:	817b      	strh	r3, [r7, #10]
 8004490:	4613      	mov	r3, r2
 8004492:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b20      	cmp	r3, #32
 800449e:	f040 80da 	bne.w	8004656 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_I2C_Master_Transmit+0x30>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0d3      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b8:	f7fe f940 	bl	800273c <HAL_GetTick>
 80044bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2319      	movs	r3, #25
 80044c4:	2201      	movs	r2, #1
 80044c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fb5c 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0be      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	; 0x21
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2210      	movs	r2, #16
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2bff      	cmp	r3, #255	; 0xff
 800450a:	d90e      	bls.n	800452a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	22ff      	movs	r2, #255	; 0xff
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_I2C_Master_Transmit+0x1e0>)
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fd52 	bl	8004fcc <I2C_TransferConfig>
 8004528:	e06c      	b.n	8004604 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	b2da      	uxtb	r2, r3
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_I2C_Master_Transmit+0x1e0>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fd41 	bl	8004fcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800454a:	e05b      	b.n	8004604 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6a39      	ldr	r1, [r7, #32]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb59 	bl	8004c08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e07b      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d034      	beq.n	8004604 <HAL_I2C_Master_Transmit+0x184>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d130      	bne.n	8004604 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 faeb 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e04d      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2bff      	cmp	r3, #255	; 0xff
 80045c4:	d90e      	bls.n	80045e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	22ff      	movs	r2, #255	; 0xff
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	8979      	ldrh	r1, [r7, #10]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fcf5 	bl	8004fcc <I2C_TransferConfig>
 80045e2:	e00f      	b.n	8004604 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fce4 	bl	8004fcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d19e      	bne.n	800454c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fb38 	bl	8004c88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e01a      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2220      	movs	r2, #32
 8004628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_I2C_Master_Transmit+0x1e4>)
 8004636:	400b      	ands	r3, r1
 8004638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	80002000 	.word	0x80002000
 8004664:	fe00e800 	.word	0xfe00e800

08004668 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	461a      	mov	r2, r3
 8004674:	460b      	mov	r3, r1
 8004676:	817b      	strh	r3, [r7, #10]
 8004678:	4613      	mov	r3, r2
 800467a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 80db 	bne.w	8004840 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_I2C_Master_Receive+0x30>
 8004694:	2302      	movs	r3, #2
 8004696:	e0d4      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046a0:	f7fe f84c 	bl	800273c <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2319      	movs	r3, #25
 80046ac:	2201      	movs	r2, #1
 80046ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa68 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0bf      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2222      	movs	r2, #34	; 0x22
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2210      	movs	r2, #16
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	893a      	ldrh	r2, [r7, #8]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2bff      	cmp	r3, #255	; 0xff
 80046f2:	d90e      	bls.n	8004712 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	22ff      	movs	r2, #255	; 0xff
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	8979      	ldrh	r1, [r7, #10]
 8004702:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_I2C_Master_Receive+0x1e4>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fc5e 	bl	8004fcc <I2C_TransferConfig>
 8004710:	e06d      	b.n	80047ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	b2da      	uxtb	r2, r3
 8004722:	8979      	ldrh	r1, [r7, #10]
 8004724:	4b49      	ldr	r3, [pc, #292]	; (800484c <HAL_I2C_Master_Receive+0x1e4>)
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fc4d 	bl	8004fcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004732:	e05c      	b.n	80047ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fae1 	bl	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e07c      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d034      	beq.n	80047ee <HAL_I2C_Master_Receive+0x186>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d130      	bne.n	80047ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2200      	movs	r2, #0
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f9f6 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e04d      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2bff      	cmp	r3, #255	; 0xff
 80047ae:	d90e      	bls.n	80047ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	8979      	ldrh	r1, [r7, #10]
 80047be:	2300      	movs	r3, #0
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fc00 	bl	8004fcc <I2C_TransferConfig>
 80047cc:	e00f      	b.n	80047ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fbef 	bl	8004fcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d19d      	bne.n	8004734 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	6a39      	ldr	r1, [r7, #32]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa43 	bl	8004c88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01a      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2220      	movs	r2, #32
 8004812:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_I2C_Master_Receive+0x1e8>)
 8004820:	400b      	ands	r3, r1
 8004822:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	80002400 	.word	0x80002400
 8004850:	fe00e800 	.word	0xfe00e800

08004854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4603      	mov	r3, r0
 8004864:	817b      	strh	r3, [r7, #10]
 8004866:	460b      	mov	r3, r1
 8004868:	813b      	strh	r3, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	f040 80f9 	bne.w	8004a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_I2C_Mem_Write+0x34>
 8004882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0ed      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_I2C_Mem_Write+0x4e>
 800489e:	2302      	movs	r3, #2
 80048a0:	e0e6      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048aa:	f7fd ff47 	bl	800273c <HAL_GetTick>
 80048ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2319      	movs	r3, #25
 80048b6:	2201      	movs	r2, #1
 80048b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f963 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0d1      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2221      	movs	r2, #33	; 0x21
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f4:	88f8      	ldrh	r0, [r7, #6]
 80048f6:	893a      	ldrh	r2, [r7, #8]
 80048f8:	8979      	ldrh	r1, [r7, #10]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4603      	mov	r3, r0
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f8c7 	bl	8004a98 <I2C_RequestMemoryWrite>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0a9      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2bff      	cmp	r3, #255	; 0xff
 8004924:	d90e      	bls.n	8004944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	b2da      	uxtb	r2, r3
 8004932:	8979      	ldrh	r1, [r7, #10]
 8004934:	2300      	movs	r3, #0
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb45 	bl	8004fcc <I2C_TransferConfig>
 8004942:	e00f      	b.n	8004964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	b2da      	uxtb	r2, r3
 8004954:	8979      	ldrh	r1, [r7, #10]
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fb34 	bl	8004fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f94d 	bl	8004c08 <I2C_WaitOnTXISFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e07b      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d034      	beq.n	8004a1c <HAL_I2C_Mem_Write+0x1c8>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d130      	bne.n	8004a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f8df 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04d      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2bff      	cmp	r3, #255	; 0xff
 80049dc:	d90e      	bls.n	80049fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	22ff      	movs	r2, #255	; 0xff
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	2300      	movs	r3, #0
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fae9 	bl	8004fcc <I2C_TransferConfig>
 80049fa:	e00f      	b.n	8004a1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	8979      	ldrh	r1, [r7, #10]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fad8 	bl	8004fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d19e      	bne.n	8004964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f92c 	bl	8004c88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e01a      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_I2C_Mem_Write+0x224>)
 8004a4e:	400b      	ands	r3, r1
 8004a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	fe00e800 	.word	0xfe00e800

08004a7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8a:	b2db      	uxtb	r3, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <I2C_RequestMemoryWrite+0xa4>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fa83 	bl	8004fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f89c 	bl	8004c08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e02c      	b.n	8004b34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae0:	893b      	ldrh	r3, [r7, #8]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aea:	e015      	b.n	8004b18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f882 	bl	8004c08 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e012      	b.n	8004b34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0e:	893b      	ldrh	r3, [r7, #8]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f830 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	80002000 	.word	0x80002000

08004b40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d103      	bne.n	8004b5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d007      	beq.n	8004b7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	619a      	str	r2, [r3, #24]
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e022      	b.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d01e      	beq.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7fd fdcb 	bl	800273c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d113      	bne.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e00f      	b.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4013      	ands	r3, r2
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d0cd      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c14:	e02c      	b.n	8004c70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f8ea 	bl	8004df4 <I2C_IsErrorOccurred>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e02a      	b.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d01e      	beq.n	8004c70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fd fd83 	bl	800273c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d113      	bne.n	8004c70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d1cb      	bne.n	8004c16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c94:	e028      	b.n	8004ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f8aa 	bl	8004df4 <I2C_IsErrorOccurred>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e026      	b.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fd fd47 	bl	800273c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e007      	b.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d1cf      	bne.n	8004c96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d0c:	e064      	b.n	8004dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f86e 	bl	8004df4 <I2C_IsErrorOccurred>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e062      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d138      	bne.n	8004da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d105      	bne.n	8004d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e04e      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d107      	bne.n	8004d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2204      	movs	r2, #4
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
 8004d66:	e002      	b.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2220      	movs	r2, #32
 8004d74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e022      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fd fccb 	bl	800273c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d193      	bne.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	fe00e800 	.word	0xfe00e800

08004df4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d075      	beq.n	8004f0c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2210      	movs	r2, #16
 8004e26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e28:	e056      	b.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d052      	beq.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fd fc83 	bl	800273c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_IsErrorOccurred+0x54>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d147      	bne.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6a:	d12e      	bne.n	8004eca <I2C_IsErrorOccurred+0xd6>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e72:	d02a      	beq.n	8004eca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d027      	beq.n	8004eca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e8a:	f7fd fc57 	bl	800273c <HAL_GetTick>
 8004e8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e90:	e01b      	b.n	8004eca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e92:	f7fd fc53 	bl	800273c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b19      	cmp	r3, #25
 8004e9e:	d914      	bls.n	8004eca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d1dc      	bne.n	8004e92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d003      	beq.n	8004eee <I2C_IsErrorOccurred+0xfa>
 8004ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d09d      	beq.n	8004e2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2220      	movs	r2, #32
 8004efc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01c      	beq.n	8004fbc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fddc 	bl	8004b40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <I2C_IsErrorOccurred+0x1d4>)
 8004f94:	400b      	ands	r3, r1
 8004f96:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3728      	adds	r7, #40	; 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	fe00e800 	.word	0xfe00e800

08004fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	817b      	strh	r3, [r7, #10]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fe4:	7a7b      	ldrb	r3, [r7, #9]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ffa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	0d5b      	lsrs	r3, r3, #21
 8005006:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <I2C_TransferConfig+0x60>)
 800500c:	430b      	orrs	r3, r1
 800500e:	43db      	mvns	r3, r3
 8005010:	ea02 0103 	and.w	r1, r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	03ff63ff 	.word	0x03ff63ff

08005030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d138      	bne.n	80050b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005050:	2302      	movs	r3, #2
 8005052:	e032      	b.n	80050ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d139      	bne.n	8005150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e033      	b.n	8005152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	; 0x24
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40007000 	.word	0x40007000

08005180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <HAL_PWREx_GetVoltageRange+0x18>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40007000 	.word	0x40007000

0800519c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051aa:	d130      	bne.n	800520e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ac:	4b23      	ldr	r3, [pc, #140]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b8:	d038      	beq.n	800522c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2232      	movs	r2, #50	; 0x32
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0c9b      	lsrs	r3, r3, #18
 80051dc:	3301      	adds	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e0:	e002      	b.n	80051e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d102      	bne.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f2      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d110      	bne.n	800522c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e00f      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d007      	beq.n	800522c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005224:	4a05      	ldr	r2, [pc, #20]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40007000 	.word	0x40007000
 8005240:	20000014 	.word	0x20000014
 8005244:	431bde83 	.word	0x431bde83

08005248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f000 bc02 	b.w	8005a60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525c:	4b96      	ldr	r3, [pc, #600]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005266:	4b94      	ldr	r3, [pc, #592]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80e4 	beq.w	8005446 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_RCC_OscConfig+0x4c>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b0c      	cmp	r3, #12
 8005288:	f040 808b 	bne.w	80053a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b01      	cmp	r3, #1
 8005290:	f040 8087 	bne.w	80053a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005294:	4b88      	ldr	r3, [pc, #544]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_OscConfig+0x64>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e3d9      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_RCC_OscConfig+0x7e>
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c4:	e005      	b.n	80052d2 <HAL_RCC_OscConfig+0x8a>
 80052c6:	4b7c      	ldr	r3, [pc, #496]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d223      	bcs.n	800531e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fd8c 	bl	8005df8 <RCC_SetFlashLatencyFromMSIRange>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e3ba      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ea:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a72      	ldr	r2, [pc, #456]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052f0:	f043 0308 	orr.w	r3, r3, #8
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	496d      	ldr	r1, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005308:	4b6b      	ldr	r3, [pc, #428]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	4968      	ldr	r1, [pc, #416]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
 800531c:	e025      	b.n	800536a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800531e:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4960      	ldr	r1, [pc, #384]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533c:	4b5e      	ldr	r3, [pc, #376]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	495b      	ldr	r1, [pc, #364]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fd4c 	bl	8005df8 <RCC_SetFlashLatencyFromMSIRange>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e37a      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800536a:	f000 fc81 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800536e:	4602      	mov	r2, r0
 8005370:	4b51      	ldr	r3, [pc, #324]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	4950      	ldr	r1, [pc, #320]	; (80054bc <HAL_RCC_OscConfig+0x274>)
 800537c:	5ccb      	ldrb	r3, [r1, r3]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	4a4e      	ldr	r2, [pc, #312]	; (80054c0 <HAL_RCC_OscConfig+0x278>)
 8005388:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800538a:	4b4e      	ldr	r3, [pc, #312]	; (80054c4 <HAL_RCC_OscConfig+0x27c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fd f984 	bl	800269c <HAL_InitTick>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d052      	beq.n	8005444 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	e35e      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d032      	beq.n	8005410 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053b6:	f7fd f9c1 	bl	800273c <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053be:	f7fd f9bd 	bl	800273c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e347      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053d0:	4b39      	ldr	r3, [pc, #228]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053dc:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a35      	ldr	r2, [pc, #212]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053e2:	f043 0308 	orr.w	r3, r3, #8
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	4930      	ldr	r1, [pc, #192]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053fa:	4b2f      	ldr	r3, [pc, #188]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	492b      	ldr	r1, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
 800540e:	e01a      	b.n	8005446 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005410:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a28      	ldr	r2, [pc, #160]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800541c:	f7fd f98e 	bl	800273c <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005424:	f7fd f98a 	bl	800273c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e314      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x1dc>
 8005442:	e000      	b.n	8005446 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005444:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d073      	beq.n	800553a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d005      	beq.n	8005464 <HAL_RCC_OscConfig+0x21c>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b0c      	cmp	r3, #12
 800545c:	d10e      	bne.n	800547c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d10b      	bne.n	800547c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d063      	beq.n	8005538 <HAL_RCC_OscConfig+0x2f0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d15f      	bne.n	8005538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e2f1      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005484:	d106      	bne.n	8005494 <HAL_RCC_OscConfig+0x24c>
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e025      	b.n	80054e0 <HAL_RCC_OscConfig+0x298>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800549c:	d114      	bne.n	80054c8 <HAL_RCC_OscConfig+0x280>
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80054a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a02      	ldr	r2, [pc, #8]	; (80054b8 <HAL_RCC_OscConfig+0x270>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	e013      	b.n	80054e0 <HAL_RCC_OscConfig+0x298>
 80054b8:	40021000 	.word	0x40021000
 80054bc:	0800aa9c 	.word	0x0800aa9c
 80054c0:	20000014 	.word	0x20000014
 80054c4:	20000018 	.word	0x20000018
 80054c8:	4ba0      	ldr	r3, [pc, #640]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a9f      	ldr	r2, [pc, #636]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80054ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	4b9d      	ldr	r3, [pc, #628]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a9c      	ldr	r2, [pc, #624]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80054da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d013      	beq.n	8005510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd f928 	bl	800273c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f0:	f7fd f924 	bl	800273c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e2ae      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005502:	4b92      	ldr	r3, [pc, #584]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x2a8>
 800550e:	e014      	b.n	800553a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fd f914 	bl	800273c <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005518:	f7fd f910 	bl	800273c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e29a      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552a:	4b88      	ldr	r3, [pc, #544]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x2d0>
 8005536:	e000      	b.n	800553a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d060      	beq.n	8005608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d005      	beq.n	8005558 <HAL_RCC_OscConfig+0x310>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d119      	bne.n	8005586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d116      	bne.n	8005586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005558:	4b7c      	ldr	r3, [pc, #496]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_OscConfig+0x328>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e277      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	4973      	ldr	r1, [pc, #460]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005584:	e040      	b.n	8005608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d023      	beq.n	80055d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800558e:	4b6f      	ldr	r3, [pc, #444]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6e      	ldr	r2, [pc, #440]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fd f8cf 	bl	800273c <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fd f8cb 	bl	800273c <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e255      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b4:	4b65      	ldr	r3, [pc, #404]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b62      	ldr	r3, [pc, #392]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	495f      	ldr	r1, [pc, #380]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	e018      	b.n	8005608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b5d      	ldr	r3, [pc, #372]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5c      	ldr	r2, [pc, #368]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fd f8ab 	bl	800273c <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fd f8a7 	bl	800273c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e231      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03c      	beq.n	800568e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01c      	beq.n	8005656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800561c:	4b4b      	ldr	r3, [pc, #300]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	4a4a      	ldr	r2, [pc, #296]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fd f886 	bl	800273c <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005634:	f7fd f882 	bl	800273c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e20c      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <HAL_RCC_OscConfig+0x3ec>
 8005654:	e01b      	b.n	800568e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005656:	4b3d      	ldr	r3, [pc, #244]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565c:	4a3b      	ldr	r2, [pc, #236]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fd f869 	bl	800273c <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566e:	f7fd f865 	bl	800273c <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e1ef      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005680:	4b32      	ldr	r3, [pc, #200]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1ef      	bne.n	800566e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80a6 	beq.w	80057e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569c:	2300      	movs	r3, #0
 800569e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	4a26      	ldr	r2, [pc, #152]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6593      	str	r3, [r2, #88]	; 0x58
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_RCC_OscConfig+0x504>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCC_OscConfig+0x508>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d118      	bne.n	8005706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <HAL_RCC_OscConfig+0x508>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_RCC_OscConfig+0x508>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e0:	f7fd f82c 	bl	800273c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fd f828 	bl	800273c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e1b2      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_RCC_OscConfig+0x508>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d108      	bne.n	8005720 <HAL_RCC_OscConfig+0x4d8>
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800571e:	e029      	b.n	8005774 <HAL_RCC_OscConfig+0x52c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b05      	cmp	r3, #5
 8005726:	d115      	bne.n	8005754 <HAL_RCC_OscConfig+0x50c>
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	4a07      	ldr	r2, [pc, #28]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <HAL_RCC_OscConfig+0x504>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	4a03      	ldr	r2, [pc, #12]	; (800574c <HAL_RCC_OscConfig+0x504>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005748:	e014      	b.n	8005774 <HAL_RCC_OscConfig+0x52c>
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	40007000 	.word	0x40007000
 8005754:	4b9a      	ldr	r3, [pc, #616]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	4a99      	ldr	r2, [pc, #612]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	4a95      	ldr	r2, [pc, #596]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d016      	beq.n	80057aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc ffde 	bl	800273c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fc ffda 	bl	800273c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e162      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800579a:	4b89      	ldr	r3, [pc, #548]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ed      	beq.n	8005784 <HAL_RCC_OscConfig+0x53c>
 80057a8:	e015      	b.n	80057d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fc ffc7 	bl	800273c <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b0:	e00a      	b.n	80057c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f7fc ffc3 	bl	800273c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e14b      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c8:	4b7d      	ldr	r3, [pc, #500]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ed      	bne.n	80057b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057d6:	7ffb      	ldrb	r3, [r7, #31]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057dc:	4b78      	ldr	r3, [pc, #480]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	4a77      	ldr	r2, [pc, #476]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80057e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d03c      	beq.n	800586e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01c      	beq.n	8005836 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057fc:	4b70      	ldr	r3, [pc, #448]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80057fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005802:	4a6f      	ldr	r2, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fc ff96 	bl	800273c <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005814:	f7fc ff92 	bl	800273c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e11c      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005826:	4b66      	ldr	r3, [pc, #408]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ef      	beq.n	8005814 <HAL_RCC_OscConfig+0x5cc>
 8005834:	e01b      	b.n	800586e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005836:	4b62      	ldr	r3, [pc, #392]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800583c:	4a60      	ldr	r2, [pc, #384]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fc ff79 	bl	800273c <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800584e:	f7fc ff75 	bl	800273c <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e0ff      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005860:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ef      	bne.n	800584e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80f3 	beq.w	8005a5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	2b02      	cmp	r3, #2
 800587e:	f040 80c9 	bne.w	8005a14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005882:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	429a      	cmp	r2, r3
 8005894:	d12c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	3b01      	subs	r3, #1
 80058a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d123      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d11b      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d113      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d109      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d06b      	beq.n	80059c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d062      	beq.n	80059bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058f6:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0ac      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800590c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005910:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005912:	f7fc ff13 	bl	800273c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fc ff0f 	bl	800273c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e099      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCC_OscConfig+0x77c>)
 800593e:	4013      	ands	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005948:	3a01      	subs	r2, #1
 800594a:	0112      	lsls	r2, r2, #4
 800594c:	4311      	orrs	r1, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005952:	0212      	lsls	r2, r2, #8
 8005954:	4311      	orrs	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800595a:	0852      	lsrs	r2, r2, #1
 800595c:	3a01      	subs	r2, #1
 800595e:	0552      	lsls	r2, r2, #21
 8005960:	4311      	orrs	r1, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005966:	0852      	lsrs	r2, r2, #1
 8005968:	3a01      	subs	r2, #1
 800596a:	0652      	lsls	r2, r2, #25
 800596c:	4311      	orrs	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005972:	06d2      	lsls	r2, r2, #27
 8005974:	430a      	orrs	r2, r1
 8005976:	4912      	ldr	r1, [pc, #72]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005978:	4313      	orrs	r3, r2
 800597a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 800598e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005994:	f7fc fed2 	bl	800273c <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599c:	f7fc fece 	bl	800273c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e058      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <HAL_RCC_OscConfig+0x778>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ba:	e050      	b.n	8005a5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e04f      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
 80059c0:	40021000 	.word	0x40021000
 80059c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d144      	bne.n	8005a5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 80059da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059e0:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 80059e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059ec:	f7fc fea6 	bl	800273c <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fc fea2 	bl	800273c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e02c      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x7ac>
 8005a12:	e024      	b.n	8005a5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d01f      	beq.n	8005a5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fc fe89 	bl	800273c <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2e:	f7fc fe85 	bl	800273c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e00f      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	4905      	ldr	r1, [pc, #20]	; (8005a68 <HAL_RCC_OscConfig+0x820>)
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_RCC_OscConfig+0x824>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60cb      	str	r3, [r1, #12]
 8005a58:	e001      	b.n	8005a5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	feeefffc 	.word	0xfeeefffc

08005a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0e7      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b75      	ldr	r3, [pc, #468]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d910      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b72      	ldr	r3, [pc, #456]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	4970      	ldr	r1, [pc, #448]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b6e      	ldr	r3, [pc, #440]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0cf      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d908      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	4960      	ldr	r1, [pc, #384]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04c      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	4b5a      	ldr	r3, [pc, #360]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d121      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0a6      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0e:	4b54      	ldr	r3, [pc, #336]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d115      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e09a      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b26:	4b4e      	ldr	r3, [pc, #312]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e08e      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e086      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4943      	ldr	r1, [pc, #268]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b58:	f7fc fdf0 	bl	800273c <HAL_GetTick>
 8005b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fc fdec 	bl	800273c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e06e      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	4b3a      	ldr	r3, [pc, #232]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 020c 	and.w	r2, r3, #12
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1eb      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d208      	bcs.n	8005bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	492b      	ldr	r1, [pc, #172]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d210      	bcs.n	8005be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 0207 	bic.w	r2, r3, #7
 8005bcc:	4923      	ldr	r1, [pc, #140]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd4:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e036      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4918      	ldr	r1, [pc, #96]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4910      	ldr	r1, [pc, #64]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c24:	f000 f824 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	490b      	ldr	r1, [pc, #44]	; (8005c64 <HAL_RCC_ClockConfig+0x1f4>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1f8>)
 8005c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c44:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x1fc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fc fd27 	bl	800269c <HAL_InitTick>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c52:	7afb      	ldrb	r3, [r7, #11]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40022000 	.word	0x40022000
 8005c60:	40021000 	.word	0x40021000
 8005c64:	0800aa9c 	.word	0x0800aa9c
 8005c68:	20000014 	.word	0x20000014
 8005c6c:	20000018 	.word	0x20000018

08005c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c88:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d121      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11e      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ca4:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d102      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e004      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b0c      	cmp	r3, #12
 8005cfc:	d134      	bne.n	8005d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d003      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0xac>
 8005d14:	e005      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d18:	617b      	str	r3, [r7, #20]
      break;
 8005d1a:	e005      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d1e:	617b      	str	r3, [r7, #20]
      break;
 8005d20:	e002      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	617b      	str	r3, [r7, #20]
      break;
 8005d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	3301      	adds	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	fb03 f202 	mul.w	r2, r3, r2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	0e5b      	lsrs	r3, r3, #25
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d68:	69bb      	ldr	r3, [r7, #24]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	0800aab4 	.word	0x0800aab4
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	007a1200 	.word	0x007a1200

08005d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000014 	.word	0x20000014

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005da4:	f7ff fff0 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	0800aaac 	.word	0x0800aaac

08005dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dd0:	f7ff ffda 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	0adb      	lsrs	r3, r3, #11
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4904      	ldr	r1, [pc, #16]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	0800aaac 	.word	0x0800aaac

08005df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e04:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e10:	f7ff f9b6 	bl	8005180 <HAL_PWREx_GetVoltageRange>
 8005e14:	6178      	str	r0, [r7, #20]
 8005e16:	e014      	b.n	8005e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6593      	str	r3, [r2, #88]	; 0x58
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e30:	f7ff f9a6 	bl	8005180 <HAL_PWREx_GetVoltageRange>
 8005e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d10b      	bne.n	8005e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d919      	bls.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2ba0      	cmp	r3, #160	; 0xa0
 8005e54:	d902      	bls.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e56:	2302      	movs	r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e013      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	e010      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b80      	cmp	r3, #128	; 0x80
 8005e66:	d902      	bls.n	8005e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e68:	2303      	movs	r3, #3
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e00a      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d102      	bne.n	8005e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e74:	2302      	movs	r3, #2
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e004      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d101      	bne.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e80:	2301      	movs	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 0207 	bic.w	r2, r3, #7
 8005e8c:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40022000 	.word	0x40022000

08005eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d031      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005edc:	d01a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ee2:	d814      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005eee:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	4a5c      	ldr	r2, [pc, #368]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005efa:	e00c      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f9de 	bl	80062c4 <RCCEx_PLLSAI1_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f0c:	e003      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	74fb      	strb	r3, [r7, #19]
      break;
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f16:	7cfb      	ldrb	r3, [r7, #19]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f1c:	4b51      	ldr	r3, [pc, #324]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	494e      	ldr	r1, [pc, #312]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 809e 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f46:	2300      	movs	r3, #0
 8005f48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f4a:	4b46      	ldr	r3, [pc, #280]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f60:	4b40      	ldr	r3, [pc, #256]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	4a3f      	ldr	r2, [pc, #252]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6c:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7c:	4b3a      	ldr	r3, [pc, #232]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a39      	ldr	r2, [pc, #228]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f88:	f7fc fbd8 	bl	800273c <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f8e:	e009      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fc fbd4 	bl	800273c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d902      	bls.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fa4:	4b30      	ldr	r3, [pc, #192]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0ef      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d15a      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01e      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d019      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fdc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fde:	4b21      	ldr	r3, [pc, #132]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ffe:	4a19      	ldr	r2, [pc, #100]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d016      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc fb94 	bl	800273c <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006016:	e00b      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fc fb90 	bl	800273c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d902      	bls.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	74fb      	strb	r3, [r7, #19]
            break;
 800602e:	e006      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ec      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800603e:	7cfb      	ldrb	r3, [r7, #19]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	4904      	ldr	r1, [pc, #16]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800605a:	e009      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800605c:	7cfb      	ldrb	r3, [r7, #19]
 800605e:	74bb      	strb	r3, [r7, #18]
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006070:	7c7b      	ldrb	r3, [r7, #17]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d105      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006076:	4b8a      	ldr	r3, [pc, #552]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4a89      	ldr	r2, [pc, #548]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800607c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006080:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800608e:	4b84      	ldr	r3, [pc, #528]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f023 0203 	bic.w	r2, r3, #3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	4980      	ldr	r1, [pc, #512]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060b0:	4b7b      	ldr	r3, [pc, #492]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f023 020c 	bic.w	r2, r3, #12
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	4978      	ldr	r1, [pc, #480]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060d2:	4b73      	ldr	r3, [pc, #460]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	496f      	ldr	r1, [pc, #444]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f4:	4b6a      	ldr	r3, [pc, #424]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	4967      	ldr	r1, [pc, #412]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006116:	4b62      	ldr	r3, [pc, #392]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	495e      	ldr	r1, [pc, #376]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006138:	4b59      	ldr	r3, [pc, #356]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	4956      	ldr	r1, [pc, #344]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800615a:	4b51      	ldr	r3, [pc, #324]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	494d      	ldr	r1, [pc, #308]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d028      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800617c:	4b48      	ldr	r3, [pc, #288]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	4945      	ldr	r1, [pc, #276]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619a:	d106      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619c:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a3f      	ldr	r2, [pc, #252]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a6:	60d3      	str	r3, [r2, #12]
 80061a8:	e011      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b2:	d10c      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f882 	bl	80062c4 <RCCEx_PLLSAI1_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061c4:	7cfb      	ldrb	r3, [r7, #19]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80061ca:	7cfb      	ldrb	r3, [r7, #19]
 80061cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d028      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061da:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	492d      	ldr	r1, [pc, #180]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f8:	d106      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061fa:	4b29      	ldr	r3, [pc, #164]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4a28      	ldr	r2, [pc, #160]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006204:	60d3      	str	r3, [r2, #12]
 8006206:	e011      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006210:	d10c      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3304      	adds	r3, #4
 8006216:	2101      	movs	r1, #1
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f853 	bl	80062c4 <RCCEx_PLLSAI1_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01c      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006238:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006246:	4916      	ldr	r1, [pc, #88]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006256:	d10c      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	2102      	movs	r1, #2
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f830 	bl	80062c4 <RCCEx_PLLSAI1_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006268:	7cfb      	ldrb	r3, [r7, #19]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	4904      	ldr	r1, [pc, #16]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006294:	7cbb      	ldrb	r3, [r7, #18]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40021000 	.word	0x40021000

080062a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062ae:	f043 0304 	orr.w	r3, r3, #4
 80062b2:	6013      	str	r3, [r2, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40021000 	.word	0x40021000

080062c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062d2:	4b74      	ldr	r3, [pc, #464]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062de:	4b71      	ldr	r3, [pc, #452]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0203 	and.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d10d      	bne.n	800630a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
       ||
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80062f6:	4b6b      	ldr	r3, [pc, #428]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
       ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d047      	beq.n	800639a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
 800630e:	e044      	b.n	800639a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d018      	beq.n	800634a <RCCEx_PLLSAI1_Config+0x86>
 8006318:	2b03      	cmp	r3, #3
 800631a:	d825      	bhi.n	8006368 <RCCEx_PLLSAI1_Config+0xa4>
 800631c:	2b01      	cmp	r3, #1
 800631e:	d002      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x62>
 8006320:	2b02      	cmp	r3, #2
 8006322:	d009      	beq.n	8006338 <RCCEx_PLLSAI1_Config+0x74>
 8006324:	e020      	b.n	8006368 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006326:	4b5f      	ldr	r3, [pc, #380]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d11d      	bne.n	800636e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006336:	e01a      	b.n	800636e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006338:	4b5a      	ldr	r3, [pc, #360]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d116      	bne.n	8006372 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006348:	e013      	b.n	8006372 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800634a:	4b56      	ldr	r3, [pc, #344]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10f      	bne.n	8006376 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006356:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006366:	e006      	b.n	8006376 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
      break;
 800636c:	e004      	b.n	8006378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006376:	bf00      	nop
    }

    if(status == HAL_OK)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800637e:	4b49      	ldr	r3, [pc, #292]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	3b01      	subs	r3, #1
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	430b      	orrs	r3, r1
 8006394:	4943      	ldr	r1, [pc, #268]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d17c      	bne.n	800649a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063a0:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a3f      	ldr	r2, [pc, #252]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ac:	f7fc f9c6 	bl	800273c <HAL_GetTick>
 80063b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063b2:	e009      	b.n	80063c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063b4:	f7fc f9c2 	bl	800273c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d902      	bls.n	80063c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	73fb      	strb	r3, [r7, #15]
        break;
 80063c6:	e005      	b.n	80063d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063c8:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1ef      	bne.n	80063b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d15f      	bne.n	800649a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80063e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6892      	ldr	r2, [r2, #8]
 80063f0:	0211      	lsls	r1, r2, #8
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68d2      	ldr	r2, [r2, #12]
 80063f6:	06d2      	lsls	r2, r2, #27
 80063f8:	430a      	orrs	r2, r1
 80063fa:	492a      	ldr	r1, [pc, #168]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	610b      	str	r3, [r1, #16]
 8006400:	e027      	b.n	8006452 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d112      	bne.n	800642e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006408:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006410:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6892      	ldr	r2, [r2, #8]
 8006418:	0211      	lsls	r1, r2, #8
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6912      	ldr	r2, [r2, #16]
 800641e:	0852      	lsrs	r2, r2, #1
 8006420:	3a01      	subs	r2, #1
 8006422:	0552      	lsls	r2, r2, #21
 8006424:	430a      	orrs	r2, r1
 8006426:	491f      	ldr	r1, [pc, #124]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	610b      	str	r3, [r1, #16]
 800642c:	e011      	b.n	8006452 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800642e:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6892      	ldr	r2, [r2, #8]
 800643e:	0211      	lsls	r1, r2, #8
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6952      	ldr	r2, [r2, #20]
 8006444:	0852      	lsrs	r2, r2, #1
 8006446:	3a01      	subs	r2, #1
 8006448:	0652      	lsls	r2, r2, #25
 800644a:	430a      	orrs	r2, r1
 800644c:	4915      	ldr	r1, [pc, #84]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006452:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800645c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fc f96d 	bl	800273c <HAL_GetTick>
 8006462:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006464:	e009      	b.n	800647a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006466:	f7fc f969 	bl	800273c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d902      	bls.n	800647a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	73fb      	strb	r3, [r7, #15]
          break;
 8006478:	e005      	b.n	8006486 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0ef      	beq.n	8006466 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006496:	4313      	orrs	r3, r2
 8006498:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40021000 	.word	0x40021000

080064a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e095      	b.n	80065e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d108      	bne.n	80064d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d009      	beq.n	80064e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
 80064d2:	e005      	b.n	80064e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fb fc44 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006520:	d902      	bls.n	8006528 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e002      	b.n	800652e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800652c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006536:	d007      	beq.n	8006548 <HAL_SPI_Init+0xa0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006540:	d002      	beq.n	8006548 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	ea42 0103 	orr.w	r1, r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	f003 0204 	and.w	r2, r3, #4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b088      	sub	sp, #32
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_SPI_Transmit+0x22>
 800660c:	2302      	movs	r3, #2
 800660e:	e158      	b.n	80068c2 <HAL_SPI_Transmit+0x2d4>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006618:	f7fc f890 	bl	800273c <HAL_GetTick>
 800661c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	d002      	beq.n	8006634 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006632:	e13d      	b.n	80068b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_SPI_Transmit+0x52>
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006644:	e134      	b.n	80068b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	d10f      	bne.n	80066b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d007      	beq.n	80066d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d8:	d94b      	bls.n	8006772 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_Transmit+0xfa>
 80066e2:	8afb      	ldrh	r3, [r7, #22]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d13e      	bne.n	8006766 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800670c:	e02b      	b.n	8006766 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d112      	bne.n	8006742 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006740:	e011      	b.n	8006766 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006742:	f7fb fffb 	bl	800273c <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d803      	bhi.n	800675a <HAL_SPI_Transmit+0x16c>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d102      	bne.n	8006760 <HAL_SPI_Transmit+0x172>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006764:	e0a4      	b.n	80068b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ce      	bne.n	800670e <HAL_SPI_Transmit+0x120>
 8006770:	e07c      	b.n	800686c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Transmit+0x192>
 800677a:	8afb      	ldrh	r3, [r7, #22]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d170      	bne.n	8006862 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d912      	bls.n	80067b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	881a      	ldrh	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b02      	subs	r3, #2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067ae:	e058      	b.n	8006862 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80067d6:	e044      	b.n	8006862 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d12b      	bne.n	800683e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d912      	bls.n	8006816 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b02      	subs	r3, #2
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006814:	e025      	b.n	8006862 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800683c:	e011      	b.n	8006862 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683e:	f7fb ff7d 	bl	800273c <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d803      	bhi.n	8006856 <HAL_SPI_Transmit+0x268>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d102      	bne.n	800685c <HAL_SPI_Transmit+0x26e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006860:	e026      	b.n	80068b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1b5      	bne.n	80067d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f949 	bl	8006b08 <SPI_EndRxTxTransaction>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e000      	b.n	80068b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80068ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068dc:	f7fb ff2e 	bl	800273c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4413      	add	r3, r2
 80068ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068ec:	f7fb ff26 	bl	800273c <HAL_GetTick>
 80068f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068f2:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	015b      	lsls	r3, r3, #5
 80068f8:	0d1b      	lsrs	r3, r3, #20
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	fb02 f303 	mul.w	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006902:	e054      	b.n	80069ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d050      	beq.n	80069ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800690c:	f7fb ff16 	bl	800273c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	429a      	cmp	r2, r3
 800691a:	d902      	bls.n	8006922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d13d      	bne.n	800699e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693a:	d111      	bne.n	8006960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006944:	d004      	beq.n	8006950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694e:	d107      	bne.n	8006960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006968:	d10f      	bne.n	800698a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e017      	b.n	80069ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4013      	ands	r3, r2
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	bf0c      	ite	eq
 80069be:	2301      	moveq	r3, #1
 80069c0:	2300      	movne	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d19b      	bne.n	8006904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000014 	.word	0x20000014

080069dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	; 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069ee:	f7fb fea5 	bl	800273c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	4413      	add	r3, r2
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069fe:	f7fb fe9d 	bl	800273c <HAL_GetTick>
 8006a02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a0c:	4b3d      	ldr	r3, [pc, #244]	; (8006b04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	00da      	lsls	r2, r3, #3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	0d1b      	lsrs	r3, r3, #20
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a24:	e060      	b.n	8006ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a2c:	d107      	bne.n	8006a3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d050      	beq.n	8006ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a46:	f7fb fe79 	bl	800273c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d902      	bls.n	8006a5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d13d      	bne.n	8006ad8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a74:	d111      	bne.n	8006a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7e:	d004      	beq.n	8006a8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a88:	d107      	bne.n	8006a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa2:	d10f      	bne.n	8006ac4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ac2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e010      	b.n	8006afa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4013      	ands	r3, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d196      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3728      	adds	r7, #40	; 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000014 	.word	0x20000014

08006b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff ff5b 	bl	80069dc <SPI_WaitFifoStateUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e027      	b.n	8006b8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	2180      	movs	r1, #128	; 0x80
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fec0 	bl	80068cc <SPI_WaitFlagStateUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b56:	f043 0220 	orr.w	r2, r3, #32
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e014      	b.n	8006b8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ff34 	bl	80069dc <SPI_WaitFifoStateUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7e:	f043 0220 	orr.w	r2, r3, #32
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e000      	b.n	8006b8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e049      	b.n	8006c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fb fbe0 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f000 feae 	bl	8007934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e033      	b.n	8006cc4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <HAL_TIM_Base_Start+0x8c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_TIM_Base_Start+0x3e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d004      	beq.n	8006c82 <HAL_TIM_Base_Start+0x3e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <HAL_TIM_Base_Start+0x90>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d115      	bne.n	8006cae <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <HAL_TIM_Base_Start+0x94>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d015      	beq.n	8006cc0 <HAL_TIM_Base_Start+0x7c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9a:	d011      	beq.n	8006cc0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cac:	e008      	b.n	8006cc0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e000      	b.n	8006cc2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	00010007 	.word	0x00010007

08006cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d001      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e03b      	b.n	8006d6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a19      	ldr	r2, [pc, #100]	; (8006d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_TIM_Base_Start_IT+0x4e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIM_Base_Start_IT+0x4e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d115      	bne.n	8006d56 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <HAL_TIM_Base_Start_IT+0xa4>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b06      	cmp	r3, #6
 8006d3a:	d015      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x8c>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d42:	d011      	beq.n	8006d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	e008      	b.n	8006d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e000      	b.n	8006d6a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	00010007 	.word	0x00010007

08006d84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <HAL_TIM_Base_Stop_IT+0x48>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	f240 4344 	movw	r3, #1092	; 0x444
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_Base_Stop_IT+0x48>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e049      	b.n	8006e88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f841 	bl	8006e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fd87 	bl	8007934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e049      	b.n	8006f4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f841 	bl	8006f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f000 fd26 	bl	8007934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_IC_Start_IT+0x1e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e023      	b.n	8006fce <HAL_TIM_IC_Start_IT+0x66>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_IC_Start_IT+0x2e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e01b      	b.n	8006fce <HAL_TIM_IC_Start_IT+0x66>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_IC_Start_IT+0x3e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e013      	b.n	8006fce <HAL_TIM_IC_Start_IT+0x66>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b0c      	cmp	r3, #12
 8006faa:	d104      	bne.n	8006fb6 <HAL_TIM_IC_Start_IT+0x4e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	e00b      	b.n	8006fce <HAL_TIM_IC_Start_IT+0x66>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_IC_Start_IT+0x5e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e003      	b.n	8006fce <HAL_TIM_IC_Start_IT+0x66>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <HAL_TIM_IC_Start_IT+0x78>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e013      	b.n	8007008 <HAL_TIM_IC_Start_IT+0xa0>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d104      	bne.n	8006ff0 <HAL_TIM_IC_Start_IT+0x88>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e00b      	b.n	8007008 <HAL_TIM_IC_Start_IT+0xa0>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d104      	bne.n	8007000 <HAL_TIM_IC_Start_IT+0x98>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	e003      	b.n	8007008 <HAL_TIM_IC_Start_IT+0xa0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007006:	b2db      	uxtb	r3, r3
 8007008:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d102      	bne.n	8007016 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007010:	7b7b      	ldrb	r3, [r7, #13]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d001      	beq.n	800701a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e0c9      	b.n	80071ae <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <HAL_TIM_IC_Start_IT+0xc2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007028:	e023      	b.n	8007072 <HAL_TIM_IC_Start_IT+0x10a>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d104      	bne.n	800703a <HAL_TIM_IC_Start_IT+0xd2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007038:	e01b      	b.n	8007072 <HAL_TIM_IC_Start_IT+0x10a>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d104      	bne.n	800704a <HAL_TIM_IC_Start_IT+0xe2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007048:	e013      	b.n	8007072 <HAL_TIM_IC_Start_IT+0x10a>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b0c      	cmp	r3, #12
 800704e:	d104      	bne.n	800705a <HAL_TIM_IC_Start_IT+0xf2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007058:	e00b      	b.n	8007072 <HAL_TIM_IC_Start_IT+0x10a>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b10      	cmp	r3, #16
 800705e:	d104      	bne.n	800706a <HAL_TIM_IC_Start_IT+0x102>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007068:	e003      	b.n	8007072 <HAL_TIM_IC_Start_IT+0x10a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_TIM_IC_Start_IT+0x11a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007080:	e013      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x142>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d104      	bne.n	8007092 <HAL_TIM_IC_Start_IT+0x12a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007090:	e00b      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x142>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_IC_Start_IT+0x13a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070a0:	e003      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x142>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b0c      	cmp	r3, #12
 80070ae:	d841      	bhi.n	8007134 <HAL_TIM_IC_Start_IT+0x1cc>
 80070b0:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <HAL_TIM_IC_Start_IT+0x150>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070ed 	.word	0x080070ed
 80070bc:	08007135 	.word	0x08007135
 80070c0:	08007135 	.word	0x08007135
 80070c4:	08007135 	.word	0x08007135
 80070c8:	080070ff 	.word	0x080070ff
 80070cc:	08007135 	.word	0x08007135
 80070d0:	08007135 	.word	0x08007135
 80070d4:	08007135 	.word	0x08007135
 80070d8:	08007111 	.word	0x08007111
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007135 	.word	0x08007135
 80070e4:	08007135 	.word	0x08007135
 80070e8:	08007123 	.word	0x08007123
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0202 	orr.w	r2, r2, #2
 80070fa:	60da      	str	r2, [r3, #12]
      break;
 80070fc:	e01d      	b.n	800713a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f042 0204 	orr.w	r2, r2, #4
 800710c:	60da      	str	r2, [r3, #12]
      break;
 800710e:	e014      	b.n	800713a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0208 	orr.w	r2, r2, #8
 800711e:	60da      	str	r2, [r3, #12]
      break;
 8007120:	e00b      	b.n	800713a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0210 	orr.w	r2, r2, #16
 8007130:	60da      	str	r2, [r3, #12]
      break;
 8007132:	e002      	b.n	800713a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	bf00      	nop
  }

  if (status == HAL_OK)
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d135      	bne.n	80071ac <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f87b 	bl	8008244 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <HAL_TIM_IC_Start_IT+0x250>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_TIM_IC_Start_IT+0x204>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d004      	beq.n	800716c <HAL_TIM_IC_Start_IT+0x204>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <HAL_TIM_IC_Start_IT+0x254>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d115      	bne.n	8007198 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <HAL_TIM_IC_Start_IT+0x258>)
 8007174:	4013      	ands	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b06      	cmp	r3, #6
 800717c:	d015      	beq.n	80071aa <HAL_TIM_IC_Start_IT+0x242>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d011      	beq.n	80071aa <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007196:	e008      	b.n	80071aa <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e000      	b.n	80071ac <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40014000 	.word	0x40014000
 80071c0:	00010007 	.word	0x00010007

080071c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0202 	mvn.w	r2, #2
 80071f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa fcc8 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb71 	bl	80078f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb78 	bl	800790a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b04      	cmp	r3, #4
 800722c:	d122      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d11b      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0204 	mvn.w	r2, #4
 8007244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa fc9e 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 8007260:	e005      	b.n	800726e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fb47 	bl	80078f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fb4e 	bl	800790a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b08      	cmp	r3, #8
 8007280:	d122      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d11b      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0208 	mvn.w	r2, #8
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fa fc74 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb1d 	bl	80078f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb24 	bl	800790a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d122      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d11b      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0210 	mvn.w	r2, #16
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fa fc4a 	bl	8001b9c <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 faf3 	bl	80078f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fafa 	bl	800790a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0201 	mvn.w	r2, #1
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fa fcd2 	bl	8001cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d107      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f876 	bl	8008460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007382:	d10e      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d107      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800739a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f869 	bl	8008474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d10e      	bne.n	80073ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d107      	bne.n	80073ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 faa8 	bl	800791e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d10e      	bne.n	80073fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d107      	bne.n	80073fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f06f 0220 	mvn.w	r2, #32
 80073f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f829 	bl	800844c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_TIM_IC_ConfigChannel+0x1e>
 800741c:	2302      	movs	r3, #2
 800741e:	e088      	b.n	8007532 <HAL_TIM_IC_ConfigChannel+0x130>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d11b      	bne.n	8007466 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800743e:	f000 fd5b 	bl	8007ef8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699a      	ldr	r2, [r3, #24]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 020c 	bic.w	r2, r2, #12
 8007450:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6999      	ldr	r1, [r3, #24]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	e060      	b.n	8007528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d11c      	bne.n	80074a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800747c:	f000 fdc1 	bl	8008002 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800748e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6999      	ldr	r1, [r3, #24]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	021a      	lsls	r2, r3, #8
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	619a      	str	r2, [r3, #24]
 80074a4:	e040      	b.n	8007528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80074bc:	f000 fe0e 	bl	80080dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 020c 	bic.w	r2, r2, #12
 80074ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69d9      	ldr	r1, [r3, #28]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	61da      	str	r2, [r3, #28]
 80074e2:	e021      	b.n	8007528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b0c      	cmp	r3, #12
 80074e8:	d11c      	bne.n	8007524 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80074fa:	f000 fe2b 	bl	8008154 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800750c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69d9      	ldr	r1, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	021a      	lsls	r2, r3, #8
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	61da      	str	r2, [r3, #28]
 8007522:	e001      	b.n	8007528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007556:	2302      	movs	r3, #2
 8007558:	e0ff      	b.n	800775a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b14      	cmp	r3, #20
 8007566:	f200 80f0 	bhi.w	800774a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800756a:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075c5 	.word	0x080075c5
 8007574:	0800774b 	.word	0x0800774b
 8007578:	0800774b 	.word	0x0800774b
 800757c:	0800774b 	.word	0x0800774b
 8007580:	08007605 	.word	0x08007605
 8007584:	0800774b 	.word	0x0800774b
 8007588:	0800774b 	.word	0x0800774b
 800758c:	0800774b 	.word	0x0800774b
 8007590:	08007647 	.word	0x08007647
 8007594:	0800774b 	.word	0x0800774b
 8007598:	0800774b 	.word	0x0800774b
 800759c:	0800774b 	.word	0x0800774b
 80075a0:	08007687 	.word	0x08007687
 80075a4:	0800774b 	.word	0x0800774b
 80075a8:	0800774b 	.word	0x0800774b
 80075ac:	0800774b 	.word	0x0800774b
 80075b0:	080076c9 	.word	0x080076c9
 80075b4:	0800774b 	.word	0x0800774b
 80075b8:	0800774b 	.word	0x0800774b
 80075bc:	0800774b 	.word	0x0800774b
 80075c0:	08007709 	.word	0x08007709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fa16 	bl	80079fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0204 	bic.w	r2, r2, #4
 80075ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6999      	ldr	r1, [r3, #24]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	619a      	str	r2, [r3, #24]
      break;
 8007602:	e0a5      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fa72 	bl	8007af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800761e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800762e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6999      	ldr	r1, [r3, #24]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	021a      	lsls	r2, r3, #8
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	619a      	str	r2, [r3, #24]
      break;
 8007644:	e084      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 facb 	bl	8007be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0208 	orr.w	r2, r2, #8
 8007660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0204 	bic.w	r2, r2, #4
 8007670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	61da      	str	r2, [r3, #28]
      break;
 8007684:	e064      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb23 	bl	8007cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69d9      	ldr	r1, [r3, #28]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	021a      	lsls	r2, r3, #8
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	61da      	str	r2, [r3, #28]
      break;
 80076c6:	e043      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fb60 	bl	8007d94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0208 	orr.w	r2, r2, #8
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0204 	bic.w	r2, r2, #4
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007706:	e023      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fb98 	bl	8007e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	021a      	lsls	r2, r3, #8
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007748:	e002      	b.n	8007750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
      break;
 800774e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007758:	7dfb      	ldrb	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop

08007764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_TIM_ConfigClockSource+0x1c>
 800777c:	2302      	movs	r3, #2
 800777e:	e0b6      	b.n	80078ee <HAL_TIM_ConfigClockSource+0x18a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077bc:	d03e      	beq.n	800783c <HAL_TIM_ConfigClockSource+0xd8>
 80077be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c2:	f200 8087 	bhi.w	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	f000 8086 	beq.w	80078da <HAL_TIM_ConfigClockSource+0x176>
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d2:	d87f      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077d4:	2b70      	cmp	r3, #112	; 0x70
 80077d6:	d01a      	beq.n	800780e <HAL_TIM_ConfigClockSource+0xaa>
 80077d8:	2b70      	cmp	r3, #112	; 0x70
 80077da:	d87b      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077dc:	2b60      	cmp	r3, #96	; 0x60
 80077de:	d050      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x11e>
 80077e0:	2b60      	cmp	r3, #96	; 0x60
 80077e2:	d877      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077e4:	2b50      	cmp	r3, #80	; 0x50
 80077e6:	d03c      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0xfe>
 80077e8:	2b50      	cmp	r3, #80	; 0x50
 80077ea:	d873      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d058      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x13e>
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d86f      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d064      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15e>
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	d86b      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d060      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d867      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05c      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d05a      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15e>
 800780c:	e062      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800781e:	f000 fcf1 	bl	8008204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	609a      	str	r2, [r3, #8]
      break;
 800783a:	e04f      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800784c:	f000 fcda 	bl	8008204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785e:	609a      	str	r2, [r3, #8]
      break;
 8007860:	e03c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800786e:	461a      	mov	r2, r3
 8007870:	f000 fb98 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2150      	movs	r1, #80	; 0x50
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fca7 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 8007880:	e02c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fbf4 	bl	800807c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2160      	movs	r1, #96	; 0x60
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fc97 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 80078a0:	e01c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 fb78 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fc87 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 80078c0:	e00c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f000 fc7e 	bl	80081ce <TIM_ITRx_SetConfig>
      break;
 80078d2:	e003      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      break;
 80078d8:	e000      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80078da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
	...

08007934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <TIM_Base_SetConfig+0xbc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_Base_SetConfig+0x20>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007952:	d108      	bne.n	8007966 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <TIM_Base_SetConfig+0xbc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00b      	beq.n	8007986 <TIM_Base_SetConfig+0x52>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007974:	d007      	beq.n	8007986 <TIM_Base_SetConfig+0x52>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1e      	ldr	r2, [pc, #120]	; (80079f4 <TIM_Base_SetConfig+0xc0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_Base_SetConfig+0x52>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <TIM_Base_SetConfig+0xc4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d108      	bne.n	8007998 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <TIM_Base_SetConfig+0xbc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0xa0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a0b      	ldr	r2, [pc, #44]	; (80079f4 <TIM_Base_SetConfig+0xc0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0xa0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a0a      	ldr	r2, [pc, #40]	; (80079f8 <TIM_Base_SetConfig+0xc4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d103      	bne.n	80079dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691a      	ldr	r2, [r3, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	615a      	str	r2, [r3, #20]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400

080079fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f023 0201 	bic.w	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f023 0302 	bic.w	r3, r3, #2
 8007a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <TIM_OC1_SetConfig+0xec>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC1_SetConfig+0x70>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a23      	ldr	r2, [pc, #140]	; (8007aec <TIM_OC1_SetConfig+0xf0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC1_SetConfig+0x70>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a22      	ldr	r2, [pc, #136]	; (8007af0 <TIM_OC1_SetConfig+0xf4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d10c      	bne.n	8007a86 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0308 	bic.w	r3, r3, #8
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 0304 	bic.w	r3, r3, #4
 8007a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <TIM_OC1_SetConfig+0xec>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <TIM_OC1_SetConfig+0xa2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a16      	ldr	r2, [pc, #88]	; (8007aec <TIM_OC1_SetConfig+0xf0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_OC1_SetConfig+0xa2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <TIM_OC1_SetConfig+0xf4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d111      	bne.n	8007ac2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400

08007af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f023 0320 	bic.w	r3, r3, #32
 8007b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a22      	ldr	r2, [pc, #136]	; (8007bdc <TIM_OC2_SetConfig+0xe8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d10d      	bne.n	8007b74 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <TIM_OC2_SetConfig+0xe8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d007      	beq.n	8007b8c <TIM_OC2_SetConfig+0x98>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <TIM_OC2_SetConfig+0xec>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d003      	beq.n	8007b8c <TIM_OC2_SetConfig+0x98>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <TIM_OC2_SetConfig+0xf0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d113      	bne.n	8007bb4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40012c00 	.word	0x40012c00
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400

08007be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a21      	ldr	r2, [pc, #132]	; (8007ccc <TIM_OC3_SetConfig+0xe4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d10d      	bne.n	8007c66 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <TIM_OC3_SetConfig+0xe4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d007      	beq.n	8007c7e <TIM_OC3_SetConfig+0x96>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <TIM_OC3_SetConfig+0xe8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d003      	beq.n	8007c7e <TIM_OC3_SetConfig+0x96>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a16      	ldr	r2, [pc, #88]	; (8007cd4 <TIM_OC3_SetConfig+0xec>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d113      	bne.n	8007ca6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	621a      	str	r2, [r3, #32]
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40014400 	.word	0x40014400

08007cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	031b      	lsls	r3, r3, #12
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <TIM_OC4_SetConfig+0xb0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_OC4_SetConfig+0x74>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <TIM_OC4_SetConfig+0xb4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC4_SetConfig+0x74>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <TIM_OC4_SetConfig+0xb8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d109      	bne.n	8007d60 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	019b      	lsls	r3, r3, #6
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	40014400 	.word	0x40014400

08007d94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a13      	ldr	r2, [pc, #76]	; (8007e38 <TIM_OC5_SetConfig+0xa4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <TIM_OC5_SetConfig+0x6a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a12      	ldr	r2, [pc, #72]	; (8007e3c <TIM_OC5_SetConfig+0xa8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC5_SetConfig+0x6a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a11      	ldr	r2, [pc, #68]	; (8007e40 <TIM_OC5_SetConfig+0xac>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d109      	bne.n	8007e12 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	621a      	str	r2, [r3, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	40012c00 	.word	0x40012c00
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400

08007e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	051b      	lsls	r3, r3, #20
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <TIM_OC6_SetConfig+0xa8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC6_SetConfig+0x6c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <TIM_OC6_SetConfig+0xac>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC6_SetConfig+0x6c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a12      	ldr	r2, [pc, #72]	; (8007ef4 <TIM_OC6_SetConfig+0xb0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d109      	bne.n	8007ec4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	029b      	lsls	r3, r3, #10
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40014400 	.word	0x40014400

08007ef8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f023 0201 	bic.w	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <TIM_TI1_SetConfig+0xa4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <TIM_TI1_SetConfig+0x3e>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2c:	d003      	beq.n	8007f36 <TIM_TI1_SetConfig+0x3e>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a1b      	ldr	r2, [pc, #108]	; (8007fa0 <TIM_TI1_SetConfig+0xa8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <TIM_TI1_SetConfig+0x42>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <TIM_TI1_SetConfig+0x44>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e003      	b.n	8007f5a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f043 0301 	orr.w	r3, r3, #1
 8007f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f023 030a 	bic.w	r3, r3, #10
 8007f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f003 030a 	and.w	r3, r3, #10
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40014000 	.word	0x40014000

08007fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0201 	bic.w	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f023 030a 	bic.w	r3, r3, #10
 8007fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	f023 0210 	bic.w	r2, r3, #16
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	031b      	lsls	r3, r3, #12
 8008046:	b29b      	uxth	r3, r3
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008054:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	621a      	str	r2, [r3, #32]
}
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f023 0210 	bic.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	031b      	lsls	r3, r3, #12
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	621a      	str	r2, [r3, #32]
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	b2db      	uxtb	r3, r3
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800812c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	621a      	str	r2, [r3, #32]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008192:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	031b      	lsls	r3, r3, #12
 8008198:	b29b      	uxth	r3, r3
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	031b      	lsls	r3, r3, #12
 80081ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f043 0307 	orr.w	r3, r3, #7
 80081f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	609a      	str	r2, [r3, #8]
}
 80081f8:	bf00      	nop
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	021a      	lsls	r2, r3, #8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	431a      	orrs	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4313      	orrs	r3, r2
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2201      	movs	r2, #1
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1a      	ldr	r2, [r3, #32]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	43db      	mvns	r3, r3
 8008266:	401a      	ands	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a1a      	ldr	r2, [r3, #32]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f003 031f 	and.w	r3, r3, #31
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	fa01 f303 	lsl.w	r3, r1, r3
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
	...

08008290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e04f      	b.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a21      	ldr	r2, [pc, #132]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d108      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a14      	ldr	r2, [pc, #80]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d004      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a10      	ldr	r2, [pc, #64]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d10c      	bne.n	8008336 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4313      	orrs	r3, r2
 800832c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40014000 	.word	0x40014000

0800835c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008374:	2302      	movs	r3, #2
 8008376:	e060      	b.n	800843a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	041b      	lsls	r3, r3, #16
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a14      	ldr	r2, [pc, #80]	; (8008448 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d115      	bne.n	8008428 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	051b      	lsls	r3, r3, #20
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	40012c00 	.word	0x40012c00

0800844c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e040      	b.n	800851c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fa f85c 	bl	8002568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	; 0x24
 80084b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0201 	bic.w	r2, r2, #1
 80084c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f82c 	bl	8008524 <UART_SetConfig>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e022      	b.n	800851c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa4c 	bl	800897c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fad3 	bl	8008ac0 <UART_CheckIdleState>
 800851a:	4603      	mov	r3, r0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008528:	b08a      	sub	sp, #40	; 0x28
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	431a      	orrs	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	431a      	orrs	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	4313      	orrs	r3, r2
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4bb4      	ldr	r3, [pc, #720]	; (8008824 <UART_SetConfig+0x300>)
 8008554:	4013      	ands	r3, r2
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800855c:	430b      	orrs	r3, r1
 800855e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4aa9      	ldr	r2, [pc, #676]	; (8008828 <UART_SetConfig+0x304>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d004      	beq.n	8008590 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	4313      	orrs	r3, r2
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4aa0      	ldr	r2, [pc, #640]	; (800882c <UART_SetConfig+0x308>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d126      	bne.n	80085fc <UART_SetConfig+0xd8>
 80085ae:	4ba0      	ldr	r3, [pc, #640]	; (8008830 <UART_SetConfig+0x30c>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d81b      	bhi.n	80085f4 <UART_SetConfig+0xd0>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0xa0>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085e5 	.word	0x080085e5
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	080085ed 	.word	0x080085ed
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085da:	e080      	b.n	80086de <UART_SetConfig+0x1ba>
 80085dc:	2302      	movs	r3, #2
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e2:	e07c      	b.n	80086de <UART_SetConfig+0x1ba>
 80085e4:	2304      	movs	r3, #4
 80085e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ea:	e078      	b.n	80086de <UART_SetConfig+0x1ba>
 80085ec:	2308      	movs	r3, #8
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f2:	e074      	b.n	80086de <UART_SetConfig+0x1ba>
 80085f4:	2310      	movs	r3, #16
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fa:	e070      	b.n	80086de <UART_SetConfig+0x1ba>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a8c      	ldr	r2, [pc, #560]	; (8008834 <UART_SetConfig+0x310>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d138      	bne.n	8008678 <UART_SetConfig+0x154>
 8008606:	4b8a      	ldr	r3, [pc, #552]	; (8008830 <UART_SetConfig+0x30c>)
 8008608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860c:	f003 030c 	and.w	r3, r3, #12
 8008610:	2b0c      	cmp	r3, #12
 8008612:	d82d      	bhi.n	8008670 <UART_SetConfig+0x14c>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <UART_SetConfig+0xf8>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	08008651 	.word	0x08008651
 8008620:	08008671 	.word	0x08008671
 8008624:	08008671 	.word	0x08008671
 8008628:	08008671 	.word	0x08008671
 800862c:	08008661 	.word	0x08008661
 8008630:	08008671 	.word	0x08008671
 8008634:	08008671 	.word	0x08008671
 8008638:	08008671 	.word	0x08008671
 800863c:	08008659 	.word	0x08008659
 8008640:	08008671 	.word	0x08008671
 8008644:	08008671 	.word	0x08008671
 8008648:	08008671 	.word	0x08008671
 800864c:	08008669 	.word	0x08008669
 8008650:	2300      	movs	r3, #0
 8008652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008656:	e042      	b.n	80086de <UART_SetConfig+0x1ba>
 8008658:	2302      	movs	r3, #2
 800865a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800865e:	e03e      	b.n	80086de <UART_SetConfig+0x1ba>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008666:	e03a      	b.n	80086de <UART_SetConfig+0x1ba>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866e:	e036      	b.n	80086de <UART_SetConfig+0x1ba>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008676:	e032      	b.n	80086de <UART_SetConfig+0x1ba>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a6a      	ldr	r2, [pc, #424]	; (8008828 <UART_SetConfig+0x304>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d12a      	bne.n	80086d8 <UART_SetConfig+0x1b4>
 8008682:	4b6b      	ldr	r3, [pc, #428]	; (8008830 <UART_SetConfig+0x30c>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800868c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008690:	d01a      	beq.n	80086c8 <UART_SetConfig+0x1a4>
 8008692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008696:	d81b      	bhi.n	80086d0 <UART_SetConfig+0x1ac>
 8008698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800869c:	d00c      	beq.n	80086b8 <UART_SetConfig+0x194>
 800869e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a2:	d815      	bhi.n	80086d0 <UART_SetConfig+0x1ac>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <UART_SetConfig+0x18c>
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0x19c>
 80086ae:	e00f      	b.n	80086d0 <UART_SetConfig+0x1ac>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086b6:	e012      	b.n	80086de <UART_SetConfig+0x1ba>
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086be:	e00e      	b.n	80086de <UART_SetConfig+0x1ba>
 80086c0:	2304      	movs	r3, #4
 80086c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c6:	e00a      	b.n	80086de <UART_SetConfig+0x1ba>
 80086c8:	2308      	movs	r3, #8
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ce:	e006      	b.n	80086de <UART_SetConfig+0x1ba>
 80086d0:	2310      	movs	r3, #16
 80086d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d6:	e002      	b.n	80086de <UART_SetConfig+0x1ba>
 80086d8:	2310      	movs	r3, #16
 80086da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a51      	ldr	r2, [pc, #324]	; (8008828 <UART_SetConfig+0x304>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d17a      	bne.n	80087de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d824      	bhi.n	800873a <UART_SetConfig+0x216>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0x1d4>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	0800873b 	.word	0x0800873b
 8008700:	08008725 	.word	0x08008725
 8008704:	0800873b 	.word	0x0800873b
 8008708:	0800872b 	.word	0x0800872b
 800870c:	0800873b 	.word	0x0800873b
 8008710:	0800873b 	.word	0x0800873b
 8008714:	0800873b 	.word	0x0800873b
 8008718:	08008733 	.word	0x08008733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800871c:	f7fd fb40 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8008720:	61f8      	str	r0, [r7, #28]
        break;
 8008722:	e010      	b.n	8008746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008724:	4b44      	ldr	r3, [pc, #272]	; (8008838 <UART_SetConfig+0x314>)
 8008726:	61fb      	str	r3, [r7, #28]
        break;
 8008728:	e00d      	b.n	8008746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800872a:	f7fd faa1 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800872e:	61f8      	str	r0, [r7, #28]
        break;
 8008730:	e009      	b.n	8008746 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008736:	61fb      	str	r3, [r7, #28]
        break;
 8008738:	e005      	b.n	8008746 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8107 	beq.w	800895c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4413      	add	r3, r2
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	429a      	cmp	r2, r3
 800875c:	d305      	bcc.n	800876a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	429a      	cmp	r2, r3
 8008768:	d903      	bls.n	8008772 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008770:	e0f4      	b.n	800895c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	2200      	movs	r2, #0
 8008776:	461c      	mov	r4, r3
 8008778:	4615      	mov	r5, r2
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	022b      	lsls	r3, r5, #8
 8008784:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008788:	0222      	lsls	r2, r4, #8
 800878a:	68f9      	ldr	r1, [r7, #12]
 800878c:	6849      	ldr	r1, [r1, #4]
 800878e:	0849      	lsrs	r1, r1, #1
 8008790:	2000      	movs	r0, #0
 8008792:	4688      	mov	r8, r1
 8008794:	4681      	mov	r9, r0
 8008796:	eb12 0a08 	adds.w	sl, r2, r8
 800879a:	eb43 0b09 	adc.w	fp, r3, r9
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ac:	4650      	mov	r0, sl
 80087ae:	4659      	mov	r1, fp
 80087b0:	f7f8 f864 	bl	800087c <__aeabi_uldivmod>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4613      	mov	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c2:	d308      	bcc.n	80087d6 <UART_SetConfig+0x2b2>
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ca:	d204      	bcs.n	80087d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	e0c2      	b.n	800895c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087dc:	e0be      	b.n	800895c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e6:	d16a      	bne.n	80088be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80087e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d834      	bhi.n	800885a <UART_SetConfig+0x336>
 80087f0:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x2d4>)
 80087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f6:	bf00      	nop
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	0800883d 	.word	0x0800883d
 8008800:	08008845 	.word	0x08008845
 8008804:	0800885b 	.word	0x0800885b
 8008808:	0800884b 	.word	0x0800884b
 800880c:	0800885b 	.word	0x0800885b
 8008810:	0800885b 	.word	0x0800885b
 8008814:	0800885b 	.word	0x0800885b
 8008818:	08008853 	.word	0x08008853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800881c:	f7fd fac0 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8008820:	61f8      	str	r0, [r7, #28]
        break;
 8008822:	e020      	b.n	8008866 <UART_SetConfig+0x342>
 8008824:	efff69f3 	.word	0xefff69f3
 8008828:	40008000 	.word	0x40008000
 800882c:	40013800 	.word	0x40013800
 8008830:	40021000 	.word	0x40021000
 8008834:	40004400 	.word	0x40004400
 8008838:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800883c:	f7fd fac6 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 8008840:	61f8      	str	r0, [r7, #28]
        break;
 8008842:	e010      	b.n	8008866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008844:	4b4c      	ldr	r3, [pc, #304]	; (8008978 <UART_SetConfig+0x454>)
 8008846:	61fb      	str	r3, [r7, #28]
        break;
 8008848:	e00d      	b.n	8008866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884a:	f7fd fa11 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800884e:	61f8      	str	r0, [r7, #28]
        break;
 8008850:	e009      	b.n	8008866 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008856:	61fb      	str	r3, [r7, #28]
        break;
 8008858:	e005      	b.n	8008866 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d077      	beq.n	800895c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	005a      	lsls	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	441a      	add	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b0f      	cmp	r3, #15
 8008886:	d916      	bls.n	80088b6 <UART_SetConfig+0x392>
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888e:	d212      	bcs.n	80088b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f023 030f 	bic.w	r3, r3, #15
 8008898:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	8afb      	ldrh	r3, [r7, #22]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	8afa      	ldrh	r2, [r7, #22]
 80088b2:	60da      	str	r2, [r3, #12]
 80088b4:	e052      	b.n	800895c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088bc:	e04e      	b.n	800895c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088c2:	2b08      	cmp	r3, #8
 80088c4:	d827      	bhi.n	8008916 <UART_SetConfig+0x3f2>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0x3a8>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	080088f9 	.word	0x080088f9
 80088d4:	08008901 	.word	0x08008901
 80088d8:	08008917 	.word	0x08008917
 80088dc:	08008907 	.word	0x08008907
 80088e0:	08008917 	.word	0x08008917
 80088e4:	08008917 	.word	0x08008917
 80088e8:	08008917 	.word	0x08008917
 80088ec:	0800890f 	.word	0x0800890f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088f0:	f7fd fa56 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 80088f4:	61f8      	str	r0, [r7, #28]
        break;
 80088f6:	e014      	b.n	8008922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088f8:	f7fd fa68 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 80088fc:	61f8      	str	r0, [r7, #28]
        break;
 80088fe:	e010      	b.n	8008922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008900:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <UART_SetConfig+0x454>)
 8008902:	61fb      	str	r3, [r7, #28]
        break;
 8008904:	e00d      	b.n	8008922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008906:	f7fd f9b3 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800890a:	61f8      	str	r0, [r7, #28]
        break;
 800890c:	e009      	b.n	8008922 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800890e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008912:	61fb      	str	r3, [r7, #28]
        break;
 8008914:	e005      	b.n	8008922 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008920:	bf00      	nop
    }

    if (pclk != 0U)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d019      	beq.n	800895c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	085a      	lsrs	r2, r3, #1
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	441a      	add	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b0f      	cmp	r3, #15
 8008940:	d909      	bls.n	8008956 <UART_SetConfig+0x432>
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008948:	d205      	bcs.n	8008956 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	e002      	b.n	800895c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008968:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800896c:	4618      	mov	r0, r3
 800896e:	3728      	adds	r7, #40	; 0x28
 8008970:	46bd      	mov	sp, r7
 8008972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008976:	bf00      	nop
 8008978:	00f42400 	.word	0x00f42400

0800897c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00a      	beq.n	8008a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01a      	beq.n	8008a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a7a:	d10a      	bne.n	8008a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00a      	beq.n	8008ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	605a      	str	r2, [r3, #4]
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ad0:	f7f9 fe34 	bl	800273c <HAL_GetTick>
 8008ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d10e      	bne.n	8008b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f82d 	bl	8008b52 <UART_WaitOnFlagUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e023      	b.n	8008b4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d10e      	bne.n	8008b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f817 	bl	8008b52 <UART_WaitOnFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e00d      	b.n	8008b4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b09c      	sub	sp, #112	; 0x70
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	603b      	str	r3, [r7, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b62:	e0a5      	b.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	f000 80a1 	beq.w	8008cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7f9 fde5 	bl	800273c <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d13e      	bne.n	8008c02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b98:	667b      	str	r3, [r7, #100]	; 0x64
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e067      	b.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d04f      	beq.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1e:	d147      	bne.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c7c:	623a      	str	r2, [r7, #32]
 8008c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	6a3a      	ldr	r2, [r7, #32]
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e010      	b.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69da      	ldr	r2, [r3, #28]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	bf0c      	ite	eq
 8008cc0:	2301      	moveq	r3, #1
 8008cc2:	2300      	movne	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	f43f af4a 	beq.w	8008b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3770      	adds	r7, #112	; 0x70
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8008cda:	b490      	push	{r4, r7}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	70fb      	strb	r3, [r7, #3]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70bb      	strb	r3, [r7, #2]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 8008cf4:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 8008cf6:	7e3b      	ldrb	r3, [r7, #24]
 8008cf8:	4423      	add	r3, r4
 8008cfa:	b2dc      	uxtb	r4, r3
  tmp--;
 8008cfc:	4623      	mov	r3, r4
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008d0e:	73fa      	strb	r2, [r7, #15]
 8008d10:	73bb      	strb	r3, [r7, #14]
 8008d12:	78bb      	ldrb	r3, [r7, #2]
 8008d14:	737b      	strb	r3, [r7, #13]
 8008d16:	4623      	mov	r3, r4
 8008d18:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8008d1a:	7bba      	ldrb	r2, [r7, #14]
 8008d1c:	7b7b      	ldrb	r3, [r7, #13]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d30d      	bcc.n	8008d3e <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	7b3b      	ldrb	r3, [r7, #12]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d801      	bhi.n	8008d2e <u8g_IsBBXIntersection+0x54>
      return 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e014      	b.n	8008d58 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8008d2e:	7b7a      	ldrb	r2, [r7, #13]
 8008d30:	7b3b      	ldrb	r3, [r7, #12]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d901      	bls.n	8008d3a <u8g_IsBBXIntersection+0x60>
	return 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e00e      	b.n	8008d58 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e00c      	b.n	8008d58 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8008d3e:	7bfa      	ldrb	r2, [r7, #15]
 8008d40:	7b3b      	ldrb	r3, [r7, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d807      	bhi.n	8008d56 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8008d46:	7b7a      	ldrb	r2, [r7, #13]
 8008d48:	7b3b      	ldrb	r3, [r7, #12]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d901      	bls.n	8008d52 <u8g_IsBBXIntersection+0x78>
	return 1;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e002      	b.n	8008d58 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e000      	b.n	8008d58 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8008d56:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e032      	b.n	8008dc6 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8008d60:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8008d62:	787b      	ldrb	r3, [r7, #1]
 8008d64:	4423      	add	r3, r4
 8008d66:	b2dc      	uxtb	r4, r3
  tmp--;
 8008d68:	4623      	mov	r3, r4
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d7a:	72fa      	strb	r2, [r7, #11]
 8008d7c:	72bb      	strb	r3, [r7, #10]
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	727b      	strb	r3, [r7, #9]
 8008d82:	4623      	mov	r3, r4
 8008d84:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8008d86:	7aba      	ldrb	r2, [r7, #10]
 8008d88:	7a7b      	ldrb	r3, [r7, #9]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d30d      	bcc.n	8008daa <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8008d8e:	7afa      	ldrb	r2, [r7, #11]
 8008d90:	7a3b      	ldrb	r3, [r7, #8]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d801      	bhi.n	8008d9a <u8g_IsBBXIntersection+0xc0>
      return 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e014      	b.n	8008dc4 <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8008d9a:	7a7a      	ldrb	r2, [r7, #9]
 8008d9c:	7a3b      	ldrb	r3, [r7, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d901      	bls.n	8008da6 <u8g_IsBBXIntersection+0xcc>
	return 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e00e      	b.n	8008dc4 <u8g_IsBBXIntersection+0xea>
	return 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e00c      	b.n	8008dc4 <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8008daa:	7afa      	ldrb	r2, [r7, #11]
 8008dac:	7a3b      	ldrb	r3, [r7, #8]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d807      	bhi.n	8008dc2 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8008db2:	7a7a      	ldrb	r2, [r7, #9]
 8008db4:	7a3b      	ldrb	r3, [r7, #8]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d901      	bls.n	8008dbe <u8g_IsBBXIntersection+0xe4>
	return 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e002      	b.n	8008dc4 <u8g_IsBBXIntersection+0xea>
	return 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <u8g_IsBBXIntersection+0xea>
      return 0;
 8008dc2:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008dc4:	bf00      	nop
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc90      	pop	{r4, r7}
 8008dce:	4770      	bx	lr

08008dd0 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	689c      	ldr	r4, [r3, #8]
 8008de2:	79fa      	ldrb	r2, [r7, #7]
 8008de4:	2300      	movs	r3, #0
 8008de6:	2101      	movs	r1, #1
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	47a0      	blx	r4
 8008dec:	4603      	mov	r3, r0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd90      	pop	{r4, r7, pc}

08008df6 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8008df6:	b590      	push	{r4, r7, lr}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	4613      	mov	r3, r2
 8008e02:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	689c      	ldr	r4, [r3, #8]
 8008e08:	79fa      	ldrb	r2, [r7, #7]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2103      	movs	r1, #3
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	47a0      	blx	r4
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd90      	pop	{r4, r7, pc}

08008e1a <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689c      	ldr	r4, [r3, #8]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2104      	movs	r1, #4
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	47a0      	blx	r4
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}

08008e3a <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8008e3a:	b590      	push	{r4, r7, lr}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689c      	ldr	r4, [r3, #8]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	47a0      	blx	r4
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd90      	pop	{r4, r7, pc}

08008e5a <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8008e5a:	b590      	push	{r4, r7, lr}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	4613      	mov	r3, r2
 8008e66:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	689c      	ldr	r4, [r3, #8]
 8008e6c:	79fa      	ldrb	r2, [r7, #7]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2102      	movs	r1, #2
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	47a0      	blx	r4
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}

08008e7e <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8008e7e:	b590      	push	{r4, r7, lr}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	689c      	ldr	r4, [r3, #8]
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	2300      	movs	r3, #0
 8008e94:	2105      	movs	r1, #5
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	47a0      	blx	r4
 8008e9a:	4603      	mov	r3, r0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd90      	pop	{r4, r7, pc}

08008ea4 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	689c      	ldr	r4, [r3, #8]
 8008eb8:	79fa      	ldrb	r2, [r7, #7]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2106      	movs	r1, #6
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	47a0      	blx	r4
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd90      	pop	{r4, r7, pc}

08008ecc <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d110      	bne.n	8008f0a <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8008ee8:	7dbb      	ldrb	r3, [r7, #22]
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d00a      	beq.n	8008f04 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008eee:	7dbb      	ldrb	r3, [r7, #22]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff ffc2 	bl	8008e7e <u8g_WriteByte>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d160      	bne.n	8008fc2 <u8g_WriteEscSeqP+0xf6>
          return 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	e064      	b.n	8008fce <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 8008f04:	2301      	movs	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
 8008f08:	e05b      	b.n	8008fc2 <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 8008f0a:	7dbb      	ldrb	r3, [r7, #22]
 8008f0c:	2bff      	cmp	r3, #255	; 0xff
 8008f0e:	d10a      	bne.n	8008f26 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008f10:	7dbb      	ldrb	r3, [r7, #22]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff ffb1 	bl	8008e7e <u8g_WriteByte>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d14d      	bne.n	8008fbe <u8g_WriteEscSeqP+0xf2>
          return 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e053      	b.n	8008fce <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 8008f26:	7dbb      	ldrb	r3, [r7, #22]
 8008f28:	2bfe      	cmp	r3, #254	; 0xfe
 8008f2a:	d04e      	beq.n	8008fca <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8008f2c:	7dbb      	ldrb	r3, [r7, #22]
 8008f2e:	2bef      	cmp	r3, #239	; 0xef
 8008f30:	d845      	bhi.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8008f32:	7dbb      	ldrb	r3, [r7, #22]
 8008f34:	2bdf      	cmp	r3, #223	; 0xdf
 8008f36:	d909      	bls.n	8008f4c <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff ff88 	bl	8008e5a <u8g_SetAddress>
 8008f4a:	e038      	b.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 8008f4c:	7dbb      	ldrb	r3, [r7, #22]
 8008f4e:	2bcf      	cmp	r3, #207	; 0xcf
 8008f50:	d909      	bls.n	8008f66 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8008f52:	7dbb      	ldrb	r3, [r7, #22]
 8008f54:	f003 030f 	and.w	r3, r3, #15
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff ff49 	bl	8008df6 <u8g_SetChipSelect>
 8008f64:	e02b      	b.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8008f66:	7dbb      	ldrb	r3, [r7, #22]
 8008f68:	2bbf      	cmp	r3, #191	; 0xbf
 8008f6a:	d91c      	bls.n	8008fa6 <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff ff53 	bl	8008e1a <u8g_SetResetLow>
        value &= 0x0f;
 8008f74:	7dbb      	ldrb	r3, [r7, #22]
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8008f7c:	7dbb      	ldrb	r3, [r7, #22]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8008f82:	7dbb      	ldrb	r3, [r7, #22]
 8008f84:	3302      	adds	r3, #2
 8008f86:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8008f88:	7dbb      	ldrb	r3, [r7, #22]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f8 fab9 	bl	8001504 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff ff50 	bl	8008e3a <u8g_SetResetHigh>
        u8g_Delay(value);
 8008f9a:	7dbb      	ldrb	r3, [r7, #22]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f8 fab0 	bl	8001504 <u8g_Delay>
 8008fa4:	e00b      	b.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 8008fa6:	7dbb      	ldrb	r3, [r7, #22]
 8008fa8:	2bbd      	cmp	r3, #189	; 0xbd
 8008faa:	d808      	bhi.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8008fac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	db04      	blt.n	8008fbe <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f8 faa3 	bl	8001504 <u8g_Delay>
      }
      is_escape = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8008fc8:	e788      	b.n	8008edc <u8g_WriteEscSeqP+0x10>
        break;
 8008fca:	bf00      	nop
  }
  return 1;
 8008fcc:	2301      	movs	r3, #1
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	72fb      	strb	r3, [r7, #11]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	2b06      	cmp	r3, #6
 8008fee:	d811      	bhi.n	8009014 <u8g_com_null_fn+0x3c>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <u8g_com_null_fn+0x20>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	08009015 	.word	0x08009015
 8009000:	08009015 	.word	0x08009015
 8009004:	08009015 	.word	0x08009015
 8009008:	08009015 	.word	0x08009015
 800900c:	08009015 	.word	0x08009015
 8009010:	08009015 	.word	0x08009015
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8009014:	2301      	movs	r3, #1
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <u8g_dev_sh1106_128x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	4613      	mov	r3, r2
 8009032:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	3b0a      	subs	r3, #10
 8009038:	2b0b      	cmp	r3, #11
 800903a:	d878      	bhi.n	800912e <u8g_dev_sh1106_128x64_fn+0x10a>
 800903c:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <u8g_dev_sh1106_128x64_fn+0x20>)
 800903e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009042:	bf00      	nop
 8009044:	08009075 	.word	0x08009075
 8009048:	0800912f 	.word	0x0800912f
 800904c:	0800912f 	.word	0x0800912f
 8009050:	0800912f 	.word	0x0800912f
 8009054:	0800912f 	.word	0x0800912f
 8009058:	080090f5 	.word	0x080090f5
 800905c:	080090d9 	.word	0x080090d9
 8009060:	080090e7 	.word	0x080090e7
 8009064:	0800912f 	.word	0x0800912f
 8009068:	0800912f 	.word	0x0800912f
 800906c:	0800912f 	.word	0x0800912f
 8009070:	0800908b 	.word	0x0800908b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8009074:	2202      	movs	r2, #2
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7ff fea9 	bl	8008dd0 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 800907e:	4a31      	ldr	r2, [pc, #196]	; (8009144 <u8g_dev_sh1106_128x64_fn+0x120>)
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff ff22 	bl	8008ecc <u8g_WriteEscSeqP>
      break;
 8009088:	e051      	b.n	800912e <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8009090:	4a2d      	ldr	r2, [pc, #180]	; (8009148 <u8g_dev_sh1106_128x64_fn+0x124>)
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff ff19 	bl	8008ecc <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	791b      	ldrb	r3, [r3, #4]
 800909e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff fee8 	bl	8008e7e <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80090ae:	2201      	movs	r2, #1
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fed1 	bl	8008e5a <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	6978      	ldr	r0, [r7, #20]
 80090be:	f000 fe73 	bl	8009da8 <u8g_pb_WriteBuffer>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <u8g_dev_sh1106_128x64_fn+0xa8>
          return 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e037      	b.n	800913c <u8g_dev_sh1106_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 80090cc:	2200      	movs	r2, #0
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fe90 	bl	8008df6 <u8g_SetChipSelect>
      }
      break;
 80090d6:	e02a      	b.n	800912e <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80090d8:	4a1c      	ldr	r2, [pc, #112]	; (800914c <u8g_dev_sh1106_128x64_fn+0x128>)
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff fef5 	bl	8008ecc <u8g_WriteEscSeqP>
      return 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e02a      	b.n	800913c <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80090e6:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <u8g_dev_sh1106_128x64_fn+0x12c>)
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff feee 	bl	8008ecc <u8g_WriteEscSeqP>
      return 1;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e023      	b.n	800913c <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 80090f4:	2201      	movs	r2, #1
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7ff fe7c 	bl	8008df6 <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 80090fe:	2200      	movs	r2, #0
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff fea9 	bl	8008e5a <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 8009108:	2281      	movs	r2, #129	; 0x81
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff feb6 	bl	8008e7e <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff feaf 	bl	8008e7e <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff fe66 	bl	8008df6 <u8g_SetChipSelect>
	return 1;
 800912a:	2301      	movs	r3, #1
 800912c:	e006      	b.n	800913c <u8g_dev_sh1106_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800912e:	79fa      	ldrb	r2, [r7, #7]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fef5 	bl	8009f24 <u8g_dev_pb8v1_base_fn>
 800913a:	4603      	mov	r3, r0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	0800aae4 	.word	0x0800aae4
 8009148:	0800ab0c 	.word	0x0800ab0c
 800914c:	0800ab14 	.word	0x0800ab14
 8009150:	0800ab20 	.word	0x0800ab20

08009154 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	781b      	ldrb	r3, [r3, #0]
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	4413      	add	r3, r2
 800918a:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	81fb      	strh	r3, [r7, #14]
    font++;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3301      	adds	r3, #1
 8009196:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8009198:	89fb      	ldrh	r3, [r7, #14]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	4413      	add	r3, r2
 80091a8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80091aa:	89fb      	ldrh	r3, [r7, #14]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 80091c0:	2100      	movs	r1, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ffc6 	bl	8009154 <u8g_font_get_byte>
 80091c8:	4603      	mov	r3, r0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ffec 	bl	80091b8 <u8g_font_GetFormat>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d00a      	beq.n	80091fc <u8g_font_GetFontGlyphStructureSize+0x2a>
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	dc0a      	bgt.n	8009200 <u8g_font_GetFontGlyphStructureSize+0x2e>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <u8g_font_GetFontGlyphStructureSize+0x22>
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d002      	beq.n	80091f8 <u8g_font_GetFontGlyphStructureSize+0x26>
 80091f2:	e005      	b.n	8009200 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 80091f4:	2306      	movs	r3, #6
 80091f6:	e004      	b.n	8009202 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e002      	b.n	8009202 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 80091fc:	2306      	movs	r3, #6
 80091fe:	e000      	b.n	8009202 <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8009200:	2303      	movs	r3, #3
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8009212:	2105      	movs	r1, #5
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff9d 	bl	8009154 <u8g_font_get_byte>
 800921a:	4603      	mov	r3, r0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 800922c:	2106      	movs	r1, #6
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff ffa2 	bl	8009178 <u8g_font_get_word>
 8009234:	4603      	mov	r3, r0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8009246:	2108      	movs	r1, #8
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff ff95 	bl	8009178 <u8g_font_get_word>
 800924e:	4603      	mov	r3, r0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8009260:	210a      	movs	r1, #10
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff76 	bl	8009154 <u8g_font_get_byte>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 800927a:	210b      	movs	r1, #11
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff ff69 	bl	8009154 <u8g_font_get_byte>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8009294:	210c      	movs	r1, #12
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff ff5c 	bl	8009154 <u8g_font_get_byte>
 800929c:	4603      	mov	r3, r0
 800929e:	b25b      	sxtb	r3, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 80092b0:	210d      	movs	r1, #13
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff ff4e 	bl	8009154 <u8g_font_get_byte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	b25b      	sxtb	r3, r3
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 80092cc:	210e      	movs	r1, #14
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ff40 	bl	8009154 <u8g_font_get_byte>
 80092d4:	4603      	mov	r3, r0
 80092d6:	b25b      	sxtb	r3, r3
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 80092e8:	210f      	movs	r1, #15
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff ff32 	bl	8009154 <u8g_font_get_byte>
 80092f0:	4603      	mov	r3, r0
 80092f2:	b25b      	sxtb	r3, r3
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8009304:	2110      	movs	r1, #16
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff ff24 	bl	8009154 <u8g_font_get_byte>
 800930c:	4603      	mov	r3, r0
 800930e:	b25b      	sxtb	r3, r3
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff ff55 	bl	80091d2 <u8g_font_GetFontGlyphStructureSize>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	4413      	add	r3, r2
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff ff36 	bl	80091b8 <u8g_font_GetFormat>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <u8g_CopyGlyphDataToCache+0x1e>
 8009352:	2b02      	cmp	r3, #2
 8009354:	d11c      	bne.n	8009390 <u8g_CopyGlyphDataToCache+0x58>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	3303      	adds	r3, #3
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b25a      	sxtb	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	3304      	adds	r3, #4
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	b25a      	sxtb	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	3305      	adds	r3, #5
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	b25a      	sxtb	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	779a      	strb	r2, [r3, #30]
      break;
 800938e:	e036      	b.n	80093fe <u8g_CopyGlyphDataToCache+0xc6>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8009396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	b25a      	sxtb	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	3b02      	subs	r3, #2
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	b25a      	sxtb	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	091b      	lsrs	r3, r3, #4
 80093ba:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 80093bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	3301      	adds	r3, #1
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	091b      	lsrs	r3, r3, #4
 80093de:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7bfa      	ldrb	r2, [r7, #15]
 80093e4:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	3302      	adds	r3, #2
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	091b      	lsrs	r3, r3, #4
 80093f2:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 80093f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	771a      	strb	r2, [r3, #28]
    
      
      break;
 80093fc:	bf00      	nop
  }
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	779a      	strb	r2, [r3, #30]
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff feb1 	bl	80091b8 <u8g_font_GetFormat>
 8009456:	4603      	mov	r3, r0
 8009458:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff feb7 	bl	80091d2 <u8g_font_GetFontGlyphStructureSize>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8009468:	23ff      	movs	r3, #255	; 0xff
 800946a:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 800946c:	7c3b      	ldrb	r3, [r7, #16]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <u8g_GetGlyph+0x3c>
    mask = 15;
 8009472:	230f      	movs	r3, #15
 8009474:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff feec 	bl	8009258 <u8g_font_GetFontStartEncoding>
 8009480:	4603      	mov	r3, r0
 8009482:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fef2 	bl	8009272 <u8g_font_GetFontEndEncoding>
 800948e:	4603      	mov	r3, r0
 8009490:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fed1 	bl	800923e <u8g_font_GetEncoding97Pos>
 800949c:	4603      	mov	r3, r0
 800949e:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	2b60      	cmp	r3, #96	; 0x60
 80094a4:	d909      	bls.n	80094ba <u8g_GetGlyph+0x80>
 80094a6:	89bb      	ldrh	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d006      	beq.n	80094ba <u8g_GetGlyph+0x80>
  {
    p+= pos;
 80094ac:	89bb      	ldrh	r3, [r7, #12]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
    start = 97;
 80094b4:	2361      	movs	r3, #97	; 0x61
 80094b6:	74fb      	strb	r3, [r7, #19]
 80094b8:	e016      	b.n	80094e8 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff feb0 	bl	8009224 <u8g_font_GetEncoding65Pos>
 80094c4:	4603      	mov	r3, r0
 80094c6:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d909      	bls.n	80094e2 <u8g_GetGlyph+0xa8>
 80094ce:	89bb      	ldrh	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d006      	beq.n	80094e2 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 80094d4:	89bb      	ldrh	r3, [r7, #12]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4413      	add	r3, r2
 80094da:	617b      	str	r3, [r7, #20]
      start = 65;
 80094dc:	2341      	movs	r3, #65	; 0x41
 80094de:	74fb      	strb	r3, [r7, #19]
 80094e0:	e002      	b.n	80094e8 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3311      	adds	r3, #17
 80094e6:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d904      	bls.n	80094fa <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ff88 	bl	8009406 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 80094f6:	2300      	movs	r3, #0
 80094f8:	e032      	b.n	8009560 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 80094fa:	7cfb      	ldrb	r3, [r7, #19]
 80094fc:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 80094fe:	7cba      	ldrb	r2, [r7, #18]
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	429a      	cmp	r2, r3
 8009504:	d828      	bhi.n	8009558 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2bff      	cmp	r3, #255	; 0xff
 800950c:	d103      	bne.n	8009516 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	3301      	adds	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e017      	b.n	8009546 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8009516:	7cba      	ldrb	r2, [r7, #18]
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	429a      	cmp	r2, r3
 800951c:	d105      	bne.n	800952a <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 800951e:	6979      	ldr	r1, [r7, #20]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff ff09 	bl	8009338 <u8g_CopyGlyphDataToCache>
          return p;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	e01a      	b.n	8009560 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	3302      	adds	r3, #2
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	7c7b      	ldrb	r3, [r7, #17]
 8009532:	4013      	ands	r3, r2
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	4413      	add	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8009546:	7cba      	ldrb	r2, [r7, #18]
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	429a      	cmp	r2, r3
 800954c:	d003      	beq.n	8009556 <u8g_GetGlyph+0x11c>
        break;
      i++;
 800954e:	7cbb      	ldrb	r3, [r7, #18]
 8009550:	3301      	adds	r3, #1
 8009552:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8009554:	e7d7      	b.n	8009506 <u8g_GetGlyph+0xcc>
        break;
 8009556:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff ff54 	bl	8009406 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	461a      	mov	r2, r3
 8009576:	4603      	mov	r3, r0
 8009578:	70fb      	strb	r3, [r7, #3]
 800957a:	460b      	mov	r3, r1
 800957c:	70bb      	strb	r3, [r7, #2]
 800957e:	4613      	mov	r3, r2
 8009580:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8009582:	787b      	ldrb	r3, [r7, #1]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff ff57 	bl	800943a <u8g_GetGlyph>
 800958c:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <u8g_draw_glyph+0x30>
      return 0;
 8009594:	2300      	movs	r3, #0
 8009596:	e06d      	b.n	8009674 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	68f9      	ldr	r1, [r7, #12]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff feba 	bl	8009318 <u8g_font_GetGlyphDataStart>
 80095a4:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	7fdb      	ldrb	r3, [r3, #31]
 80095aa:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095b2:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	4413      	add	r3, r2
 80095c0:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	78ba      	ldrb	r2, [r7, #2]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	70bb      	strb	r3, [r7, #2]
  y--;
 80095d0:	78bb      	ldrb	r3, [r7, #2]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80095d6:	78ba      	ldrb	r2, [r7, #2]
 80095d8:	7abb      	ldrb	r3, [r7, #10]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	3301      	adds	r3, #1
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	7af8      	ldrb	r0, [r7, #11]
 80095e4:	78f9      	ldrb	r1, [r7, #3]
 80095e6:	7abb      	ldrb	r3, [r7, #10]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	4603      	mov	r3, r0
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fb74 	bl	8008cda <u8g_IsBBXIntersection>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80095fe:	e039      	b.n	8009674 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	3307      	adds	r3, #7
 8009604:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8009606:	7afb      	ldrb	r3, [r7, #11]
 8009608:	08db      	lsrs	r3, r3, #3
 800960a:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 800960c:	78bb      	ldrb	r3, [r7, #2]
 800960e:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8009610:	7c3a      	ldrb	r2, [r7, #16]
 8009612:	7abb      	ldrb	r3, [r7, #10]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	743b      	strb	r3, [r7, #16]
  iy++;
 8009618:	7c3b      	ldrb	r3, [r7, #16]
 800961a:	3301      	adds	r3, #1
 800961c:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 800961e:	2300      	movs	r3, #0
 8009620:	74bb      	strb	r3, [r7, #18]
 8009622:	e020      	b.n	8009666 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8009628:	2300      	movs	r3, #0
 800962a:	74fb      	strb	r3, [r7, #19]
 800962c:	e011      	b.n	8009652 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	7c3a      	ldrb	r2, [r7, #16]
 8009634:	7c79      	ldrb	r1, [r7, #17]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fa8c 	bl	8009b58 <u8g_Draw8Pixel>
      data++;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3301      	adds	r3, #1
 8009644:	617b      	str	r3, [r7, #20]
      ix+=8;
 8009646:	7c7b      	ldrb	r3, [r7, #17]
 8009648:	3308      	adds	r3, #8
 800964a:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800964c:	7cfb      	ldrb	r3, [r7, #19]
 800964e:	3301      	adds	r3, #1
 8009650:	74fb      	strb	r3, [r7, #19]
 8009652:	7cfa      	ldrb	r2, [r7, #19]
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	429a      	cmp	r2, r3
 8009658:	d3e9      	bcc.n	800962e <u8g_draw_glyph+0xc6>
    }
    iy++;
 800965a:	7c3b      	ldrb	r3, [r7, #16]
 800965c:	3301      	adds	r3, #1
 800965e:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8009660:	7cbb      	ldrb	r3, [r7, #18]
 8009662:	3301      	adds	r3, #1
 8009664:	74bb      	strb	r3, [r7, #18]
 8009666:	7cba      	ldrb	r2, [r7, #18]
 8009668:	7abb      	ldrb	r3, [r7, #10]
 800966a:	429a      	cmp	r2, r3
 800966c:	d3da      	bcc.n	8009624 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	72fb      	strb	r3, [r7, #11]
 800968a:	4613      	mov	r3, r2
 800968c:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	4798      	blx	r3
 800969a:	4603      	mov	r3, r0
 800969c:	461a      	mov	r2, r3
 800969e:	7abb      	ldrb	r3, [r7, #10]
 80096a0:	4413      	add	r3, r2
 80096a2:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 80096a4:	e013      	b.n	80096ce <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	7aba      	ldrb	r2, [r7, #10]
 80096ac:	7af9      	ldrb	r1, [r7, #11]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff ff5a 	bl	8009568 <u8g_draw_glyph>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75bb      	strb	r3, [r7, #22]
    x += d;
 80096b8:	7dba      	ldrb	r2, [r7, #22]
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	4413      	add	r3, r2
 80096be:	72fb      	strb	r3, [r7, #11]
    t += d;
 80096c0:	7dba      	ldrb	r2, [r7, #22]
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	4413      	add	r3, r2
 80096c6:	75fb      	strb	r3, [r7, #23]
    s++;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3301      	adds	r3, #1
 80096cc:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e7      	bne.n	80096a6 <u8g_DrawStr+0x2a>
  }
  return t;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d06b      	beq.n	80097c8 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d114      	bne.n	8009724 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fd83 	bl	800920a <u8g_font_GetCapitalAHeight>
 8009704:	4603      	mov	r3, r0
 8009706:	b25a      	sxtb	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fdba 	bl	800928c <u8g_font_GetLowerGDescent>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8009722:	e02d      	b.n	8009780 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972a:	2b01      	cmp	r3, #1
 800972c:	d114      	bne.n	8009758 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fdd4 	bl	80092e0 <u8g_font_GetFontXAscent>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fdd8 	bl	80092fc <u8g_font_GetFontXDescent>
 800974c:	4603      	mov	r3, r0
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8009756:	e013      	b.n	8009780 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff fda3 	bl	80092a8 <u8g_font_GetFontAscent>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fda7 	bl	80092c4 <u8g_font_GetFontDescent>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8009786:	b21a      	sxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800978e:	b21b      	sxth	r3, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	b21b      	sxth	r3, r3
 8009794:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800979c:	2b40      	cmp	r3, #64	; 0x40
 800979e:	d00d      	beq.n	80097bc <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 80097a0:	89fb      	ldrh	r3, [r7, #14]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	89fa      	ldrh	r2, [r7, #14]
 80097b0:	fb12 f303 	smulbb	r3, r2, r3
 80097b4:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 80097b6:	89fb      	ldrh	r3, [r7, #14]
 80097b8:	099b      	lsrs	r3, r3, #6
 80097ba:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 80097bc:	89fb      	ldrh	r3, [r7, #14]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80097c6:	e000      	b.n	80097ca <u8g_UpdateRefHeight+0xea>
    return;
 80097c8:	bf00      	nop
}
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  return 0;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a04      	ldr	r2, [pc, #16]	; (8009804 <u8g_SetFontPosBaseline+0x1c>)
 80097f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	080097d1 	.word	0x080097d1

08009808 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d008      	beq.n	800982e <u8g_SetFont+0x26>
  {
    u8g->font = font;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff ff5c 	bl	80096e0 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ffdd 	bl	80097e8 <u8g_SetFontPosBaseline>
  }
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009836:	b590      	push	{r4, r7, lr}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	4613      	mov	r3, r2
 8009844:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	681c      	ldr	r4, [r3, #0]
 800984a:	79fa      	ldrb	r2, [r7, #7]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	47a0      	blx	r4
 8009854:	4603      	mov	r3, r0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	bd90      	pop	{r4, r7, pc}

0800985e <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986c:	2002      	movs	r0, #2
 800986e:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8009870:	2300      	movs	r3, #0
 8009872:	220a      	movs	r2, #10
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff ffdd 	bl	8009836 <u8g_call_dev_fn>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	2003      	movs	r0, #3
 8009886:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	2000      	movs	r0, #0
 800988e:	4798      	blx	r3
  return r;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	2002      	movs	r0, #2
 80098aa:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b0:	2001      	movs	r0, #1
 80098b2:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80098b4:	2300      	movs	r3, #0
 80098b6:	2214      	movs	r2, #20
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ffbb 	bl	8009836 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3338      	adds	r3, #56	; 0x38
 80098c4:	2217      	movs	r2, #23
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ffb4 	bl	8009836 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d2:	2000      	movs	r0, #0
 80098d4:	4798      	blx	r3
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ec:	2002      	movs	r0, #2
 80098ee:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f4:	2001      	movs	r0, #1
 80098f6:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80098f8:	2300      	movs	r3, #0
 80098fa:	2215      	movs	r2, #21
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ff99 	bl	8009836 <u8g_call_dev_fn>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d006      	beq.n	800991c <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3338      	adds	r3, #56	; 0x38
 8009912:	2217      	movs	r2, #23
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7ff ff8d 	bl	8009836 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009920:	2000      	movs	r0, #0
 8009922:	4798      	blx	r3
  return r;
 8009924:	7bfb      	ldrb	r3, [r7, #15]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	4611      	mov	r1, r2
 800993a:	461a      	mov	r2, r3
 800993c:	460b      	mov	r3, r1
 800993e:	71fb      	strb	r3, [r7, #7]
 8009940:	4613      	mov	r3, r2
 8009942:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	332d      	adds	r3, #45	; 0x2d
 8009948:	617b      	str	r3, [r7, #20]
  arg->x = x;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	79fa      	ldrb	r2, [r7, #7]
 800994e:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	79ba      	ldrb	r2, [r7, #6]
 8009954:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f897 2020 	ldrb.w	r2, [r7, #32]
 800995c:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009964:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	223b      	movs	r2, #59	; 0x3b
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ff62 	bl	8009836 <u8g_call_dev_fn>
}
 8009972:	bf00      	nop
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8009984:	f107 030f 	add.w	r3, r7, #15
 8009988:	2246      	movs	r2, #70	; 0x46
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff52 	bl	8009836 <u8g_call_dev_fn>
  return r;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 80099a6:	f107 030f 	add.w	r3, r7, #15
 80099aa:	2247      	movs	r2, #71	; 0x47
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7ff ff41 	bl	8009836 <u8g_call_dev_fn>
  return r;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80099c8:	2300      	movs	r3, #0
 80099ca:	2248      	movs	r2, #72	; 0x48
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff ff31 	bl	8009836 <u8g_call_dev_fn>
 80099d4:	4603      	mov	r3, r0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff ffc4 	bl	800997a <u8g_GetWidthLL>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff ffcb 	bl	800999c <u8g_GetHeightLL>
 8009a06:	4603      	mov	r3, r0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ffd2 	bl	80099be <u8g_GetModeLL>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6859      	ldr	r1, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3338      	adds	r3, #56	; 0x38
 8009a2a:	2217      	movs	r2, #23
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff02 	bl	8009836 <u8g_call_dev_fn>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2222      	movs	r2, #34	; 0x22
 8009a60:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f891 	bl	8009b92 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff feb9 	bl	80097e8 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2240      	movs	r2, #64	; 0x40
 8009a92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a02      	ldr	r2, [pc, #8]	; (8009aac <u8g_init_data+0x70>)
 8009aa2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	0800a0c5 	.word	0x0800a0c5

08009ab0 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fecd 	bl	800985e <u8g_InitLL>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <u8g_Begin+0x1e>
    return 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e003      	b.n	8009ad6 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff85 	bl	80099de <u8g_UpdateDimension>
  return 1;
 8009ad4:	2301      	movs	r3, #1
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff ffa6 	bl	8009a3c <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff ffd6 	bl	8009ab0 <u8g_Begin>
 8009b04:	4603      	mov	r3, r0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff febc 	bl	800989a <u8g_FirstPageLL>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fec8 	bl	80098de <u8g_NextPageLL>
 8009b4e:	4603      	mov	r3, r0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	461a      	mov	r2, r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	70fb      	strb	r3, [r7, #3]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70bb      	strb	r3, [r7, #2]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6859      	ldr	r1, [r3, #4]
 8009b76:	78b8      	ldrb	r0, [r7, #2]
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	7c3b      	ldrb	r3, [r7, #16]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	787b      	ldrb	r3, [r7, #1]
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	4603      	mov	r3, r0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fed2 	bl	800992e <u8g_Draw8PixelLL>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	78fa      	ldrb	r2, [r7, #3]
 8009ba2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b083      	sub	sp, #12
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	781a      	ldrb	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	78db      	ldrb	r3, [r3, #3]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	711a      	strb	r2, [r3, #4]
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8009be6:	b490      	push	{r4, r7}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	789a      	ldrb	r2, [r3, #2]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	789a      	ldrb	r2, [r3, #2]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d301      	bcc.n	8009c0e <u8g_page_Next+0x28>
    return 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e018      	b.n	8009c40 <u8g_page_Next+0x5a>
  p->page++;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	3301      	adds	r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	4423      	add	r3, r4
 8009c24:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	d304      	bcc.n	8009c38 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8009c32:	4623      	mov	r3, r4
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	70da      	strb	r2, [r3, #3]
  
  return 1;
 8009c3e:	2301      	movs	r3, #1
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc90      	pop	{r4, r7}
 8009c48:	4770      	bx	lr

08009c4a <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	795b      	ldrb	r3, [r3, #5]
 8009c60:	461a      	mov	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	60fa      	str	r2, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d1f6      	bne.n	8009c68 <u8g_pb_Clear+0x1e>
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
 8009c94:	4613      	mov	r3, r2
 8009c96:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	78db      	ldrb	r3, [r3, #3]
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	bf94      	ite	ls
 8009ca2:	2301      	movls	r3, #1
 8009ca4:	2300      	movhi	r3, #0
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	789b      	ldrb	r3, [r3, #2]
 8009cae:	78ba      	ldrb	r2, [r7, #2]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	bf2c      	ite	cs
 8009cb4:	2301      	movcs	r3, #1
 8009cb6:	2300      	movcc	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	78bb      	ldrb	r3, [r7, #2]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	bf8c      	ite	hi
 8009cc4:	2301      	movhi	r3, #1
 8009cc6:	2300      	movls	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8009cd0:	7bfa      	ldrb	r2, [r7, #15]
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8009cd8:	7bba      	ldrb	r2, [r7, #14]
 8009cda:	7b7b      	ldrb	r3, [r7, #13]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8009ce0:	7b7a      	ldrb	r2, [r7, #13]
 8009ce2:	7b3b      	ldrb	r3, [r7, #12]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8009ce8:	7bfa      	ldrb	r2, [r7, #15]
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8009cf0:	7bfa      	ldrb	r2, [r7, #15]
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	b2db      	uxtb	r3, r3
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	789a      	ldrb	r2, [r3, #2]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	795a      	ldrb	r2, [r3, #5]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	709a      	strb	r2, [r3, #2]
  box->x1--;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	789b      	ldrb	r3, [r3, #2]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	78da      	ldrb	r2, [r3, #3]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	70da      	strb	r2, [r3, #3]
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	78db      	ldrb	r3, [r3, #3]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d813      	bhi.n	8009d90 <u8g_pb_Is8PixelVisible+0x44>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <u8g_pb_Is8PixelVisible+0x24>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d91 	.word	0x08009d91
 8009d74:	08009d81 	.word	0x08009d81
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d89 	.word	0x08009d89
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	3308      	adds	r3, #8
 8009d84:	73bb      	strb	r3, [r7, #14]
      break;
 8009d86:	e003      	b.n	8009d90 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	3b08      	subs	r3, #8
 8009d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8e:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8009d90:	7bba      	ldrb	r2, [r7, #14]
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff ff76 	bl	8009c88 <u8g_pb_IsYIntersection>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop

08009da8 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	795a      	ldrb	r2, [r3, #5]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	68b8      	ldr	r0, [r7, #8]
 8009dc0:	f7ff f870 	bl	8008ea4 <u8g_WriteSequence>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8009dce:	b490      	push	{r4, r7}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4603      	mov	r3, r0
 8009dde:	70fb      	strb	r3, [r7, #3]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70bb      	strb	r3, [r7, #2]
 8009de4:	4613      	mov	r3, r2
 8009de6:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	789b      	ldrb	r3, [r3, #2]
 8009df2:	78ba      	ldrb	r2, [r7, #2]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8009df8:	2401      	movs	r4, #1
  y &= 0x07;
 8009dfa:	78bb      	ldrb	r3, [r7, #2]
 8009dfc:	f003 0307 	and.w	r3, r3, #7
 8009e00:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8009e02:	4622      	mov	r2, r4
 8009e04:	78bb      	ldrb	r3, [r7, #2]
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	b2dc      	uxtb	r4, r3
  ptr += x;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8009e14:	787b      	ldrb	r3, [r7, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d006      	beq.n	8009e28 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4323      	orrs	r3, r4
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8009e26:	e007      	b.n	8009e38 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8009e28:	43e3      	mvns	r3, r4
 8009e2a:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	4023      	ands	r3, r4
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	701a      	strb	r2, [r3, #0]
}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc90      	pop	{r4, r7}
 8009e40:	4770      	bx	lr

08009e42 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785a      	ldrb	r2, [r3, #1]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	789b      	ldrb	r3, [r3, #2]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d315      	bcc.n	8009e84 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	785a      	ldrb	r2, [r3, #1]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	78db      	ldrb	r3, [r3, #3]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d811      	bhi.n	8009e88 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781a      	ldrb	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	795b      	ldrb	r3, [r3, #5]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d20d      	bcs.n	8009e8c <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	7819      	ldrb	r1, [r3, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	785a      	ldrb	r2, [r3, #1]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	791b      	ldrb	r3, [r3, #4]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff ffa6 	bl	8009dce <u8g_pb8v1_set_pixel>
 8009e82:	e004      	b.n	8009e8e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009e84:	bf00      	nop
 8009e86:	e002      	b.n	8009e8e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009e88:	bf00      	nop
 8009e8a:	e000      	b.n	8009e8e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009e8c:	bf00      	nop
}
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	78db      	ldrb	r3, [r3, #3]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d81a      	bhi.n	8009ee8 <u8g_pb8v1_Set8PixelOpt2+0x54>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009ed1 	.word	0x08009ed1
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009ee1 	.word	0x08009ee1
  {
    case 0: dx++; break;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	73fb      	strb	r3, [r7, #15]
 8009ece:	e00b      	b.n	8009ee8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	73bb      	strb	r3, [r7, #14]
 8009ed6:	e007      	b.n	8009ee8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
 8009ede:	e003      	b.n	8009ee8 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	73bb      	strb	r3, [r7, #14]
 8009ee6:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 8009ee8:	b263      	sxtb	r3, r4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da03      	bge.n	8009ef6 <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ffa6 	bl	8009e42 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	4413      	add	r3, r2
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	785a      	ldrb	r2, [r3, #1]
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8009f12:	0063      	lsls	r3, r4, #1
 8009f14:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 8009f16:	2c00      	cmp	r4, #0
 8009f18:	d1e6      	bne.n	8009ee8 <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd90      	pop	{r4, r7, pc}

08009f24 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	4613      	mov	r3, r2
 8009f32:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	617b      	str	r3, [r7, #20]
  switch(msg)
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	3b0a      	subs	r3, #10
 8009f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f40:	f200 80ba 	bhi.w	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <u8g_dev_pb8v1_base_fn+0x28>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	0800a0b9 	.word	0x0800a0b9
 8009f50:	0800a0b9 	.word	0x0800a0b9
 8009f54:	0800a0b9 	.word	0x0800a0b9
 8009f58:	0800a0b9 	.word	0x0800a0b9
 8009f5c:	0800a0b9 	.word	0x0800a0b9
 8009f60:	0800a0b9 	.word	0x0800a0b9
 8009f64:	0800a0b9 	.word	0x0800a0b9
 8009f68:	0800a0b9 	.word	0x0800a0b9
 8009f6c:	0800a0b9 	.word	0x0800a0b9
 8009f70:	0800a0b9 	.word	0x0800a0b9
 8009f74:	0800a06b 	.word	0x0800a06b
 8009f78:	0800a07b 	.word	0x0800a07b
 8009f7c:	0800a0b9 	.word	0x0800a0b9
 8009f80:	0800a095 	.word	0x0800a095
 8009f84:	0800a0b9 	.word	0x0800a0b9
 8009f88:	0800a0b9 	.word	0x0800a0b9
 8009f8c:	0800a0b9 	.word	0x0800a0b9
 8009f90:	0800a0b9 	.word	0x0800a0b9
 8009f94:	0800a0b9 	.word	0x0800a0b9
 8009f98:	0800a0b9 	.word	0x0800a0b9
 8009f9c:	0800a0b9 	.word	0x0800a0b9
 8009fa0:	0800a0b9 	.word	0x0800a0b9
 8009fa4:	0800a0b9 	.word	0x0800a0b9
 8009fa8:	0800a0b9 	.word	0x0800a0b9
 8009fac:	0800a0b9 	.word	0x0800a0b9
 8009fb0:	0800a0b9 	.word	0x0800a0b9
 8009fb4:	0800a0b9 	.word	0x0800a0b9
 8009fb8:	0800a0b9 	.word	0x0800a0b9
 8009fbc:	0800a0b9 	.word	0x0800a0b9
 8009fc0:	0800a0b9 	.word	0x0800a0b9
 8009fc4:	0800a0b9 	.word	0x0800a0b9
 8009fc8:	0800a0b9 	.word	0x0800a0b9
 8009fcc:	0800a0b9 	.word	0x0800a0b9
 8009fd0:	0800a0b9 	.word	0x0800a0b9
 8009fd4:	0800a0b9 	.word	0x0800a0b9
 8009fd8:	0800a0b9 	.word	0x0800a0b9
 8009fdc:	0800a0b9 	.word	0x0800a0b9
 8009fe0:	0800a0b9 	.word	0x0800a0b9
 8009fe4:	0800a0b9 	.word	0x0800a0b9
 8009fe8:	0800a0b9 	.word	0x0800a0b9
 8009fec:	0800a061 	.word	0x0800a061
 8009ff0:	0800a0b9 	.word	0x0800a0b9
 8009ff4:	0800a0b9 	.word	0x0800a0b9
 8009ff8:	0800a0b9 	.word	0x0800a0b9
 8009ffc:	0800a0b9 	.word	0x0800a0b9
 800a000:	0800a0b9 	.word	0x0800a0b9
 800a004:	0800a0b9 	.word	0x0800a0b9
 800a008:	0800a0b9 	.word	0x0800a0b9
 800a00c:	0800a0b9 	.word	0x0800a0b9
 800a010:	0800a049 	.word	0x0800a049
 800a014:	0800a0b9 	.word	0x0800a0b9
 800a018:	0800a0b9 	.word	0x0800a0b9
 800a01c:	0800a0b9 	.word	0x0800a0b9
 800a020:	0800a0b9 	.word	0x0800a0b9
 800a024:	0800a0b9 	.word	0x0800a0b9
 800a028:	0800a0b9 	.word	0x0800a0b9
 800a02c:	0800a0b9 	.word	0x0800a0b9
 800a030:	0800a0b9 	.word	0x0800a0b9
 800a034:	0800a0b9 	.word	0x0800a0b9
 800a038:	0800a0b9 	.word	0x0800a0b9
 800a03c:	0800a09f 	.word	0x0800a09f
 800a040:	0800a0a9 	.word	0x0800a0a9
 800a044:	0800a0b3 	.word	0x0800a0b3
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6978      	ldr	r0, [r7, #20]
 800a04c:	f7ff fe7e 	bl	8009d4c <u8g_pb_Is8PixelVisible>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d02f      	beq.n	800a0b6 <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6978      	ldr	r0, [r7, #20]
 800a05a:	f7ff ff1b 	bl	8009e94 <u8g_pb8v1_Set8PixelOpt2>
      break;
 800a05e:	e02a      	b.n	800a0b6 <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f7ff feed 	bl	8009e42 <u8g_pb8v1_SetPixel>
      break;
 800a068:	e026      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 800a06a:	6978      	ldr	r0, [r7, #20]
 800a06c:	f7ff fded 	bl	8009c4a <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff fd9d 	bl	8009bb2 <u8g_page_First>
      break;
 800a078:	e01e      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fdb2 	bl	8009be6 <u8g_page_Next>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	e016      	b.n	800a0ba <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 800a08c:	6978      	ldr	r0, [r7, #20]
 800a08e:	f7ff fddc 	bl	8009c4a <u8g_pb_Clear>
      break;
 800a092:	e011      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6978      	ldr	r0, [r7, #20]
 800a098:	f7ff fe38 	bl	8009d0c <u8g_pb_GetPageBox>
      break;
 800a09c:	e00c      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	795a      	ldrb	r2, [r3, #5]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]
      break;
 800a0a6:	e007      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	785a      	ldrb	r2, [r3, #1]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	701a      	strb	r2, [r3, #0]
      break;
 800a0b0:	e002      	b.n	800a0b8 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e001      	b.n	800a0ba <u8g_dev_pb8v1_base_fn+0x196>
      break;
 800a0b6:	bf00      	nop
  }
  return 1;
 800a0b8:	2301      	movs	r3, #1
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop

0800a0c4 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <siprintf>:
 800a0dc:	b40e      	push	{r1, r2, r3}
 800a0de:	b500      	push	{lr}
 800a0e0:	b09c      	sub	sp, #112	; 0x70
 800a0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a0e4:	9002      	str	r0, [sp, #8]
 800a0e6:	9006      	str	r0, [sp, #24]
 800a0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0ec:	4809      	ldr	r0, [pc, #36]	; (800a114 <siprintf+0x38>)
 800a0ee:	9107      	str	r1, [sp, #28]
 800a0f0:	9104      	str	r1, [sp, #16]
 800a0f2:	4909      	ldr	r1, [pc, #36]	; (800a118 <siprintf+0x3c>)
 800a0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	a902      	add	r1, sp, #8
 800a100:	f000 f992 	bl	800a428 <_svfiprintf_r>
 800a104:	9b02      	ldr	r3, [sp, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	b01c      	add	sp, #112	; 0x70
 800a10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a110:	b003      	add	sp, #12
 800a112:	4770      	bx	lr
 800a114:	20000084 	.word	0x20000084
 800a118:	ffff0208 	.word	0xffff0208

0800a11c <memset>:
 800a11c:	4402      	add	r2, r0
 800a11e:	4603      	mov	r3, r0
 800a120:	4293      	cmp	r3, r2
 800a122:	d100      	bne.n	800a126 <memset+0xa>
 800a124:	4770      	bx	lr
 800a126:	f803 1b01 	strb.w	r1, [r3], #1
 800a12a:	e7f9      	b.n	800a120 <memset+0x4>

0800a12c <__errno>:
 800a12c:	4b01      	ldr	r3, [pc, #4]	; (800a134 <__errno+0x8>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000084 	.word	0x20000084

0800a138 <__libc_init_array>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	4d0d      	ldr	r5, [pc, #52]	; (800a170 <__libc_init_array+0x38>)
 800a13c:	4c0d      	ldr	r4, [pc, #52]	; (800a174 <__libc_init_array+0x3c>)
 800a13e:	1b64      	subs	r4, r4, r5
 800a140:	10a4      	asrs	r4, r4, #2
 800a142:	2600      	movs	r6, #0
 800a144:	42a6      	cmp	r6, r4
 800a146:	d109      	bne.n	800a15c <__libc_init_array+0x24>
 800a148:	4d0b      	ldr	r5, [pc, #44]	; (800a178 <__libc_init_array+0x40>)
 800a14a:	4c0c      	ldr	r4, [pc, #48]	; (800a17c <__libc_init_array+0x44>)
 800a14c:	f000 fc6a 	bl	800aa24 <_init>
 800a150:	1b64      	subs	r4, r4, r5
 800a152:	10a4      	asrs	r4, r4, #2
 800a154:	2600      	movs	r6, #0
 800a156:	42a6      	cmp	r6, r4
 800a158:	d105      	bne.n	800a166 <__libc_init_array+0x2e>
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a160:	4798      	blx	r3
 800a162:	3601      	adds	r6, #1
 800a164:	e7ee      	b.n	800a144 <__libc_init_array+0xc>
 800a166:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16a:	4798      	blx	r3
 800a16c:	3601      	adds	r6, #1
 800a16e:	e7f2      	b.n	800a156 <__libc_init_array+0x1e>
 800a170:	0800b6c4 	.word	0x0800b6c4
 800a174:	0800b6c4 	.word	0x0800b6c4
 800a178:	0800b6c4 	.word	0x0800b6c4
 800a17c:	0800b6c8 	.word	0x0800b6c8

0800a180 <__retarget_lock_acquire_recursive>:
 800a180:	4770      	bx	lr

0800a182 <__retarget_lock_release_recursive>:
 800a182:	4770      	bx	lr

0800a184 <_free_r>:
 800a184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a186:	2900      	cmp	r1, #0
 800a188:	d044      	beq.n	800a214 <_free_r+0x90>
 800a18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a18e:	9001      	str	r0, [sp, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f1a1 0404 	sub.w	r4, r1, #4
 800a196:	bfb8      	it	lt
 800a198:	18e4      	addlt	r4, r4, r3
 800a19a:	f000 f8df 	bl	800a35c <__malloc_lock>
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <_free_r+0x94>)
 800a1a0:	9801      	ldr	r0, [sp, #4]
 800a1a2:	6813      	ldr	r3, [r2, #0]
 800a1a4:	b933      	cbnz	r3, 800a1b4 <_free_r+0x30>
 800a1a6:	6063      	str	r3, [r4, #4]
 800a1a8:	6014      	str	r4, [r2, #0]
 800a1aa:	b003      	add	sp, #12
 800a1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b0:	f000 b8da 	b.w	800a368 <__malloc_unlock>
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	d908      	bls.n	800a1ca <_free_r+0x46>
 800a1b8:	6825      	ldr	r5, [r4, #0]
 800a1ba:	1961      	adds	r1, r4, r5
 800a1bc:	428b      	cmp	r3, r1
 800a1be:	bf01      	itttt	eq
 800a1c0:	6819      	ldreq	r1, [r3, #0]
 800a1c2:	685b      	ldreq	r3, [r3, #4]
 800a1c4:	1949      	addeq	r1, r1, r5
 800a1c6:	6021      	streq	r1, [r4, #0]
 800a1c8:	e7ed      	b.n	800a1a6 <_free_r+0x22>
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	b10b      	cbz	r3, 800a1d4 <_free_r+0x50>
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d9fa      	bls.n	800a1ca <_free_r+0x46>
 800a1d4:	6811      	ldr	r1, [r2, #0]
 800a1d6:	1855      	adds	r5, r2, r1
 800a1d8:	42a5      	cmp	r5, r4
 800a1da:	d10b      	bne.n	800a1f4 <_free_r+0x70>
 800a1dc:	6824      	ldr	r4, [r4, #0]
 800a1de:	4421      	add	r1, r4
 800a1e0:	1854      	adds	r4, r2, r1
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	6011      	str	r1, [r2, #0]
 800a1e6:	d1e0      	bne.n	800a1aa <_free_r+0x26>
 800a1e8:	681c      	ldr	r4, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	6053      	str	r3, [r2, #4]
 800a1ee:	440c      	add	r4, r1
 800a1f0:	6014      	str	r4, [r2, #0]
 800a1f2:	e7da      	b.n	800a1aa <_free_r+0x26>
 800a1f4:	d902      	bls.n	800a1fc <_free_r+0x78>
 800a1f6:	230c      	movs	r3, #12
 800a1f8:	6003      	str	r3, [r0, #0]
 800a1fa:	e7d6      	b.n	800a1aa <_free_r+0x26>
 800a1fc:	6825      	ldr	r5, [r4, #0]
 800a1fe:	1961      	adds	r1, r4, r5
 800a200:	428b      	cmp	r3, r1
 800a202:	bf04      	itt	eq
 800a204:	6819      	ldreq	r1, [r3, #0]
 800a206:	685b      	ldreq	r3, [r3, #4]
 800a208:	6063      	str	r3, [r4, #4]
 800a20a:	bf04      	itt	eq
 800a20c:	1949      	addeq	r1, r1, r5
 800a20e:	6021      	streq	r1, [r4, #0]
 800a210:	6054      	str	r4, [r2, #4]
 800a212:	e7ca      	b.n	800a1aa <_free_r+0x26>
 800a214:	b003      	add	sp, #12
 800a216:	bd30      	pop	{r4, r5, pc}
 800a218:	200006dc 	.word	0x200006dc

0800a21c <sbrk_aligned>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	4e0e      	ldr	r6, [pc, #56]	; (800a258 <sbrk_aligned+0x3c>)
 800a220:	460c      	mov	r4, r1
 800a222:	6831      	ldr	r1, [r6, #0]
 800a224:	4605      	mov	r5, r0
 800a226:	b911      	cbnz	r1, 800a22e <sbrk_aligned+0x12>
 800a228:	f000 fba6 	bl	800a978 <_sbrk_r>
 800a22c:	6030      	str	r0, [r6, #0]
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	f000 fba1 	bl	800a978 <_sbrk_r>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d00a      	beq.n	800a250 <sbrk_aligned+0x34>
 800a23a:	1cc4      	adds	r4, r0, #3
 800a23c:	f024 0403 	bic.w	r4, r4, #3
 800a240:	42a0      	cmp	r0, r4
 800a242:	d007      	beq.n	800a254 <sbrk_aligned+0x38>
 800a244:	1a21      	subs	r1, r4, r0
 800a246:	4628      	mov	r0, r5
 800a248:	f000 fb96 	bl	800a978 <_sbrk_r>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d101      	bne.n	800a254 <sbrk_aligned+0x38>
 800a250:	f04f 34ff 	mov.w	r4, #4294967295
 800a254:	4620      	mov	r0, r4
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	200006e0 	.word	0x200006e0

0800a25c <_malloc_r>:
 800a25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a260:	1ccd      	adds	r5, r1, #3
 800a262:	f025 0503 	bic.w	r5, r5, #3
 800a266:	3508      	adds	r5, #8
 800a268:	2d0c      	cmp	r5, #12
 800a26a:	bf38      	it	cc
 800a26c:	250c      	movcc	r5, #12
 800a26e:	2d00      	cmp	r5, #0
 800a270:	4607      	mov	r7, r0
 800a272:	db01      	blt.n	800a278 <_malloc_r+0x1c>
 800a274:	42a9      	cmp	r1, r5
 800a276:	d905      	bls.n	800a284 <_malloc_r+0x28>
 800a278:	230c      	movs	r3, #12
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	2600      	movs	r6, #0
 800a27e:	4630      	mov	r0, r6
 800a280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a358 <_malloc_r+0xfc>
 800a288:	f000 f868 	bl	800a35c <__malloc_lock>
 800a28c:	f8d8 3000 	ldr.w	r3, [r8]
 800a290:	461c      	mov	r4, r3
 800a292:	bb5c      	cbnz	r4, 800a2ec <_malloc_r+0x90>
 800a294:	4629      	mov	r1, r5
 800a296:	4638      	mov	r0, r7
 800a298:	f7ff ffc0 	bl	800a21c <sbrk_aligned>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	4604      	mov	r4, r0
 800a2a0:	d155      	bne.n	800a34e <_malloc_r+0xf2>
 800a2a2:	f8d8 4000 	ldr.w	r4, [r8]
 800a2a6:	4626      	mov	r6, r4
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	d145      	bne.n	800a338 <_malloc_r+0xdc>
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	d048      	beq.n	800a342 <_malloc_r+0xe6>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	eb04 0903 	add.w	r9, r4, r3
 800a2ba:	f000 fb5d 	bl	800a978 <_sbrk_r>
 800a2be:	4581      	cmp	r9, r0
 800a2c0:	d13f      	bne.n	800a342 <_malloc_r+0xe6>
 800a2c2:	6821      	ldr	r1, [r4, #0]
 800a2c4:	1a6d      	subs	r5, r5, r1
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff ffa7 	bl	800a21c <sbrk_aligned>
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d037      	beq.n	800a342 <_malloc_r+0xe6>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	442b      	add	r3, r5
 800a2d6:	6023      	str	r3, [r4, #0]
 800a2d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d038      	beq.n	800a352 <_malloc_r+0xf6>
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	42a2      	cmp	r2, r4
 800a2e4:	d12b      	bne.n	800a33e <_malloc_r+0xe2>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	e00f      	b.n	800a30c <_malloc_r+0xb0>
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	1b52      	subs	r2, r2, r5
 800a2f0:	d41f      	bmi.n	800a332 <_malloc_r+0xd6>
 800a2f2:	2a0b      	cmp	r2, #11
 800a2f4:	d917      	bls.n	800a326 <_malloc_r+0xca>
 800a2f6:	1961      	adds	r1, r4, r5
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	6025      	str	r5, [r4, #0]
 800a2fc:	bf18      	it	ne
 800a2fe:	6059      	strne	r1, [r3, #4]
 800a300:	6863      	ldr	r3, [r4, #4]
 800a302:	bf08      	it	eq
 800a304:	f8c8 1000 	streq.w	r1, [r8]
 800a308:	5162      	str	r2, [r4, r5]
 800a30a:	604b      	str	r3, [r1, #4]
 800a30c:	4638      	mov	r0, r7
 800a30e:	f104 060b 	add.w	r6, r4, #11
 800a312:	f000 f829 	bl	800a368 <__malloc_unlock>
 800a316:	f026 0607 	bic.w	r6, r6, #7
 800a31a:	1d23      	adds	r3, r4, #4
 800a31c:	1af2      	subs	r2, r6, r3
 800a31e:	d0ae      	beq.n	800a27e <_malloc_r+0x22>
 800a320:	1b9b      	subs	r3, r3, r6
 800a322:	50a3      	str	r3, [r4, r2]
 800a324:	e7ab      	b.n	800a27e <_malloc_r+0x22>
 800a326:	42a3      	cmp	r3, r4
 800a328:	6862      	ldr	r2, [r4, #4]
 800a32a:	d1dd      	bne.n	800a2e8 <_malloc_r+0x8c>
 800a32c:	f8c8 2000 	str.w	r2, [r8]
 800a330:	e7ec      	b.n	800a30c <_malloc_r+0xb0>
 800a332:	4623      	mov	r3, r4
 800a334:	6864      	ldr	r4, [r4, #4]
 800a336:	e7ac      	b.n	800a292 <_malloc_r+0x36>
 800a338:	4634      	mov	r4, r6
 800a33a:	6876      	ldr	r6, [r6, #4]
 800a33c:	e7b4      	b.n	800a2a8 <_malloc_r+0x4c>
 800a33e:	4613      	mov	r3, r2
 800a340:	e7cc      	b.n	800a2dc <_malloc_r+0x80>
 800a342:	230c      	movs	r3, #12
 800a344:	603b      	str	r3, [r7, #0]
 800a346:	4638      	mov	r0, r7
 800a348:	f000 f80e 	bl	800a368 <__malloc_unlock>
 800a34c:	e797      	b.n	800a27e <_malloc_r+0x22>
 800a34e:	6025      	str	r5, [r4, #0]
 800a350:	e7dc      	b.n	800a30c <_malloc_r+0xb0>
 800a352:	605b      	str	r3, [r3, #4]
 800a354:	deff      	udf	#255	; 0xff
 800a356:	bf00      	nop
 800a358:	200006dc 	.word	0x200006dc

0800a35c <__malloc_lock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__malloc_lock+0x8>)
 800a35e:	f7ff bf0f 	b.w	800a180 <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	200006d8 	.word	0x200006d8

0800a368 <__malloc_unlock>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__malloc_unlock+0x8>)
 800a36a:	f7ff bf0a 	b.w	800a182 <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	200006d8 	.word	0x200006d8

0800a374 <__ssputs_r>:
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a378:	688e      	ldr	r6, [r1, #8]
 800a37a:	461f      	mov	r7, r3
 800a37c:	42be      	cmp	r6, r7
 800a37e:	680b      	ldr	r3, [r1, #0]
 800a380:	4682      	mov	sl, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4690      	mov	r8, r2
 800a386:	d82c      	bhi.n	800a3e2 <__ssputs_r+0x6e>
 800a388:	898a      	ldrh	r2, [r1, #12]
 800a38a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a38e:	d026      	beq.n	800a3de <__ssputs_r+0x6a>
 800a390:	6965      	ldr	r5, [r4, #20]
 800a392:	6909      	ldr	r1, [r1, #16]
 800a394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a398:	eba3 0901 	sub.w	r9, r3, r1
 800a39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3a0:	1c7b      	adds	r3, r7, #1
 800a3a2:	444b      	add	r3, r9
 800a3a4:	106d      	asrs	r5, r5, #1
 800a3a6:	429d      	cmp	r5, r3
 800a3a8:	bf38      	it	cc
 800a3aa:	461d      	movcc	r5, r3
 800a3ac:	0553      	lsls	r3, r2, #21
 800a3ae:	d527      	bpl.n	800a400 <__ssputs_r+0x8c>
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7ff ff53 	bl	800a25c <_malloc_r>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	b360      	cbz	r0, 800a414 <__ssputs_r+0xa0>
 800a3ba:	6921      	ldr	r1, [r4, #16]
 800a3bc:	464a      	mov	r2, r9
 800a3be:	f000 faeb 	bl	800a998 <memcpy>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3cc:	81a3      	strh	r3, [r4, #12]
 800a3ce:	6126      	str	r6, [r4, #16]
 800a3d0:	6165      	str	r5, [r4, #20]
 800a3d2:	444e      	add	r6, r9
 800a3d4:	eba5 0509 	sub.w	r5, r5, r9
 800a3d8:	6026      	str	r6, [r4, #0]
 800a3da:	60a5      	str	r5, [r4, #8]
 800a3dc:	463e      	mov	r6, r7
 800a3de:	42be      	cmp	r6, r7
 800a3e0:	d900      	bls.n	800a3e4 <__ssputs_r+0x70>
 800a3e2:	463e      	mov	r6, r7
 800a3e4:	6820      	ldr	r0, [r4, #0]
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	f000 faab 	bl	800a944 <memmove>
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	60a3      	str	r3, [r4, #8]
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	4433      	add	r3, r6
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a400:	462a      	mov	r2, r5
 800a402:	f000 fad7 	bl	800a9b4 <_realloc_r>
 800a406:	4606      	mov	r6, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d1e0      	bne.n	800a3ce <__ssputs_r+0x5a>
 800a40c:	6921      	ldr	r1, [r4, #16]
 800a40e:	4650      	mov	r0, sl
 800a410:	f7ff feb8 	bl	800a184 <_free_r>
 800a414:	230c      	movs	r3, #12
 800a416:	f8ca 3000 	str.w	r3, [sl]
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	e7e9      	b.n	800a3fc <__ssputs_r+0x88>

0800a428 <_svfiprintf_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	4698      	mov	r8, r3
 800a42e:	898b      	ldrh	r3, [r1, #12]
 800a430:	061b      	lsls	r3, r3, #24
 800a432:	b09d      	sub	sp, #116	; 0x74
 800a434:	4607      	mov	r7, r0
 800a436:	460d      	mov	r5, r1
 800a438:	4614      	mov	r4, r2
 800a43a:	d50e      	bpl.n	800a45a <_svfiprintf_r+0x32>
 800a43c:	690b      	ldr	r3, [r1, #16]
 800a43e:	b963      	cbnz	r3, 800a45a <_svfiprintf_r+0x32>
 800a440:	2140      	movs	r1, #64	; 0x40
 800a442:	f7ff ff0b 	bl	800a25c <_malloc_r>
 800a446:	6028      	str	r0, [r5, #0]
 800a448:	6128      	str	r0, [r5, #16]
 800a44a:	b920      	cbnz	r0, 800a456 <_svfiprintf_r+0x2e>
 800a44c:	230c      	movs	r3, #12
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	f04f 30ff 	mov.w	r0, #4294967295
 800a454:	e0d0      	b.n	800a5f8 <_svfiprintf_r+0x1d0>
 800a456:	2340      	movs	r3, #64	; 0x40
 800a458:	616b      	str	r3, [r5, #20]
 800a45a:	2300      	movs	r3, #0
 800a45c:	9309      	str	r3, [sp, #36]	; 0x24
 800a45e:	2320      	movs	r3, #32
 800a460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a464:	f8cd 800c 	str.w	r8, [sp, #12]
 800a468:	2330      	movs	r3, #48	; 0x30
 800a46a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a610 <_svfiprintf_r+0x1e8>
 800a46e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a472:	f04f 0901 	mov.w	r9, #1
 800a476:	4623      	mov	r3, r4
 800a478:	469a      	mov	sl, r3
 800a47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47e:	b10a      	cbz	r2, 800a484 <_svfiprintf_r+0x5c>
 800a480:	2a25      	cmp	r2, #37	; 0x25
 800a482:	d1f9      	bne.n	800a478 <_svfiprintf_r+0x50>
 800a484:	ebba 0b04 	subs.w	fp, sl, r4
 800a488:	d00b      	beq.n	800a4a2 <_svfiprintf_r+0x7a>
 800a48a:	465b      	mov	r3, fp
 800a48c:	4622      	mov	r2, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff ff6f 	bl	800a374 <__ssputs_r>
 800a496:	3001      	adds	r0, #1
 800a498:	f000 80a9 	beq.w	800a5ee <_svfiprintf_r+0x1c6>
 800a49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49e:	445a      	add	r2, fp
 800a4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 80a1 	beq.w	800a5ee <_svfiprintf_r+0x1c6>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	9307      	str	r3, [sp, #28]
 800a4be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c4:	4654      	mov	r4, sl
 800a4c6:	2205      	movs	r2, #5
 800a4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4cc:	4850      	ldr	r0, [pc, #320]	; (800a610 <_svfiprintf_r+0x1e8>)
 800a4ce:	f7f5 fe7f 	bl	80001d0 <memchr>
 800a4d2:	9a04      	ldr	r2, [sp, #16]
 800a4d4:	b9d8      	cbnz	r0, 800a50e <_svfiprintf_r+0xe6>
 800a4d6:	06d0      	lsls	r0, r2, #27
 800a4d8:	bf44      	itt	mi
 800a4da:	2320      	movmi	r3, #32
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e0:	0711      	lsls	r1, r2, #28
 800a4e2:	bf44      	itt	mi
 800a4e4:	232b      	movmi	r3, #43	; 0x2b
 800a4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f0:	d015      	beq.n	800a51e <_svfiprintf_r+0xf6>
 800a4f2:	9a07      	ldr	r2, [sp, #28]
 800a4f4:	4654      	mov	r4, sl
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f04f 0c0a 	mov.w	ip, #10
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a502:	3b30      	subs	r3, #48	; 0x30
 800a504:	2b09      	cmp	r3, #9
 800a506:	d94d      	bls.n	800a5a4 <_svfiprintf_r+0x17c>
 800a508:	b1b0      	cbz	r0, 800a538 <_svfiprintf_r+0x110>
 800a50a:	9207      	str	r2, [sp, #28]
 800a50c:	e014      	b.n	800a538 <_svfiprintf_r+0x110>
 800a50e:	eba0 0308 	sub.w	r3, r0, r8
 800a512:	fa09 f303 	lsl.w	r3, r9, r3
 800a516:	4313      	orrs	r3, r2
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	46a2      	mov	sl, r4
 800a51c:	e7d2      	b.n	800a4c4 <_svfiprintf_r+0x9c>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	1d19      	adds	r1, r3, #4
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	9103      	str	r1, [sp, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfbb      	ittet	lt
 800a52a:	425b      	neglt	r3, r3
 800a52c:	f042 0202 	orrlt.w	r2, r2, #2
 800a530:	9307      	strge	r3, [sp, #28]
 800a532:	9307      	strlt	r3, [sp, #28]
 800a534:	bfb8      	it	lt
 800a536:	9204      	strlt	r2, [sp, #16]
 800a538:	7823      	ldrb	r3, [r4, #0]
 800a53a:	2b2e      	cmp	r3, #46	; 0x2e
 800a53c:	d10c      	bne.n	800a558 <_svfiprintf_r+0x130>
 800a53e:	7863      	ldrb	r3, [r4, #1]
 800a540:	2b2a      	cmp	r3, #42	; 0x2a
 800a542:	d134      	bne.n	800a5ae <_svfiprintf_r+0x186>
 800a544:	9b03      	ldr	r3, [sp, #12]
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	9203      	str	r2, [sp, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bfb8      	it	lt
 800a550:	f04f 33ff 	movlt.w	r3, #4294967295
 800a554:	3402      	adds	r4, #2
 800a556:	9305      	str	r3, [sp, #20]
 800a558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a620 <_svfiprintf_r+0x1f8>
 800a55c:	7821      	ldrb	r1, [r4, #0]
 800a55e:	2203      	movs	r2, #3
 800a560:	4650      	mov	r0, sl
 800a562:	f7f5 fe35 	bl	80001d0 <memchr>
 800a566:	b138      	cbz	r0, 800a578 <_svfiprintf_r+0x150>
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	eba0 000a 	sub.w	r0, r0, sl
 800a56e:	2240      	movs	r2, #64	; 0x40
 800a570:	4082      	lsls	r2, r0
 800a572:	4313      	orrs	r3, r2
 800a574:	3401      	adds	r4, #1
 800a576:	9304      	str	r3, [sp, #16]
 800a578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57c:	4825      	ldr	r0, [pc, #148]	; (800a614 <_svfiprintf_r+0x1ec>)
 800a57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a582:	2206      	movs	r2, #6
 800a584:	f7f5 fe24 	bl	80001d0 <memchr>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d038      	beq.n	800a5fe <_svfiprintf_r+0x1d6>
 800a58c:	4b22      	ldr	r3, [pc, #136]	; (800a618 <_svfiprintf_r+0x1f0>)
 800a58e:	bb1b      	cbnz	r3, 800a5d8 <_svfiprintf_r+0x1b0>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	3307      	adds	r3, #7
 800a594:	f023 0307 	bic.w	r3, r3, #7
 800a598:	3308      	adds	r3, #8
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59e:	4433      	add	r3, r6
 800a5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a2:	e768      	b.n	800a476 <_svfiprintf_r+0x4e>
 800a5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	e7a6      	b.n	800a4fc <_svfiprintf_r+0xd4>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	3401      	adds	r4, #1
 800a5b2:	9305      	str	r3, [sp, #20]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f04f 0c0a 	mov.w	ip, #10
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c0:	3a30      	subs	r2, #48	; 0x30
 800a5c2:	2a09      	cmp	r2, #9
 800a5c4:	d903      	bls.n	800a5ce <_svfiprintf_r+0x1a6>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0c6      	beq.n	800a558 <_svfiprintf_r+0x130>
 800a5ca:	9105      	str	r1, [sp, #20]
 800a5cc:	e7c4      	b.n	800a558 <_svfiprintf_r+0x130>
 800a5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e7f0      	b.n	800a5ba <_svfiprintf_r+0x192>
 800a5d8:	ab03      	add	r3, sp, #12
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	462a      	mov	r2, r5
 800a5de:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <_svfiprintf_r+0x1f4>)
 800a5e0:	a904      	add	r1, sp, #16
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	1c42      	adds	r2, r0, #1
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	d1d6      	bne.n	800a59c <_svfiprintf_r+0x174>
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	065b      	lsls	r3, r3, #25
 800a5f2:	f53f af2d 	bmi.w	800a450 <_svfiprintf_r+0x28>
 800a5f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f8:	b01d      	add	sp, #116	; 0x74
 800a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	462a      	mov	r2, r5
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <_svfiprintf_r+0x1f4>)
 800a606:	a904      	add	r1, sp, #16
 800a608:	4638      	mov	r0, r7
 800a60a:	f000 f879 	bl	800a700 <_printf_i>
 800a60e:	e7eb      	b.n	800a5e8 <_svfiprintf_r+0x1c0>
 800a610:	0800b687 	.word	0x0800b687
 800a614:	0800b691 	.word	0x0800b691
 800a618:	00000000 	.word	0x00000000
 800a61c:	0800a375 	.word	0x0800a375
 800a620:	0800b68d 	.word	0x0800b68d

0800a624 <_printf_common>:
 800a624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a628:	4616      	mov	r6, r2
 800a62a:	4699      	mov	r9, r3
 800a62c:	688a      	ldr	r2, [r1, #8]
 800a62e:	690b      	ldr	r3, [r1, #16]
 800a630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a634:	4293      	cmp	r3, r2
 800a636:	bfb8      	it	lt
 800a638:	4613      	movlt	r3, r2
 800a63a:	6033      	str	r3, [r6, #0]
 800a63c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a640:	4607      	mov	r7, r0
 800a642:	460c      	mov	r4, r1
 800a644:	b10a      	cbz	r2, 800a64a <_printf_common+0x26>
 800a646:	3301      	adds	r3, #1
 800a648:	6033      	str	r3, [r6, #0]
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	0699      	lsls	r1, r3, #26
 800a64e:	bf42      	ittt	mi
 800a650:	6833      	ldrmi	r3, [r6, #0]
 800a652:	3302      	addmi	r3, #2
 800a654:	6033      	strmi	r3, [r6, #0]
 800a656:	6825      	ldr	r5, [r4, #0]
 800a658:	f015 0506 	ands.w	r5, r5, #6
 800a65c:	d106      	bne.n	800a66c <_printf_common+0x48>
 800a65e:	f104 0a19 	add.w	sl, r4, #25
 800a662:	68e3      	ldr	r3, [r4, #12]
 800a664:	6832      	ldr	r2, [r6, #0]
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	42ab      	cmp	r3, r5
 800a66a:	dc26      	bgt.n	800a6ba <_printf_common+0x96>
 800a66c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a670:	1e13      	subs	r3, r2, #0
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	bf18      	it	ne
 800a676:	2301      	movne	r3, #1
 800a678:	0692      	lsls	r2, r2, #26
 800a67a:	d42b      	bmi.n	800a6d4 <_printf_common+0xb0>
 800a67c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a680:	4649      	mov	r1, r9
 800a682:	4638      	mov	r0, r7
 800a684:	47c0      	blx	r8
 800a686:	3001      	adds	r0, #1
 800a688:	d01e      	beq.n	800a6c8 <_printf_common+0xa4>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	f003 0306 	and.w	r3, r3, #6
 800a692:	2b04      	cmp	r3, #4
 800a694:	bf02      	ittt	eq
 800a696:	68e5      	ldreq	r5, [r4, #12]
 800a698:	6833      	ldreq	r3, [r6, #0]
 800a69a:	1aed      	subeq	r5, r5, r3
 800a69c:	68a3      	ldr	r3, [r4, #8]
 800a69e:	bf0c      	ite	eq
 800a6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6a4:	2500      	movne	r5, #0
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	bfc4      	itt	gt
 800a6aa:	1a9b      	subgt	r3, r3, r2
 800a6ac:	18ed      	addgt	r5, r5, r3
 800a6ae:	2600      	movs	r6, #0
 800a6b0:	341a      	adds	r4, #26
 800a6b2:	42b5      	cmp	r5, r6
 800a6b4:	d11a      	bne.n	800a6ec <_printf_common+0xc8>
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	e008      	b.n	800a6cc <_printf_common+0xa8>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4652      	mov	r2, sl
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	47c0      	blx	r8
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d103      	bne.n	800a6d0 <_printf_common+0xac>
 800a6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d0:	3501      	adds	r5, #1
 800a6d2:	e7c6      	b.n	800a662 <_printf_common+0x3e>
 800a6d4:	18e1      	adds	r1, r4, r3
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	2030      	movs	r0, #48	; 0x30
 800a6da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6de:	4422      	add	r2, r4
 800a6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6e8:	3302      	adds	r3, #2
 800a6ea:	e7c7      	b.n	800a67c <_printf_common+0x58>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	47c0      	blx	r8
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d0e6      	beq.n	800a6c8 <_printf_common+0xa4>
 800a6fa:	3601      	adds	r6, #1
 800a6fc:	e7d9      	b.n	800a6b2 <_printf_common+0x8e>
	...

0800a700 <_printf_i>:
 800a700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	7e0f      	ldrb	r7, [r1, #24]
 800a706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a708:	2f78      	cmp	r7, #120	; 0x78
 800a70a:	4691      	mov	r9, r2
 800a70c:	4680      	mov	r8, r0
 800a70e:	460c      	mov	r4, r1
 800a710:	469a      	mov	sl, r3
 800a712:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a716:	d807      	bhi.n	800a728 <_printf_i+0x28>
 800a718:	2f62      	cmp	r7, #98	; 0x62
 800a71a:	d80a      	bhi.n	800a732 <_printf_i+0x32>
 800a71c:	2f00      	cmp	r7, #0
 800a71e:	f000 80d4 	beq.w	800a8ca <_printf_i+0x1ca>
 800a722:	2f58      	cmp	r7, #88	; 0x58
 800a724:	f000 80c0 	beq.w	800a8a8 <_printf_i+0x1a8>
 800a728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a72c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a730:	e03a      	b.n	800a7a8 <_printf_i+0xa8>
 800a732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a736:	2b15      	cmp	r3, #21
 800a738:	d8f6      	bhi.n	800a728 <_printf_i+0x28>
 800a73a:	a101      	add	r1, pc, #4	; (adr r1, 800a740 <_printf_i+0x40>)
 800a73c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a740:	0800a799 	.word	0x0800a799
 800a744:	0800a7ad 	.word	0x0800a7ad
 800a748:	0800a729 	.word	0x0800a729
 800a74c:	0800a729 	.word	0x0800a729
 800a750:	0800a729 	.word	0x0800a729
 800a754:	0800a729 	.word	0x0800a729
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a729 	.word	0x0800a729
 800a760:	0800a729 	.word	0x0800a729
 800a764:	0800a729 	.word	0x0800a729
 800a768:	0800a729 	.word	0x0800a729
 800a76c:	0800a8b1 	.word	0x0800a8b1
 800a770:	0800a7d9 	.word	0x0800a7d9
 800a774:	0800a86b 	.word	0x0800a86b
 800a778:	0800a729 	.word	0x0800a729
 800a77c:	0800a729 	.word	0x0800a729
 800a780:	0800a8d3 	.word	0x0800a8d3
 800a784:	0800a729 	.word	0x0800a729
 800a788:	0800a7d9 	.word	0x0800a7d9
 800a78c:	0800a729 	.word	0x0800a729
 800a790:	0800a729 	.word	0x0800a729
 800a794:	0800a873 	.word	0x0800a873
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	602a      	str	r2, [r5, #0]
 800a7a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e09f      	b.n	800a8ec <_printf_i+0x1ec>
 800a7ac:	6820      	ldr	r0, [r4, #0]
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	0607      	lsls	r7, r0, #24
 800a7b2:	f103 0104 	add.w	r1, r3, #4
 800a7b6:	6029      	str	r1, [r5, #0]
 800a7b8:	d501      	bpl.n	800a7be <_printf_i+0xbe>
 800a7ba:	681e      	ldr	r6, [r3, #0]
 800a7bc:	e003      	b.n	800a7c6 <_printf_i+0xc6>
 800a7be:	0646      	lsls	r6, r0, #25
 800a7c0:	d5fb      	bpl.n	800a7ba <_printf_i+0xba>
 800a7c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	da03      	bge.n	800a7d2 <_printf_i+0xd2>
 800a7ca:	232d      	movs	r3, #45	; 0x2d
 800a7cc:	4276      	negs	r6, r6
 800a7ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7d2:	485a      	ldr	r0, [pc, #360]	; (800a93c <_printf_i+0x23c>)
 800a7d4:	230a      	movs	r3, #10
 800a7d6:	e012      	b.n	800a7fe <_printf_i+0xfe>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	6820      	ldr	r0, [r4, #0]
 800a7dc:	1d19      	adds	r1, r3, #4
 800a7de:	6029      	str	r1, [r5, #0]
 800a7e0:	0605      	lsls	r5, r0, #24
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_i+0xe8>
 800a7e4:	681e      	ldr	r6, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <_printf_i+0xee>
 800a7e8:	0641      	lsls	r1, r0, #25
 800a7ea:	d5fb      	bpl.n	800a7e4 <_printf_i+0xe4>
 800a7ec:	881e      	ldrh	r6, [r3, #0]
 800a7ee:	4853      	ldr	r0, [pc, #332]	; (800a93c <_printf_i+0x23c>)
 800a7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2308      	moveq	r3, #8
 800a7f6:	230a      	movne	r3, #10
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7fe:	6865      	ldr	r5, [r4, #4]
 800a800:	60a5      	str	r5, [r4, #8]
 800a802:	2d00      	cmp	r5, #0
 800a804:	bfa2      	ittt	ge
 800a806:	6821      	ldrge	r1, [r4, #0]
 800a808:	f021 0104 	bicge.w	r1, r1, #4
 800a80c:	6021      	strge	r1, [r4, #0]
 800a80e:	b90e      	cbnz	r6, 800a814 <_printf_i+0x114>
 800a810:	2d00      	cmp	r5, #0
 800a812:	d04b      	beq.n	800a8ac <_printf_i+0x1ac>
 800a814:	4615      	mov	r5, r2
 800a816:	fbb6 f1f3 	udiv	r1, r6, r3
 800a81a:	fb03 6711 	mls	r7, r3, r1, r6
 800a81e:	5dc7      	ldrb	r7, [r0, r7]
 800a820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a824:	4637      	mov	r7, r6
 800a826:	42bb      	cmp	r3, r7
 800a828:	460e      	mov	r6, r1
 800a82a:	d9f4      	bls.n	800a816 <_printf_i+0x116>
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d10b      	bne.n	800a848 <_printf_i+0x148>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	07de      	lsls	r6, r3, #31
 800a834:	d508      	bpl.n	800a848 <_printf_i+0x148>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6861      	ldr	r1, [r4, #4]
 800a83a:	4299      	cmp	r1, r3
 800a83c:	bfde      	ittt	le
 800a83e:	2330      	movle	r3, #48	; 0x30
 800a840:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a844:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a848:	1b52      	subs	r2, r2, r5
 800a84a:	6122      	str	r2, [r4, #16]
 800a84c:	f8cd a000 	str.w	sl, [sp]
 800a850:	464b      	mov	r3, r9
 800a852:	aa03      	add	r2, sp, #12
 800a854:	4621      	mov	r1, r4
 800a856:	4640      	mov	r0, r8
 800a858:	f7ff fee4 	bl	800a624 <_printf_common>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d14a      	bne.n	800a8f6 <_printf_i+0x1f6>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	b004      	add	sp, #16
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	f043 0320 	orr.w	r3, r3, #32
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	4833      	ldr	r0, [pc, #204]	; (800a940 <_printf_i+0x240>)
 800a874:	2778      	movs	r7, #120	; 0x78
 800a876:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6829      	ldr	r1, [r5, #0]
 800a87e:	061f      	lsls	r7, r3, #24
 800a880:	f851 6b04 	ldr.w	r6, [r1], #4
 800a884:	d402      	bmi.n	800a88c <_printf_i+0x18c>
 800a886:	065f      	lsls	r7, r3, #25
 800a888:	bf48      	it	mi
 800a88a:	b2b6      	uxthmi	r6, r6
 800a88c:	07df      	lsls	r7, r3, #31
 800a88e:	bf48      	it	mi
 800a890:	f043 0320 	orrmi.w	r3, r3, #32
 800a894:	6029      	str	r1, [r5, #0]
 800a896:	bf48      	it	mi
 800a898:	6023      	strmi	r3, [r4, #0]
 800a89a:	b91e      	cbnz	r6, 800a8a4 <_printf_i+0x1a4>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	f023 0320 	bic.w	r3, r3, #32
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	e7a7      	b.n	800a7f8 <_printf_i+0xf8>
 800a8a8:	4824      	ldr	r0, [pc, #144]	; (800a93c <_printf_i+0x23c>)
 800a8aa:	e7e4      	b.n	800a876 <_printf_i+0x176>
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	e7bd      	b.n	800a82c <_printf_i+0x12c>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	6826      	ldr	r6, [r4, #0]
 800a8b4:	6961      	ldr	r1, [r4, #20]
 800a8b6:	1d18      	adds	r0, r3, #4
 800a8b8:	6028      	str	r0, [r5, #0]
 800a8ba:	0635      	lsls	r5, r6, #24
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	d501      	bpl.n	800a8c4 <_printf_i+0x1c4>
 800a8c0:	6019      	str	r1, [r3, #0]
 800a8c2:	e002      	b.n	800a8ca <_printf_i+0x1ca>
 800a8c4:	0670      	lsls	r0, r6, #25
 800a8c6:	d5fb      	bpl.n	800a8c0 <_printf_i+0x1c0>
 800a8c8:	8019      	strh	r1, [r3, #0]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	4615      	mov	r5, r2
 800a8d0:	e7bc      	b.n	800a84c <_printf_i+0x14c>
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	602a      	str	r2, [r5, #0]
 800a8d8:	681d      	ldr	r5, [r3, #0]
 800a8da:	6862      	ldr	r2, [r4, #4]
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f7f5 fc76 	bl	80001d0 <memchr>
 800a8e4:	b108      	cbz	r0, 800a8ea <_printf_i+0x1ea>
 800a8e6:	1b40      	subs	r0, r0, r5
 800a8e8:	6060      	str	r0, [r4, #4]
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	6123      	str	r3, [r4, #16]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f4:	e7aa      	b.n	800a84c <_printf_i+0x14c>
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	47d0      	blx	sl
 800a900:	3001      	adds	r0, #1
 800a902:	d0ad      	beq.n	800a860 <_printf_i+0x160>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	079b      	lsls	r3, r3, #30
 800a908:	d413      	bmi.n	800a932 <_printf_i+0x232>
 800a90a:	68e0      	ldr	r0, [r4, #12]
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	4298      	cmp	r0, r3
 800a910:	bfb8      	it	lt
 800a912:	4618      	movlt	r0, r3
 800a914:	e7a6      	b.n	800a864 <_printf_i+0x164>
 800a916:	2301      	movs	r3, #1
 800a918:	4632      	mov	r2, r6
 800a91a:	4649      	mov	r1, r9
 800a91c:	4640      	mov	r0, r8
 800a91e:	47d0      	blx	sl
 800a920:	3001      	adds	r0, #1
 800a922:	d09d      	beq.n	800a860 <_printf_i+0x160>
 800a924:	3501      	adds	r5, #1
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	9903      	ldr	r1, [sp, #12]
 800a92a:	1a5b      	subs	r3, r3, r1
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dcf2      	bgt.n	800a916 <_printf_i+0x216>
 800a930:	e7eb      	b.n	800a90a <_printf_i+0x20a>
 800a932:	2500      	movs	r5, #0
 800a934:	f104 0619 	add.w	r6, r4, #25
 800a938:	e7f5      	b.n	800a926 <_printf_i+0x226>
 800a93a:	bf00      	nop
 800a93c:	0800b698 	.word	0x0800b698
 800a940:	0800b6a9 	.word	0x0800b6a9

0800a944 <memmove>:
 800a944:	4288      	cmp	r0, r1
 800a946:	b510      	push	{r4, lr}
 800a948:	eb01 0402 	add.w	r4, r1, r2
 800a94c:	d902      	bls.n	800a954 <memmove+0x10>
 800a94e:	4284      	cmp	r4, r0
 800a950:	4623      	mov	r3, r4
 800a952:	d807      	bhi.n	800a964 <memmove+0x20>
 800a954:	1e43      	subs	r3, r0, #1
 800a956:	42a1      	cmp	r1, r4
 800a958:	d008      	beq.n	800a96c <memmove+0x28>
 800a95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a962:	e7f8      	b.n	800a956 <memmove+0x12>
 800a964:	4402      	add	r2, r0
 800a966:	4601      	mov	r1, r0
 800a968:	428a      	cmp	r2, r1
 800a96a:	d100      	bne.n	800a96e <memmove+0x2a>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a976:	e7f7      	b.n	800a968 <memmove+0x24>

0800a978 <_sbrk_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_sbrk_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 fb1e 	bl	8001fc4 <_sbrk>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_sbrk_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_sbrk_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	200006d4 	.word	0x200006d4

0800a998 <memcpy>:
 800a998:	440a      	add	r2, r1
 800a99a:	4291      	cmp	r1, r2
 800a99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a0:	d100      	bne.n	800a9a4 <memcpy+0xc>
 800a9a2:	4770      	bx	lr
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ae:	4291      	cmp	r1, r2
 800a9b0:	d1f9      	bne.n	800a9a6 <memcpy+0xe>
 800a9b2:	bd10      	pop	{r4, pc}

0800a9b4 <_realloc_r>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	4614      	mov	r4, r2
 800a9bc:	460e      	mov	r6, r1
 800a9be:	b921      	cbnz	r1, 800a9ca <_realloc_r+0x16>
 800a9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	f7ff bc49 	b.w	800a25c <_malloc_r>
 800a9ca:	b92a      	cbnz	r2, 800a9d8 <_realloc_r+0x24>
 800a9cc:	f7ff fbda 	bl	800a184 <_free_r>
 800a9d0:	4625      	mov	r5, r4
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d8:	f000 f81b 	bl	800aa12 <_malloc_usable_size_r>
 800a9dc:	4284      	cmp	r4, r0
 800a9de:	4607      	mov	r7, r0
 800a9e0:	d802      	bhi.n	800a9e8 <_realloc_r+0x34>
 800a9e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9e6:	d812      	bhi.n	800aa0e <_realloc_r+0x5a>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	f7ff fc36 	bl	800a25c <_malloc_r>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d0ed      	beq.n	800a9d2 <_realloc_r+0x1e>
 800a9f6:	42bc      	cmp	r4, r7
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	bf28      	it	cs
 800a9fe:	463a      	movcs	r2, r7
 800aa00:	f7ff ffca 	bl	800a998 <memcpy>
 800aa04:	4631      	mov	r1, r6
 800aa06:	4640      	mov	r0, r8
 800aa08:	f7ff fbbc 	bl	800a184 <_free_r>
 800aa0c:	e7e1      	b.n	800a9d2 <_realloc_r+0x1e>
 800aa0e:	4635      	mov	r5, r6
 800aa10:	e7df      	b.n	800a9d2 <_realloc_r+0x1e>

0800aa12 <_malloc_usable_size_r>:
 800aa12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa16:	1f18      	subs	r0, r3, #4
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfbc      	itt	lt
 800aa1c:	580b      	ldrlt	r3, [r1, r0]
 800aa1e:	18c0      	addlt	r0, r0, r3
 800aa20:	4770      	bx	lr
	...

0800aa24 <_init>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr

0800aa30 <_fini>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr
